name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "JWT_SECRET=test-secret-key-for-ci" >> .env.test
        echo "MONGODB_TEST_URI=mongodb://localhost:27017/holistic-store-test" >> .env.test
        echo "MOLLIE_API_KEY=test_dummy_key" >> .env.test
        echo "EMAIL_HOST=smtp.test.com" >> .env.test
        echo "EMAIL_PORT=587" >> .env.test
        echo "EMAIL_USER=test@test.com" >> .env.test
        echo "EMAIL_PASS=testpass" >> .env.test

    - name: Wait for MongoDB
      run: |
        until mongosh --host localhost:27017 --eval "print('MongoDB is ready')"; do
          echo "Waiting for MongoDB..."
          sleep 2
        done

    - name: Run unit tests
      run: npm test -- --testPathPattern="test/(models|utils|middleware)" --coverage --coverageDirectory=coverage/unit

    - name: Run integration tests
      run: npm test -- --testPathPattern="test/(routes|integration)" --coverage --coverageDirectory=coverage/integration

    - name: Run performance tests
      run: npm test -- --testPathPattern="test/performance" --testTimeout=30000

    - name: Run security tests
      run: npm test -- --testPathPattern="test/security"

    - name: Publish Jest JUnit Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: jest
        path: test-results/jest-junit.xml
        reporter: junit

    - name: Generate combined coverage report
      run: |
        npx nyc merge coverage/unit coverage/integration
        npx nyc report --reporter=lcov --reporter=text-summary

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint . --ext .js --format junit --output-file eslint-results.xml

    - name: Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: eslint-results.xml

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          package.json
          package-lock.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to staging
      run: echo "Deploy to staging environment"
      # Add your staging deployment steps here

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: echo "Deploy to production environment"
      # Add your production deployment steps here
