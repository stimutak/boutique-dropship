name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci || npm install

    - name: Create test environment file
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "JWT_SECRET=test-secret-key-for-ci-that-is-at-least-32-characters-long" >> .env.test
        echo "SESSION_SECRET=test-session-secret-for-ci" >> .env.test
        echo "MOLLIE_API_KEY=test_dummy_key" >> .env.test
        echo "EMAIL_HOST=smtp.test.com" >> .env.test
        echo "EMAIL_PORT=587" >> .env.test
        echo "EMAIL_USER=test@test.com" >> .env.test
        echo "EMAIL_PASS=testpass" >> .env.test
        echo "FRONTEND_URL=http://localhost:3001" >> .env.test
        cp .env.test .env

    - name: Run unit tests
      run: |
        export JEST_JUNIT_OUTPUT_NAME="unit-junit.xml"
        npm test -- --testPathPattern="test/(models|utils|middleware)" --coverage --coverageDirectory=coverage/unit
      continue-on-error: true

    - name: Run integration tests  
      run: |
        export JEST_JUNIT_OUTPUT_NAME="integration-junit.xml"
        npm test -- --testPathPattern="test/(routes|integration)" --coverage --coverageDirectory=coverage/integration
      continue-on-error: true

    - name: Run performance tests
      run: |
        export JEST_JUNIT_OUTPUT_NAME="performance-junit.xml"
        npm test -- --testPathPattern="test/performance" --testTimeout=30000
      continue-on-error: true

    - name: Run security tests
      run: |
        export JEST_JUNIT_OUTPUT_NAME="security-junit.xml"
        npm test -- --testPathPattern="test/security"
      continue-on-error: true

    - name: Publish Jest JUnit Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: jest
        path: 'test-results/*.xml'
        reporter: junit

    - name: Generate combined coverage report
      run: |
        # Jest already generates lcov reports, just combine them
        mkdir -p coverage
        cat coverage/unit/lcov.info coverage/integration/lcov.info > coverage/lcov.info 2>/dev/null || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci || npm install

    - name: Run ESLint
      run: npx eslint . --ext .js --format junit --output-file eslint-results.xml

    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: eslint-results.xml

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci || npm install

    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true  # Don't fail build for known vulnerabilities we're tracking

    # Snyk scan disabled - requires SNYK_TOKEN secret to be configured
    # - name: Run Snyk security scan
    #   uses: snyk/actions/node@master
    #   env:
    #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #     args: --severity-threshold=high

  # Build step removed - project uses Vite in client directory
  # To add client build later:
  # - cd client && npm ci && npm run build

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to staging
      run: echo "Deploy to staging environment"
      # Add your staging deployment steps here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: echo "Deploy to production environment"
      # Add your production deployment steps here
