# Production nginx configuration for International Boutique Store
# Optimized for performance, security, and international support

user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log error;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced logging for production monitoring
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time $pipe $upstream_cache_status';

    access_log /var/log/nginx/access.log main buffer=16k flush=2m;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    keepalive_requests 100;
    reset_timedout_connection on;
    client_body_timeout 10;
    send_timeout 10;
    types_hash_max_size 2048;
    server_tokens off;

    # International support
    charset utf-8;
    charset_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/xhtml+xml font/opentype image/svg+xml image/x-icon application/vnd.ms-fontobject font/ttf font/otf;
    gzip_min_length 1000;
    gzip_disable "msie6";

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:20m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=100r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Request limiting
    limit_req_status 429;
    limit_conn_status 429;

    # Proxy settings
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Request-ID $request_id;
    
    # Buffer settings
    client_max_body_size 50M;
    client_body_buffer_size 128k;
    proxy_buffer_size 8k;
    proxy_buffers 8 32k;
    proxy_busy_buffers_size 64k;
    proxy_temp_file_write_size 64k;

    # Timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;

    # Cache configuration
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:20m max_size=2g inactive=24h use_temp_path=off;
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=500m inactive=10m use_temp_path=off;

    # SSL configuration
    include /etc/nginx/ssl.conf;

    # Security headers
    include /etc/nginx/security.conf;

    # Upstream definitions
    upstream backend_servers {
        least_conn;
        server backend:5001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream frontend_servers {
        server frontend:3001 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name _;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name boutique.international;

        # SSL certificate paths
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        # Logging
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;

        # Security headers
        add_header X-Request-ID $request_id always;

        # API endpoints
        location /api {
            limit_req zone=api burst=50 nodelay;
            limit_conn addr 10;
            
            proxy_pass http://backend_servers;
            proxy_cache api_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri$http_authorization";
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            
            # Don't cache user-specific endpoints
            proxy_cache_bypass $cookie_session $http_authorization;
            proxy_no_cache $cookie_session $http_authorization;
            
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Auth endpoints (stricter rate limiting)
        location ~ ^/api/(auth|login|register|logout) {
            limit_req zone=auth burst=10 nodelay;
            limit_conn addr 5;
            
            proxy_pass http://backend_servers;
            proxy_cache off;
        }

        # Static files from backend (uploads, product images)
        location /uploads {
            limit_req zone=static burst=100 nodelay;
            
            proxy_pass http://backend_servers;
            proxy_cache static_cache;
            proxy_cache_valid 200 24h;
            proxy_cache_valid 404 1h;
            proxy_ignore_headers Cache-Control;
            
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status $upstream_cache_status;
        }

        location /images {
            limit_req zone=static burst=100 nodelay;
            
            proxy_pass http://backend_servers;
            proxy_cache static_cache;
            proxy_cache_valid 200 24h;
            proxy_cache_valid 404 1h;
            proxy_ignore_headers Cache-Control;
            
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Frontend static files
        location / {
            proxy_pass http://frontend_servers;
            proxy_cache static_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 10m;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|otf)$ {
                proxy_pass http://frontend_servers;
                proxy_cache static_cache;
                proxy_cache_valid 200 7d;
                expires 7d;
                add_header Cache-Control "public, immutable";
                add_header X-Cache-Status $upstream_cache_status;
            }
        }

        # Health check endpoints
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location /api/health {
            access_log off;
            proxy_pass http://backend_servers;
            proxy_cache off;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # WebSocket support for real-time features
        location /ws {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }
    }

    # Additional server names (international domains)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name boutique.fr boutique.de boutique.es boutique.jp boutique.cn;
        
        # Reuse SSL configuration
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        
        # Redirect to main domain
        return 301 https://boutique.international$request_uri;
    }
}