ca804020f794b40ada28892997e3d12d
// Mock all external services for testing

// Mock nodemailer

// Mock Mollie client

// Mock logger

// Mock error recovery

// Mock wholesaler notification service

// Mock email service
_getJestObj().mock('nodemailer', () => ({
  createTransport: jest.fn(() => ({
    sendMail: jest.fn(() => Promise.resolve({
      messageId: 'test-message-id',
      accepted: ['test@example.com'],
      rejected: []
    }))
  }))
}));
_getJestObj().mock('@mollie/api-client', () => ({
  createMollieClient: jest.fn(() => ({
    payments: {
      create: jest.fn(() => Promise.resolve({
        id: 'tr_test123',
        status: 'open',
        amount: {
          value: '10.00',
          currency: 'EUR'
        },
        description: 'Test payment',
        redirectUrl: 'https://example.com/return',
        webhookUrl: 'https://example.com/webhook',
        _links: {
          checkout: {
            href: 'https://checkout.mollie.com/test'
          }
        }
      })),
      get: jest.fn(() => Promise.resolve({
        id: 'tr_test123',
        status: 'paid',
        amount: {
          value: '10.00',
          currency: 'EUR'
        }
      })),
      list: jest.fn(() => Promise.resolve({
        _embedded: {
          payments: []
        },
        count: 0
      }))
    },
    methods: {
      list: jest.fn(() => Promise.resolve([{
        id: 'creditcard',
        description: 'Credit card'
      }, {
        id: 'ideal',
        description: 'iDEAL'
      }]))
    }
  }))
}));
_getJestObj().mock('../../utils/logger', () => ({
  logger: {
    info: jest.fn(),
    error: jest.fn(),
    warn: jest.fn(),
    debug: jest.fn()
  }
}));
_getJestObj().mock('../../utils/errorRecovery', () => ({
  getCircuitBreakerStatus: jest.fn(() => ({
    payment: {
      state: 'closed',
      failures: 0
    },
    email: {
      state: 'closed',
      failures: 0
    },
    wholesaler: {
      state: 'closed',
      failures: 0
    }
  })),
  executeWithCircuitBreaker: jest.fn((service, operation) => operation())
}));
_getJestObj().mock('../../utils/wholesalerNotificationService', () => ({
  sendOrderNotification: jest.fn(() => Promise.resolve({
    success: true,
    messageId: 'test-notification-id'
  })),
  retryFailedNotifications: jest.fn(() => Promise.resolve({
    success: true,
    retriedCount: 0
  }))
}));
_getJestObj().mock('../../utils/emailService', () => ({
  sendWelcomeEmail: jest.fn(() => Promise.resolve({
    success: true,
    messageId: 'welcome-email-id'
  })),
  sendOrderConfirmation: jest.fn(() => Promise.resolve({
    success: true,
    messageId: 'order-confirmation-id'
  })),
  sendPasswordResetEmail: jest.fn(() => Promise.resolve({
    success: true,
    messageId: 'password-reset-id'
  }))
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
module.exports = {
  // Export mocked services for direct access in tests if needed
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,