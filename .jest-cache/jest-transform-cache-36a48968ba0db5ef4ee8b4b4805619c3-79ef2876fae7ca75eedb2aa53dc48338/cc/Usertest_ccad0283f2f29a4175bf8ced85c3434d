2fcbb3943f7e47ea7f21c6c80d1dfafd
const mongoose = require('mongoose');
const User = require('../../models/User');
describe('User Model', () => {
  describe('User Creation and Authentication', () => {
    test('should create a user with hashed password', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'password123',
        firstName: 'John',
        lastName: 'Doe'
      };
      const user = new User(userData);
      const savedUser = await user.save();
      expect(savedUser.email).toBe('test@example.com');
      expect(savedUser.password).not.toBe('password123'); // Should be hashed
      expect(savedUser.firstName).toBe('John');
      expect(savedUser.lastName).toBe('Doe');
    });
    test('should compare passwords correctly', async () => {
      const user = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'John',
        lastName: 'Doe'
      });
      const isMatch = await user.comparePassword('password123');
      const isNotMatch = await user.comparePassword('wrongpassword');
      expect(isMatch).toBe(true);
      expect(isNotMatch).toBe(false);
    });
    test('should enforce unique email', async () => {
      await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'John',
        lastName: 'Doe'
      });
      const duplicateUser = new User({
        email: 'test@example.com',
        password: 'password456',
        firstName: 'Jane',
        lastName: 'Smith'
      });
      await expect(duplicateUser.save()).rejects.toThrow();
    });
  });
  describe('Address Management', () => {
    let testUser;
    beforeEach(async () => {
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'John',
        lastName: 'Doe'
      });
    });
    test('should add shipping address', async () => {
      const addressData = {
        type: 'shipping',
        firstName: 'John',
        lastName: 'Doe',
        street: '123 Main St',
        city: 'Anytown',
        state: 'CA',
        zipCode: '12345',
        country: 'US',
        isDefault: true
      };
      await testUser.addAddress(addressData);
      const updatedUser = await User.findById(testUser._id);
      expect(updatedUser.addresses).toHaveLength(1);
      expect(updatedUser.addresses[0].type).toBe('shipping');
      expect(updatedUser.addresses[0].street).toBe('123 Main St');
      expect(updatedUser.addresses[0].isDefault).toBe(true);
    });
    test('should add billing address', async () => {
      const addressData = {
        type: 'billing',
        firstName: 'John',
        lastName: 'Doe',
        street: '456 Oak Ave',
        city: 'Another Town',
        state: 'NY',
        zipCode: '67890',
        country: 'US',
        isDefault: true
      };
      await testUser.addAddress(addressData);
      const updatedUser = await User.findById(testUser._id);
      expect(updatedUser.addresses).toHaveLength(1);
      expect(updatedUser.addresses[0].type).toBe('billing');
      expect(updatedUser.addresses[0].city).toBe('Another Town');
    });
    test('should handle multiple addresses with default management', async () => {
      // Add first shipping address as default
      await testUser.addAddress({
        type: 'shipping',
        firstName: 'John',
        lastName: 'Doe',
        street: '123 Main St',
        city: 'Anytown',
        state: 'CA',
        zipCode: '12345',
        country: 'US',
        isDefault: true
      });

      // Add second shipping address as default (should unset first)
      await testUser.addAddress({
        type: 'shipping',
        firstName: 'John',
        lastName: 'Doe',
        street: '456 Oak Ave',
        city: 'Another Town',
        state: 'NY',
        zipCode: '67890',
        country: 'US',
        isDefault: true
      });
      const updatedUser = await User.findById(testUser._id);
      const defaultAddresses = updatedUser.addresses.filter(addr => addr.isDefault);
      expect(updatedUser.addresses).toHaveLength(2);
      expect(defaultAddresses).toHaveLength(1);
      expect(defaultAddresses[0].city).toBe('Another Town');
    });
    test('getDefaultShippingAddress should return correct address', async () => {
      await testUser.addAddress({
        type: 'shipping',
        firstName: 'John',
        lastName: 'Doe',
        street: '123 Main St',
        city: 'Anytown',
        state: 'CA',
        zipCode: '12345',
        country: 'US',
        isDefault: true
      });
      const defaultShipping = testUser.getDefaultShippingAddress();
      expect(defaultShipping.city).toBe('Anytown');
      expect(defaultShipping.type).toBe('shipping');
    });
    test('getDefaultBillingAddress should return billing or fallback to shipping', async () => {
      // Add only shipping address
      await testUser.addAddress({
        type: 'shipping',
        firstName: 'John',
        lastName: 'Doe',
        street: '123 Main St',
        city: 'Anytown',
        state: 'CA',
        zipCode: '12345',
        country: 'US',
        isDefault: true
      });
      const defaultBilling = testUser.getDefaultBillingAddress();
      expect(defaultBilling.city).toBe('Anytown'); // Should fallback to shipping
      expect(defaultBilling.type).toBe('shipping');

      // Add billing address
      await testUser.addAddress({
        type: 'billing',
        firstName: 'John',
        lastName: 'Doe',
        street: '456 Oak Ave',
        city: 'Billing City',
        state: 'NY',
        zipCode: '67890',
        country: 'US',
        isDefault: true
      });
      const updatedUser = await User.findById(testUser._id);
      const newDefaultBilling = updatedUser.getDefaultBillingAddress();
      expect(newDefaultBilling.city).toBe('Billing City');
      expect(newDefaultBilling.type).toBe('billing');
    });
    test('should update address', async () => {
      await testUser.addAddress({
        type: 'shipping',
        firstName: 'John',
        lastName: 'Doe',
        street: '123 Main St',
        city: 'Anytown',
        state: 'CA',
        zipCode: '12345',
        country: 'US'
      });
      const addressId = testUser.addresses[0]._id;
      await testUser.updateAddress(addressId, {
        street: '789 Updated St',
        city: 'Updated City'
      });
      const updatedUser = await User.findById(testUser._id);
      expect(updatedUser.addresses[0].street).toBe('789 Updated St');
      expect(updatedUser.addresses[0].city).toBe('Updated City');
    });
    test('should remove address', async () => {
      await testUser.addAddress({
        type: 'shipping',
        firstName: 'John',
        lastName: 'Doe',
        street: '123 Main St',
        city: 'Anytown',
        state: 'CA',
        zipCode: '12345',
        country: 'US'
      });
      expect(testUser.addresses).toHaveLength(1);
      const addressId = testUser.addresses[0]._id;
      await testUser.removeAddress(addressId);
      const updatedUser = await User.findById(testUser._id);
      expect(updatedUser.addresses).toHaveLength(0);
    });
  });
  describe('Data Privacy', () => {
    test('toPublicJSON should exclude sensitive information', async () => {
      const user = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'John',
        lastName: 'Doe',
        phone: '555-1234',
        addresses: [{
          type: 'shipping',
          firstName: 'John',
          lastName: 'Doe',
          street: '123 Main St',
          city: 'Anytown',
          state: 'CA',
          zipCode: '12345',
          country: 'US'
        }]
      });
      const publicData = user.toPublicJSON();
      expect(publicData.email).toBe('test@example.com');
      expect(publicData.firstName).toBe('John');
      expect(publicData.addresses).toHaveLength(1);
      expect(publicData.password).toBeUndefined();
      expect(publicData.__v).toBeUndefined();
    });
  });
  describe('Validation', () => {
    test('should require all mandatory fields', async () => {
      const user = new User({});
      await expect(user.save()).rejects.toThrow();
    });
    test('should validate email format', async () => {
      const user = new User({
        email: 'invalid-email',
        password: 'password123',
        firstName: 'John',
        lastName: 'Doe'
      });

      // Note: Mongoose doesn't validate email format by default
      // This would need additional validation middleware
      expect(user.email).toBe('invalid-email');
    });
    test('should enforce minimum password length', async () => {
      const user = new User({
        email: 'test@example.com',
        password: '123',
        firstName: 'John',
        lastName: 'Doe'
      });
      await expect(user.save()).rejects.toThrow();
    });
  });
  describe('Indexes', () => {
    test('should have proper indexes for performance', async () => {
      const indexes = await User.collection.getIndexes();
      expect(indexes).toHaveProperty('email_1');
      expect(indexes).toHaveProperty('isActive_1');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJVc2VyIiwiZGVzY3JpYmUiLCJ0ZXN0IiwidXNlckRhdGEiLCJlbWFpbCIsInBhc3N3b3JkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJ1c2VyIiwic2F2ZWRVc2VyIiwic2F2ZSIsImV4cGVjdCIsInRvQmUiLCJub3QiLCJjcmVhdGUiLCJpc01hdGNoIiwiY29tcGFyZVBhc3N3b3JkIiwiaXNOb3RNYXRjaCIsImR1cGxpY2F0ZVVzZXIiLCJyZWplY3RzIiwidG9UaHJvdyIsInRlc3RVc2VyIiwiYmVmb3JlRWFjaCIsImFkZHJlc3NEYXRhIiwidHlwZSIsInN0cmVldCIsImNpdHkiLCJzdGF0ZSIsInppcENvZGUiLCJjb3VudHJ5IiwiaXNEZWZhdWx0IiwiYWRkQWRkcmVzcyIsInVwZGF0ZWRVc2VyIiwiZmluZEJ5SWQiLCJfaWQiLCJhZGRyZXNzZXMiLCJ0b0hhdmVMZW5ndGgiLCJkZWZhdWx0QWRkcmVzc2VzIiwiZmlsdGVyIiwiYWRkciIsImRlZmF1bHRTaGlwcGluZyIsImdldERlZmF1bHRTaGlwcGluZ0FkZHJlc3MiLCJkZWZhdWx0QmlsbGluZyIsImdldERlZmF1bHRCaWxsaW5nQWRkcmVzcyIsIm5ld0RlZmF1bHRCaWxsaW5nIiwiYWRkcmVzc0lkIiwidXBkYXRlQWRkcmVzcyIsInJlbW92ZUFkZHJlc3MiLCJwaG9uZSIsInB1YmxpY0RhdGEiLCJ0b1B1YmxpY0pTT04iLCJ0b0JlVW5kZWZpbmVkIiwiX192IiwiaW5kZXhlcyIsImNvbGxlY3Rpb24iLCJnZXRJbmRleGVzIiwidG9IYXZlUHJvcGVydHkiXSwic291cmNlcyI6WyJVc2VyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuY29uc3QgVXNlciA9IHJlcXVpcmUoJy4uLy4uL21vZGVscy9Vc2VyJyk7XG5cbmRlc2NyaWJlKCdVc2VyIE1vZGVsJywgKCkgPT4ge1xuXG4gIGRlc2NyaWJlKCdVc2VyIENyZWF0aW9uIGFuZCBBdXRoZW50aWNhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIGEgdXNlciB3aXRoIGhhc2hlZCBwYXNzd29yZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXJEYXRhID0ge1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnRG9lJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKHVzZXJEYXRhKTtcbiAgICAgIGNvbnN0IHNhdmVkVXNlciA9IGF3YWl0IHVzZXIuc2F2ZSgpO1xuXG4gICAgICBleHBlY3Qoc2F2ZWRVc2VyLmVtYWlsKS50b0JlKCd0ZXN0QGV4YW1wbGUuY29tJyk7XG4gICAgICBleHBlY3Qoc2F2ZWRVc2VyLnBhc3N3b3JkKS5ub3QudG9CZSgncGFzc3dvcmQxMjMnKTsgLy8gU2hvdWxkIGJlIGhhc2hlZFxuICAgICAgZXhwZWN0KHNhdmVkVXNlci5maXJzdE5hbWUpLnRvQmUoJ0pvaG4nKTtcbiAgICAgIGV4cGVjdChzYXZlZFVzZXIubGFzdE5hbWUpLnRvQmUoJ0RvZScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNvbXBhcmUgcGFzc3dvcmRzIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICAgICAgbGFzdE5hbWU6ICdEb2UnXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaXNNYXRjaCA9IGF3YWl0IHVzZXIuY29tcGFyZVBhc3N3b3JkKCdwYXNzd29yZDEyMycpO1xuICAgICAgY29uc3QgaXNOb3RNYXRjaCA9IGF3YWl0IHVzZXIuY29tcGFyZVBhc3N3b3JkKCd3cm9uZ3Bhc3N3b3JkJyk7XG5cbiAgICAgIGV4cGVjdChpc01hdGNoKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzTm90TWF0Y2gpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGVuZm9yY2UgdW5pcXVlIGVtYWlsJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgVXNlci5jcmVhdGUoe1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnRG9lJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGR1cGxpY2F0ZVVzZXIgPSBuZXcgVXNlcih7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQ0NTYnLFxuICAgICAgICBmaXJzdE5hbWU6ICdKYW5lJyxcbiAgICAgICAgbGFzdE5hbWU6ICdTbWl0aCdcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBleHBlY3QoZHVwbGljYXRlVXNlci5zYXZlKCkpLnJlamVjdHMudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQWRkcmVzcyBNYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgIGxldCB0ZXN0VXNlcjtcblxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgdGVzdFVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICAgICAgbGFzdE5hbWU6ICdEb2UnXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhZGQgc2hpcHBpbmcgYWRkcmVzcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFkZHJlc3NEYXRhID0ge1xuICAgICAgICB0eXBlOiAnc2hpcHBpbmcnLFxuICAgICAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICAgICAgbGFzdE5hbWU6ICdEb2UnLFxuICAgICAgICBzdHJlZXQ6ICcxMjMgTWFpbiBTdCcsXG4gICAgICAgIGNpdHk6ICdBbnl0b3duJyxcbiAgICAgICAgc3RhdGU6ICdDQScsXG4gICAgICAgIHppcENvZGU6ICcxMjM0NScsXG4gICAgICAgIGNvdW50cnk6ICdVUycsXG4gICAgICAgIGlzRGVmYXVsdDogdHJ1ZVxuICAgICAgfTtcblxuICAgICAgYXdhaXQgdGVzdFVzZXIuYWRkQWRkcmVzcyhhZGRyZXNzRGF0YSk7XG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQodGVzdFVzZXIuX2lkKTtcblxuICAgICAgZXhwZWN0KHVwZGF0ZWRVc2VyLmFkZHJlc3NlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHVwZGF0ZWRVc2VyLmFkZHJlc3Nlc1swXS50eXBlKS50b0JlKCdzaGlwcGluZycpO1xuICAgICAgZXhwZWN0KHVwZGF0ZWRVc2VyLmFkZHJlc3Nlc1swXS5zdHJlZXQpLnRvQmUoJzEyMyBNYWluIFN0Jyk7XG4gICAgICBleHBlY3QodXBkYXRlZFVzZXIuYWRkcmVzc2VzWzBdLmlzRGVmYXVsdCkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhZGQgYmlsbGluZyBhZGRyZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYWRkcmVzc0RhdGEgPSB7XG4gICAgICAgIHR5cGU6ICdiaWxsaW5nJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICAgICAgc3RyZWV0OiAnNDU2IE9hayBBdmUnLFxuICAgICAgICBjaXR5OiAnQW5vdGhlciBUb3duJyxcbiAgICAgICAgc3RhdGU6ICdOWScsXG4gICAgICAgIHppcENvZGU6ICc2Nzg5MCcsXG4gICAgICAgIGNvdW50cnk6ICdVUycsXG4gICAgICAgIGlzRGVmYXVsdDogdHJ1ZVxuICAgICAgfTtcblxuICAgICAgYXdhaXQgdGVzdFVzZXIuYWRkQWRkcmVzcyhhZGRyZXNzRGF0YSk7XG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQodGVzdFVzZXIuX2lkKTtcblxuICAgICAgZXhwZWN0KHVwZGF0ZWRVc2VyLmFkZHJlc3NlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHVwZGF0ZWRVc2VyLmFkZHJlc3Nlc1swXS50eXBlKS50b0JlKCdiaWxsaW5nJyk7XG4gICAgICBleHBlY3QodXBkYXRlZFVzZXIuYWRkcmVzc2VzWzBdLmNpdHkpLnRvQmUoJ0Fub3RoZXIgVG93bicpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBtdWx0aXBsZSBhZGRyZXNzZXMgd2l0aCBkZWZhdWx0IG1hbmFnZW1lbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBZGQgZmlyc3Qgc2hpcHBpbmcgYWRkcmVzcyBhcyBkZWZhdWx0XG4gICAgICBhd2FpdCB0ZXN0VXNlci5hZGRBZGRyZXNzKHtcbiAgICAgICAgdHlwZTogJ3NoaXBwaW5nJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICAgICAgc3RyZWV0OiAnMTIzIE1haW4gU3QnLFxuICAgICAgICBjaXR5OiAnQW55dG93bicsXG4gICAgICAgIHN0YXRlOiAnQ0EnLFxuICAgICAgICB6aXBDb2RlOiAnMTIzNDUnLFxuICAgICAgICBjb3VudHJ5OiAnVVMnLFxuICAgICAgICBpc0RlZmF1bHQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBZGQgc2Vjb25kIHNoaXBwaW5nIGFkZHJlc3MgYXMgZGVmYXVsdCAoc2hvdWxkIHVuc2V0IGZpcnN0KVxuICAgICAgYXdhaXQgdGVzdFVzZXIuYWRkQWRkcmVzcyh7XG4gICAgICAgIHR5cGU6ICdzaGlwcGluZycsXG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgIHN0cmVldDogJzQ1NiBPYWsgQXZlJyxcbiAgICAgICAgY2l0eTogJ0Fub3RoZXIgVG93bicsXG4gICAgICAgIHN0YXRlOiAnTlknLFxuICAgICAgICB6aXBDb2RlOiAnNjc4OTAnLFxuICAgICAgICBjb3VudHJ5OiAnVVMnLFxuICAgICAgICBpc0RlZmF1bHQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQodGVzdFVzZXIuX2lkKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRBZGRyZXNzZXMgPSB1cGRhdGVkVXNlci5hZGRyZXNzZXMuZmlsdGVyKGFkZHIgPT4gYWRkci5pc0RlZmF1bHQpO1xuICAgICAgXG4gICAgICBleHBlY3QodXBkYXRlZFVzZXIuYWRkcmVzc2VzKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QoZGVmYXVsdEFkZHJlc3NlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KGRlZmF1bHRBZGRyZXNzZXNbMF0uY2l0eSkudG9CZSgnQW5vdGhlciBUb3duJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdnZXREZWZhdWx0U2hpcHBpbmdBZGRyZXNzIHNob3VsZCByZXR1cm4gY29ycmVjdCBhZGRyZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGVzdFVzZXIuYWRkQWRkcmVzcyh7XG4gICAgICAgIHR5cGU6ICdzaGlwcGluZycsXG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgIHN0cmVldDogJzEyMyBNYWluIFN0JyxcbiAgICAgICAgY2l0eTogJ0FueXRvd24nLFxuICAgICAgICBzdGF0ZTogJ0NBJyxcbiAgICAgICAgemlwQ29kZTogJzEyMzQ1JyxcbiAgICAgICAgY291bnRyeTogJ1VTJyxcbiAgICAgICAgaXNEZWZhdWx0OiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZGVmYXVsdFNoaXBwaW5nID0gdGVzdFVzZXIuZ2V0RGVmYXVsdFNoaXBwaW5nQWRkcmVzcygpO1xuICAgICAgZXhwZWN0KGRlZmF1bHRTaGlwcGluZy5jaXR5KS50b0JlKCdBbnl0b3duJyk7XG4gICAgICBleHBlY3QoZGVmYXVsdFNoaXBwaW5nLnR5cGUpLnRvQmUoJ3NoaXBwaW5nJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdnZXREZWZhdWx0QmlsbGluZ0FkZHJlc3Mgc2hvdWxkIHJldHVybiBiaWxsaW5nIG9yIGZhbGxiYWNrIHRvIHNoaXBwaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWRkIG9ubHkgc2hpcHBpbmcgYWRkcmVzc1xuICAgICAgYXdhaXQgdGVzdFVzZXIuYWRkQWRkcmVzcyh7XG4gICAgICAgIHR5cGU6ICdzaGlwcGluZycsXG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgIHN0cmVldDogJzEyMyBNYWluIFN0JyxcbiAgICAgICAgY2l0eTogJ0FueXRvd24nLFxuICAgICAgICBzdGF0ZTogJ0NBJyxcbiAgICAgICAgemlwQ29kZTogJzEyMzQ1JyxcbiAgICAgICAgY291bnRyeTogJ1VTJyxcbiAgICAgICAgaXNEZWZhdWx0OiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZGVmYXVsdEJpbGxpbmcgPSB0ZXN0VXNlci5nZXREZWZhdWx0QmlsbGluZ0FkZHJlc3MoKTtcbiAgICAgIGV4cGVjdChkZWZhdWx0QmlsbGluZy5jaXR5KS50b0JlKCdBbnl0b3duJyk7IC8vIFNob3VsZCBmYWxsYmFjayB0byBzaGlwcGluZ1xuICAgICAgZXhwZWN0KGRlZmF1bHRCaWxsaW5nLnR5cGUpLnRvQmUoJ3NoaXBwaW5nJyk7XG5cbiAgICAgIC8vIEFkZCBiaWxsaW5nIGFkZHJlc3NcbiAgICAgIGF3YWl0IHRlc3RVc2VyLmFkZEFkZHJlc3Moe1xuICAgICAgICB0eXBlOiAnYmlsbGluZycsXG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgIHN0cmVldDogJzQ1NiBPYWsgQXZlJyxcbiAgICAgICAgY2l0eTogJ0JpbGxpbmcgQ2l0eScsXG4gICAgICAgIHN0YXRlOiAnTlknLFxuICAgICAgICB6aXBDb2RlOiAnNjc4OTAnLFxuICAgICAgICBjb3VudHJ5OiAnVVMnLFxuICAgICAgICBpc0RlZmF1bHQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQodGVzdFVzZXIuX2lkKTtcbiAgICAgIGNvbnN0IG5ld0RlZmF1bHRCaWxsaW5nID0gdXBkYXRlZFVzZXIuZ2V0RGVmYXVsdEJpbGxpbmdBZGRyZXNzKCk7XG4gICAgICBleHBlY3QobmV3RGVmYXVsdEJpbGxpbmcuY2l0eSkudG9CZSgnQmlsbGluZyBDaXR5Jyk7XG4gICAgICBleHBlY3QobmV3RGVmYXVsdEJpbGxpbmcudHlwZSkudG9CZSgnYmlsbGluZycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHVwZGF0ZSBhZGRyZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGVzdFVzZXIuYWRkQWRkcmVzcyh7XG4gICAgICAgIHR5cGU6ICdzaGlwcGluZycsXG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgIHN0cmVldDogJzEyMyBNYWluIFN0JyxcbiAgICAgICAgY2l0eTogJ0FueXRvd24nLFxuICAgICAgICBzdGF0ZTogJ0NBJyxcbiAgICAgICAgemlwQ29kZTogJzEyMzQ1JyxcbiAgICAgICAgY291bnRyeTogJ1VTJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGFkZHJlc3NJZCA9IHRlc3RVc2VyLmFkZHJlc3Nlc1swXS5faWQ7XG4gICAgICBhd2FpdCB0ZXN0VXNlci51cGRhdGVBZGRyZXNzKGFkZHJlc3NJZCwge1xuICAgICAgICBzdHJlZXQ6ICc3ODkgVXBkYXRlZCBTdCcsXG4gICAgICAgIGNpdHk6ICdVcGRhdGVkIENpdHknXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkKHRlc3RVc2VyLl9pZCk7XG4gICAgICBleHBlY3QodXBkYXRlZFVzZXIuYWRkcmVzc2VzWzBdLnN0cmVldCkudG9CZSgnNzg5IFVwZGF0ZWQgU3QnKTtcbiAgICAgIGV4cGVjdCh1cGRhdGVkVXNlci5hZGRyZXNzZXNbMF0uY2l0eSkudG9CZSgnVXBkYXRlZCBDaXR5Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVtb3ZlIGFkZHJlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0ZXN0VXNlci5hZGRBZGRyZXNzKHtcbiAgICAgICAgdHlwZTogJ3NoaXBwaW5nJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnRG9lJyxcbiAgICAgICAgc3RyZWV0OiAnMTIzIE1haW4gU3QnLFxuICAgICAgICBjaXR5OiAnQW55dG93bicsXG4gICAgICAgIHN0YXRlOiAnQ0EnLFxuICAgICAgICB6aXBDb2RlOiAnMTIzNDUnLFxuICAgICAgICBjb3VudHJ5OiAnVVMnXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHRlc3RVc2VyLmFkZHJlc3NlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgXG4gICAgICBjb25zdCBhZGRyZXNzSWQgPSB0ZXN0VXNlci5hZGRyZXNzZXNbMF0uX2lkO1xuICAgICAgYXdhaXQgdGVzdFVzZXIucmVtb3ZlQWRkcmVzcyhhZGRyZXNzSWQpO1xuXG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQodGVzdFVzZXIuX2lkKTtcbiAgICAgIGV4cGVjdCh1cGRhdGVkVXNlci5hZGRyZXNzZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0RhdGEgUHJpdmFjeScsICgpID0+IHtcbiAgICB0ZXN0KCd0b1B1YmxpY0pTT04gc2hvdWxkIGV4Y2x1ZGUgc2Vuc2l0aXZlIGluZm9ybWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuY3JlYXRlKHtcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycsXG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgIHBob25lOiAnNTU1LTEyMzQnLFxuICAgICAgICBhZGRyZXNzZXM6IFt7XG4gICAgICAgICAgdHlwZTogJ3NoaXBwaW5nJyxcbiAgICAgICAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICAgICAgICBsYXN0TmFtZTogJ0RvZScsXG4gICAgICAgICAgc3RyZWV0OiAnMTIzIE1haW4gU3QnLFxuICAgICAgICAgIGNpdHk6ICdBbnl0b3duJyxcbiAgICAgICAgICBzdGF0ZTogJ0NBJyxcbiAgICAgICAgICB6aXBDb2RlOiAnMTIzNDUnLFxuICAgICAgICAgIGNvdW50cnk6ICdVUydcbiAgICAgICAgfV1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBwdWJsaWNEYXRhID0gdXNlci50b1B1YmxpY0pTT04oKTtcblxuICAgICAgZXhwZWN0KHB1YmxpY0RhdGEuZW1haWwpLnRvQmUoJ3Rlc3RAZXhhbXBsZS5jb20nKTtcbiAgICAgIGV4cGVjdChwdWJsaWNEYXRhLmZpcnN0TmFtZSkudG9CZSgnSm9obicpO1xuICAgICAgZXhwZWN0KHB1YmxpY0RhdGEuYWRkcmVzc2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocHVibGljRGF0YS5wYXNzd29yZCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHB1YmxpY0RhdGEuX192KS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCByZXF1aXJlIGFsbCBtYW5kYXRvcnkgZmllbGRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKHt9KTtcbiAgICAgIGF3YWl0IGV4cGVjdCh1c2VyLnNhdmUoKSkucmVqZWN0cy50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgZW1haWwgZm9ybWF0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKHtcbiAgICAgICAgZW1haWw6ICdpbnZhbGlkLWVtYWlsJyxcbiAgICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycsXG4gICAgICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxuICAgICAgICBsYXN0TmFtZTogJ0RvZSdcbiAgICAgIH0pO1xuXG4gICAgICAvLyBOb3RlOiBNb25nb29zZSBkb2Vzbid0IHZhbGlkYXRlIGVtYWlsIGZvcm1hdCBieSBkZWZhdWx0XG4gICAgICAvLyBUaGlzIHdvdWxkIG5lZWQgYWRkaXRpb25hbCB2YWxpZGF0aW9uIG1pZGRsZXdhcmVcbiAgICAgIGV4cGVjdCh1c2VyLmVtYWlsKS50b0JlKCdpbnZhbGlkLWVtYWlsJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZW5mb3JjZSBtaW5pbXVtIHBhc3N3b3JkIGxlbmd0aCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcih7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAnMTIzJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnRG9lJ1xuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh1c2VyLnNhdmUoKSkucmVqZWN0cy50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbmRleGVzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYXZlIHByb3BlciBpbmRleGVzIGZvciBwZXJmb3JtYW5jZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ZXMgPSBhd2FpdCBVc2VyLmNvbGxlY3Rpb24uZ2V0SW5kZXhlcygpO1xuICAgICAgXG4gICAgICBleHBlY3QoaW5kZXhlcykudG9IYXZlUHJvcGVydHkoJ2VtYWlsXzEnKTtcbiAgICAgIGV4cGVjdChpbmRleGVzKS50b0hhdmVQcm9wZXJ0eSgnaXNBY3RpdmVfMScpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBRXpDRSxRQUFRLENBQUMsWUFBWSxFQUFFLE1BQU07RUFFM0JBLFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxNQUFNO0lBQ2pEQyxJQUFJLENBQUMsMkNBQTJDLEVBQUUsWUFBWTtNQUM1RCxNQUFNQyxRQUFRLEdBQUc7UUFDZkMsS0FBSyxFQUFFLGtCQUFrQjtRQUN6QkMsUUFBUSxFQUFFLGFBQWE7UUFDdkJDLFNBQVMsRUFBRSxNQUFNO1FBQ2pCQyxRQUFRLEVBQUU7TUFDWixDQUFDO01BRUQsTUFBTUMsSUFBSSxHQUFHLElBQUlSLElBQUksQ0FBQ0csUUFBUSxDQUFDO01BQy9CLE1BQU1NLFNBQVMsR0FBRyxNQUFNRCxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDO01BRW5DQyxNQUFNLENBQUNGLFNBQVMsQ0FBQ0wsS0FBSyxDQUFDLENBQUNRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztNQUNoREQsTUFBTSxDQUFDRixTQUFTLENBQUNKLFFBQVEsQ0FBQyxDQUFDUSxHQUFHLENBQUNELElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO01BQ3BERCxNQUFNLENBQUNGLFNBQVMsQ0FBQ0gsU0FBUyxDQUFDLENBQUNNLElBQUksQ0FBQyxNQUFNLENBQUM7TUFDeENELE1BQU0sQ0FBQ0YsU0FBUyxDQUFDRixRQUFRLENBQUMsQ0FBQ0ssSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN4QyxDQUFDLENBQUM7SUFFRlYsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLFlBQVk7TUFDckQsTUFBTU0sSUFBSSxHQUFHLE1BQU1SLElBQUksQ0FBQ2MsTUFBTSxDQUFDO1FBQzdCVixLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCQyxRQUFRLEVBQUUsYUFBYTtRQUN2QkMsU0FBUyxFQUFFLE1BQU07UUFDakJDLFFBQVEsRUFBRTtNQUNaLENBQUMsQ0FBQztNQUVGLE1BQU1RLE9BQU8sR0FBRyxNQUFNUCxJQUFJLENBQUNRLGVBQWUsQ0FBQyxhQUFhLENBQUM7TUFDekQsTUFBTUMsVUFBVSxHQUFHLE1BQU1ULElBQUksQ0FBQ1EsZUFBZSxDQUFDLGVBQWUsQ0FBQztNQUU5REwsTUFBTSxDQUFDSSxPQUFPLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQztNQUMxQkQsTUFBTSxDQUFDTSxVQUFVLENBQUMsQ0FBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNoQyxDQUFDLENBQUM7SUFFRlYsSUFBSSxDQUFDLDZCQUE2QixFQUFFLFlBQVk7TUFDOUMsTUFBTUYsSUFBSSxDQUFDYyxNQUFNLENBQUM7UUFDaEJWLEtBQUssRUFBRSxrQkFBa0I7UUFDekJDLFFBQVEsRUFBRSxhQUFhO1FBQ3ZCQyxTQUFTLEVBQUUsTUFBTTtRQUNqQkMsUUFBUSxFQUFFO01BQ1osQ0FBQyxDQUFDO01BRUYsTUFBTVcsYUFBYSxHQUFHLElBQUlsQixJQUFJLENBQUM7UUFDN0JJLEtBQUssRUFBRSxrQkFBa0I7UUFDekJDLFFBQVEsRUFBRSxhQUFhO1FBQ3ZCQyxTQUFTLEVBQUUsTUFBTTtRQUNqQkMsUUFBUSxFQUFFO01BQ1osQ0FBQyxDQUFDO01BRUYsTUFBTUksTUFBTSxDQUFDTyxhQUFhLENBQUNSLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ1MsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRm5CLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNO0lBQ25DLElBQUlvQixRQUFRO0lBRVpDLFVBQVUsQ0FBQyxZQUFZO01BQ3JCRCxRQUFRLEdBQUcsTUFBTXJCLElBQUksQ0FBQ2MsTUFBTSxDQUFDO1FBQzNCVixLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCQyxRQUFRLEVBQUUsYUFBYTtRQUN2QkMsU0FBUyxFQUFFLE1BQU07UUFDakJDLFFBQVEsRUFBRTtNQUNaLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGTCxJQUFJLENBQUMsNkJBQTZCLEVBQUUsWUFBWTtNQUM5QyxNQUFNcUIsV0FBVyxHQUFHO1FBQ2xCQyxJQUFJLEVBQUUsVUFBVTtRQUNoQmxCLFNBQVMsRUFBRSxNQUFNO1FBQ2pCQyxRQUFRLEVBQUUsS0FBSztRQUNma0IsTUFBTSxFQUFFLGFBQWE7UUFDckJDLElBQUksRUFBRSxTQUFTO1FBQ2ZDLEtBQUssRUFBRSxJQUFJO1FBQ1hDLE9BQU8sRUFBRSxPQUFPO1FBQ2hCQyxPQUFPLEVBQUUsSUFBSTtRQUNiQyxTQUFTLEVBQUU7TUFDYixDQUFDO01BRUQsTUFBTVQsUUFBUSxDQUFDVSxVQUFVLENBQUNSLFdBQVcsQ0FBQztNQUN0QyxNQUFNUyxXQUFXLEdBQUcsTUFBTWhDLElBQUksQ0FBQ2lDLFFBQVEsQ0FBQ1osUUFBUSxDQUFDYSxHQUFHLENBQUM7TUFFckR2QixNQUFNLENBQUNxQixXQUFXLENBQUNHLFNBQVMsQ0FBQyxDQUFDQyxZQUFZLENBQUMsQ0FBQyxDQUFDO01BQzdDekIsTUFBTSxDQUFDcUIsV0FBVyxDQUFDRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUNYLElBQUksQ0FBQyxDQUFDWixJQUFJLENBQUMsVUFBVSxDQUFDO01BQ3RERCxNQUFNLENBQUNxQixXQUFXLENBQUNHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQ1YsTUFBTSxDQUFDLENBQUNiLElBQUksQ0FBQyxhQUFhLENBQUM7TUFDM0RELE1BQU0sQ0FBQ3FCLFdBQVcsQ0FBQ0csU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDTCxTQUFTLENBQUMsQ0FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0lBRUZWLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxZQUFZO01BQzdDLE1BQU1xQixXQUFXLEdBQUc7UUFDbEJDLElBQUksRUFBRSxTQUFTO1FBQ2ZsQixTQUFTLEVBQUUsTUFBTTtRQUNqQkMsUUFBUSxFQUFFLEtBQUs7UUFDZmtCLE1BQU0sRUFBRSxhQUFhO1FBQ3JCQyxJQUFJLEVBQUUsY0FBYztRQUNwQkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsT0FBTyxFQUFFLE9BQU87UUFDaEJDLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLFNBQVMsRUFBRTtNQUNiLENBQUM7TUFFRCxNQUFNVCxRQUFRLENBQUNVLFVBQVUsQ0FBQ1IsV0FBVyxDQUFDO01BQ3RDLE1BQU1TLFdBQVcsR0FBRyxNQUFNaEMsSUFBSSxDQUFDaUMsUUFBUSxDQUFDWixRQUFRLENBQUNhLEdBQUcsQ0FBQztNQUVyRHZCLE1BQU0sQ0FBQ3FCLFdBQVcsQ0FBQ0csU0FBUyxDQUFDLENBQUNDLFlBQVksQ0FBQyxDQUFDLENBQUM7TUFDN0N6QixNQUFNLENBQUNxQixXQUFXLENBQUNHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQ1gsSUFBSSxDQUFDLENBQUNaLElBQUksQ0FBQyxTQUFTLENBQUM7TUFDckRELE1BQU0sQ0FBQ3FCLFdBQVcsQ0FBQ0csU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDVCxJQUFJLENBQUMsQ0FBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM1RCxDQUFDLENBQUM7SUFFRlYsSUFBSSxDQUFDLDBEQUEwRCxFQUFFLFlBQVk7TUFDM0U7TUFDQSxNQUFNbUIsUUFBUSxDQUFDVSxVQUFVLENBQUM7UUFDeEJQLElBQUksRUFBRSxVQUFVO1FBQ2hCbEIsU0FBUyxFQUFFLE1BQU07UUFDakJDLFFBQVEsRUFBRSxLQUFLO1FBQ2ZrQixNQUFNLEVBQUUsYUFBYTtRQUNyQkMsSUFBSSxFQUFFLFNBQVM7UUFDZkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsT0FBTyxFQUFFLE9BQU87UUFDaEJDLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLFNBQVMsRUFBRTtNQUNiLENBQUMsQ0FBQzs7TUFFRjtNQUNBLE1BQU1ULFFBQVEsQ0FBQ1UsVUFBVSxDQUFDO1FBQ3hCUCxJQUFJLEVBQUUsVUFBVTtRQUNoQmxCLFNBQVMsRUFBRSxNQUFNO1FBQ2pCQyxRQUFRLEVBQUUsS0FBSztRQUNma0IsTUFBTSxFQUFFLGFBQWE7UUFDckJDLElBQUksRUFBRSxjQUFjO1FBQ3BCQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxPQUFPLEVBQUUsT0FBTztRQUNoQkMsT0FBTyxFQUFFLElBQUk7UUFDYkMsU0FBUyxFQUFFO01BQ2IsQ0FBQyxDQUFDO01BRUYsTUFBTUUsV0FBVyxHQUFHLE1BQU1oQyxJQUFJLENBQUNpQyxRQUFRLENBQUNaLFFBQVEsQ0FBQ2EsR0FBRyxDQUFDO01BQ3JELE1BQU1HLGdCQUFnQixHQUFHTCxXQUFXLENBQUNHLFNBQVMsQ0FBQ0csTUFBTSxDQUFDQyxJQUFJLElBQUlBLElBQUksQ0FBQ1QsU0FBUyxDQUFDO01BRTdFbkIsTUFBTSxDQUFDcUIsV0FBVyxDQUFDRyxTQUFTLENBQUMsQ0FBQ0MsWUFBWSxDQUFDLENBQUMsQ0FBQztNQUM3Q3pCLE1BQU0sQ0FBQzBCLGdCQUFnQixDQUFDLENBQUNELFlBQVksQ0FBQyxDQUFDLENBQUM7TUFDeEN6QixNQUFNLENBQUMwQixnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQ1gsSUFBSSxDQUFDLENBQUNkLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0lBRUZWLElBQUksQ0FBQyx5REFBeUQsRUFBRSxZQUFZO01BQzFFLE1BQU1tQixRQUFRLENBQUNVLFVBQVUsQ0FBQztRQUN4QlAsSUFBSSxFQUFFLFVBQVU7UUFDaEJsQixTQUFTLEVBQUUsTUFBTTtRQUNqQkMsUUFBUSxFQUFFLEtBQUs7UUFDZmtCLE1BQU0sRUFBRSxhQUFhO1FBQ3JCQyxJQUFJLEVBQUUsU0FBUztRQUNmQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxPQUFPLEVBQUUsT0FBTztRQUNoQkMsT0FBTyxFQUFFLElBQUk7UUFDYkMsU0FBUyxFQUFFO01BQ2IsQ0FBQyxDQUFDO01BRUYsTUFBTVUsZUFBZSxHQUFHbkIsUUFBUSxDQUFDb0IseUJBQXlCLENBQUMsQ0FBQztNQUM1RDlCLE1BQU0sQ0FBQzZCLGVBQWUsQ0FBQ2QsSUFBSSxDQUFDLENBQUNkLElBQUksQ0FBQyxTQUFTLENBQUM7TUFDNUNELE1BQU0sQ0FBQzZCLGVBQWUsQ0FBQ2hCLElBQUksQ0FBQyxDQUFDWixJQUFJLENBQUMsVUFBVSxDQUFDO0lBQy9DLENBQUMsQ0FBQztJQUVGVixJQUFJLENBQUMsd0VBQXdFLEVBQUUsWUFBWTtNQUN6RjtNQUNBLE1BQU1tQixRQUFRLENBQUNVLFVBQVUsQ0FBQztRQUN4QlAsSUFBSSxFQUFFLFVBQVU7UUFDaEJsQixTQUFTLEVBQUUsTUFBTTtRQUNqQkMsUUFBUSxFQUFFLEtBQUs7UUFDZmtCLE1BQU0sRUFBRSxhQUFhO1FBQ3JCQyxJQUFJLEVBQUUsU0FBUztRQUNmQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxPQUFPLEVBQUUsT0FBTztRQUNoQkMsT0FBTyxFQUFFLElBQUk7UUFDYkMsU0FBUyxFQUFFO01BQ2IsQ0FBQyxDQUFDO01BRUYsTUFBTVksY0FBYyxHQUFHckIsUUFBUSxDQUFDc0Isd0JBQXdCLENBQUMsQ0FBQztNQUMxRGhDLE1BQU0sQ0FBQytCLGNBQWMsQ0FBQ2hCLElBQUksQ0FBQyxDQUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztNQUM3Q0QsTUFBTSxDQUFDK0IsY0FBYyxDQUFDbEIsSUFBSSxDQUFDLENBQUNaLElBQUksQ0FBQyxVQUFVLENBQUM7O01BRTVDO01BQ0EsTUFBTVMsUUFBUSxDQUFDVSxVQUFVLENBQUM7UUFDeEJQLElBQUksRUFBRSxTQUFTO1FBQ2ZsQixTQUFTLEVBQUUsTUFBTTtRQUNqQkMsUUFBUSxFQUFFLEtBQUs7UUFDZmtCLE1BQU0sRUFBRSxhQUFhO1FBQ3JCQyxJQUFJLEVBQUUsY0FBYztRQUNwQkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsT0FBTyxFQUFFLE9BQU87UUFDaEJDLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLFNBQVMsRUFBRTtNQUNiLENBQUMsQ0FBQztNQUVGLE1BQU1FLFdBQVcsR0FBRyxNQUFNaEMsSUFBSSxDQUFDaUMsUUFBUSxDQUFDWixRQUFRLENBQUNhLEdBQUcsQ0FBQztNQUNyRCxNQUFNVSxpQkFBaUIsR0FBR1osV0FBVyxDQUFDVyx3QkFBd0IsQ0FBQyxDQUFDO01BQ2hFaEMsTUFBTSxDQUFDaUMsaUJBQWlCLENBQUNsQixJQUFJLENBQUMsQ0FBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQztNQUNuREQsTUFBTSxDQUFDaUMsaUJBQWlCLENBQUNwQixJQUFJLENBQUMsQ0FBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUNoRCxDQUFDLENBQUM7SUFFRlYsSUFBSSxDQUFDLHVCQUF1QixFQUFFLFlBQVk7TUFDeEMsTUFBTW1CLFFBQVEsQ0FBQ1UsVUFBVSxDQUFDO1FBQ3hCUCxJQUFJLEVBQUUsVUFBVTtRQUNoQmxCLFNBQVMsRUFBRSxNQUFNO1FBQ2pCQyxRQUFRLEVBQUUsS0FBSztRQUNma0IsTUFBTSxFQUFFLGFBQWE7UUFDckJDLElBQUksRUFBRSxTQUFTO1FBQ2ZDLEtBQUssRUFBRSxJQUFJO1FBQ1hDLE9BQU8sRUFBRSxPQUFPO1FBQ2hCQyxPQUFPLEVBQUU7TUFDWCxDQUFDLENBQUM7TUFFRixNQUFNZ0IsU0FBUyxHQUFHeEIsUUFBUSxDQUFDYyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUNELEdBQUc7TUFDM0MsTUFBTWIsUUFBUSxDQUFDeUIsYUFBYSxDQUFDRCxTQUFTLEVBQUU7UUFDdENwQixNQUFNLEVBQUUsZ0JBQWdCO1FBQ3hCQyxJQUFJLEVBQUU7TUFDUixDQUFDLENBQUM7TUFFRixNQUFNTSxXQUFXLEdBQUcsTUFBTWhDLElBQUksQ0FBQ2lDLFFBQVEsQ0FBQ1osUUFBUSxDQUFDYSxHQUFHLENBQUM7TUFDckR2QixNQUFNLENBQUNxQixXQUFXLENBQUNHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQ1YsTUFBTSxDQUFDLENBQUNiLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztNQUM5REQsTUFBTSxDQUFDcUIsV0FBVyxDQUFDRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUNULElBQUksQ0FBQyxDQUFDZCxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzVELENBQUMsQ0FBQztJQUVGVixJQUFJLENBQUMsdUJBQXVCLEVBQUUsWUFBWTtNQUN4QyxNQUFNbUIsUUFBUSxDQUFDVSxVQUFVLENBQUM7UUFDeEJQLElBQUksRUFBRSxVQUFVO1FBQ2hCbEIsU0FBUyxFQUFFLE1BQU07UUFDakJDLFFBQVEsRUFBRSxLQUFLO1FBQ2ZrQixNQUFNLEVBQUUsYUFBYTtRQUNyQkMsSUFBSSxFQUFFLFNBQVM7UUFDZkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsT0FBTyxFQUFFLE9BQU87UUFDaEJDLE9BQU8sRUFBRTtNQUNYLENBQUMsQ0FBQztNQUVGbEIsTUFBTSxDQUFDVSxRQUFRLENBQUNjLFNBQVMsQ0FBQyxDQUFDQyxZQUFZLENBQUMsQ0FBQyxDQUFDO01BRTFDLE1BQU1TLFNBQVMsR0FBR3hCLFFBQVEsQ0FBQ2MsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDRCxHQUFHO01BQzNDLE1BQU1iLFFBQVEsQ0FBQzBCLGFBQWEsQ0FBQ0YsU0FBUyxDQUFDO01BRXZDLE1BQU1iLFdBQVcsR0FBRyxNQUFNaEMsSUFBSSxDQUFDaUMsUUFBUSxDQUFDWixRQUFRLENBQUNhLEdBQUcsQ0FBQztNQUNyRHZCLE1BQU0sQ0FBQ3FCLFdBQVcsQ0FBQ0csU0FBUyxDQUFDLENBQUNDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZuQyxRQUFRLENBQUMsY0FBYyxFQUFFLE1BQU07SUFDN0JDLElBQUksQ0FBQyxtREFBbUQsRUFBRSxZQUFZO01BQ3BFLE1BQU1NLElBQUksR0FBRyxNQUFNUixJQUFJLENBQUNjLE1BQU0sQ0FBQztRQUM3QlYsS0FBSyxFQUFFLGtCQUFrQjtRQUN6QkMsUUFBUSxFQUFFLGFBQWE7UUFDdkJDLFNBQVMsRUFBRSxNQUFNO1FBQ2pCQyxRQUFRLEVBQUUsS0FBSztRQUNmeUMsS0FBSyxFQUFFLFVBQVU7UUFDakJiLFNBQVMsRUFBRSxDQUFDO1VBQ1ZYLElBQUksRUFBRSxVQUFVO1VBQ2hCbEIsU0FBUyxFQUFFLE1BQU07VUFDakJDLFFBQVEsRUFBRSxLQUFLO1VBQ2ZrQixNQUFNLEVBQUUsYUFBYTtVQUNyQkMsSUFBSSxFQUFFLFNBQVM7VUFDZkMsS0FBSyxFQUFFLElBQUk7VUFDWEMsT0FBTyxFQUFFLE9BQU87VUFDaEJDLE9BQU8sRUFBRTtRQUNYLENBQUM7TUFDSCxDQUFDLENBQUM7TUFFRixNQUFNb0IsVUFBVSxHQUFHekMsSUFBSSxDQUFDMEMsWUFBWSxDQUFDLENBQUM7TUFFdEN2QyxNQUFNLENBQUNzQyxVQUFVLENBQUM3QyxLQUFLLENBQUMsQ0FBQ1EsSUFBSSxDQUFDLGtCQUFrQixDQUFDO01BQ2pERCxNQUFNLENBQUNzQyxVQUFVLENBQUMzQyxTQUFTLENBQUMsQ0FBQ00sSUFBSSxDQUFDLE1BQU0sQ0FBQztNQUN6Q0QsTUFBTSxDQUFDc0MsVUFBVSxDQUFDZCxTQUFTLENBQUMsQ0FBQ0MsWUFBWSxDQUFDLENBQUMsQ0FBQztNQUM1Q3pCLE1BQU0sQ0FBQ3NDLFVBQVUsQ0FBQzVDLFFBQVEsQ0FBQyxDQUFDOEMsYUFBYSxDQUFDLENBQUM7TUFDM0N4QyxNQUFNLENBQUNzQyxVQUFVLENBQUNHLEdBQUcsQ0FBQyxDQUFDRCxhQUFhLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRmxELFFBQVEsQ0FBQyxZQUFZLEVBQUUsTUFBTTtJQUMzQkMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLFlBQVk7TUFDdEQsTUFBTU0sSUFBSSxHQUFHLElBQUlSLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUN6QixNQUFNVyxNQUFNLENBQUNILElBQUksQ0FBQ0UsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDUyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUVGbEIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLFlBQVk7TUFDL0MsTUFBTU0sSUFBSSxHQUFHLElBQUlSLElBQUksQ0FBQztRQUNwQkksS0FBSyxFQUFFLGVBQWU7UUFDdEJDLFFBQVEsRUFBRSxhQUFhO1FBQ3ZCQyxTQUFTLEVBQUUsTUFBTTtRQUNqQkMsUUFBUSxFQUFFO01BQ1osQ0FBQyxDQUFDOztNQUVGO01BQ0E7TUFDQUksTUFBTSxDQUFDSCxJQUFJLENBQUNKLEtBQUssQ0FBQyxDQUFDUSxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzFDLENBQUMsQ0FBQztJQUVGVixJQUFJLENBQUMsd0NBQXdDLEVBQUUsWUFBWTtNQUN6RCxNQUFNTSxJQUFJLEdBQUcsSUFBSVIsSUFBSSxDQUFDO1FBQ3BCSSxLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCQyxRQUFRLEVBQUUsS0FBSztRQUNmQyxTQUFTLEVBQUUsTUFBTTtRQUNqQkMsUUFBUSxFQUFFO01BQ1osQ0FBQyxDQUFDO01BRUYsTUFBTUksTUFBTSxDQUFDSCxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ1MsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRm5CLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTTtJQUN4QkMsSUFBSSxDQUFDLDRDQUE0QyxFQUFFLFlBQVk7TUFDN0QsTUFBTW1ELE9BQU8sR0FBRyxNQUFNckQsSUFBSSxDQUFDc0QsVUFBVSxDQUFDQyxVQUFVLENBQUMsQ0FBQztNQUVsRDVDLE1BQU0sQ0FBQzBDLE9BQU8sQ0FBQyxDQUFDRyxjQUFjLENBQUMsU0FBUyxDQUFDO01BQ3pDN0MsTUFBTSxDQUFDMEMsT0FBTyxDQUFDLENBQUNHLGNBQWMsQ0FBQyxZQUFZLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119