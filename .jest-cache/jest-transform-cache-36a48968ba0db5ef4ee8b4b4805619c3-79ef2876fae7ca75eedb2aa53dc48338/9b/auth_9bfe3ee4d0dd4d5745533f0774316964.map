{"version":3,"names":["express","require","router","Router","jwt","body","validationResult","User","requireAuth","authService","cartService","generateToken","userId","sign","process","env","JWT_SECRET","expiresIn","validateRegistration","isEmail","normalizeEmail","withMessage","isLength","min","trim","max","optional","isMobilePhone","validateLogin","notEmpty","post","req","res","errors","isEmpty","status","json","success","error","code","message","details","array","email","password","firstName","lastName","phone","preferences","existingUser","findOne","userData","user","create","token","_id","lastLogin","Date","save","wantsEmail","sendWelcomeEmail","welcomeData","emailResult","console","emailError","toPublicJSON","guestCartItems","isActive","select","isPasswordValid","comparePassword","cartInfo","itemCount","mergedItems","Array","isArray","length","mergeResult","mergeCartsWithConflictResolution","sessionID","preservedCart","conflicts","duration","mergeError","emit","timestamp","ip","userAgent","get","cart","put","addresses","updateData","address","operation","type","addressResult","manageAddressOptimistically","auditContext","sessionId","result","updateProfileOptimistically","includes","notifyUserOfSensitiveChange","synchronizeUserData","updatedUser","findById","performance","NODE_ENV","undefined","street","city","state","zipCode","country","isDefault","addressData","Boolean","addAddress","addressId","params","updateAddress","delete","removeAddress","defaultShippingAddress","getDefaultShippingAddress","defaultBillingAddress","getDefaultBillingAddress","allAddresses","hasAddresses","hasDefaultShipping","hasDefaultBilling","toLowerCase","crypto","sendPasswordResetEmail","resetToken","randomBytes","toString","resetTokenExpiry","now","passwordResetToken","passwordResetExpiry","resetUrl","FRONTEND_URL","newPassword","$gt","emailPreferences","validPreferences","invalidKeys","Object","keys","filter","key","join","updateEmailPreferences","currentPassword","isCurrentPasswordValid","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst jwt = require('jsonwebtoken');\nconst { body, validationResult } = require('express-validator');\nconst User = require('../models/User');\nconst { requireAuth } = require('../middleware/auth');\nconst authService = require('../services/authService');\nconst cartService = require('../services/cartService');\n\n// Generate JWT token\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '7d' });\n};\n\n// Validation middleware for registration\nconst validateRegistration = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long'),\n  body('firstName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('First name is required and must be less than 50 characters'),\n  body('lastName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('Last name is required and must be less than 50 characters'),\n  body('phone')\n    .optional()\n    .isMobilePhone()\n    .withMessage('Valid phone number is required')\n];\n\n// Validation middleware for login\nconst validateLogin = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\n// Register new user\nrouter.post('/register', validateRegistration, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, firstName, lastName, phone, preferences } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(409).json({\n        success: false,\n        error: {\n          code: 'USER_EXISTS',\n          message: 'User with this email already exists'\n        }\n      });\n    }\n\n    // Create new user\n    const userData = {\n      email,\n      password,\n      firstName,\n      lastName,\n      phone,\n      preferences: preferences || {}\n    };\n\n    const user = await User.create(userData);\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Send welcome email\n    try {\n      if (user.wantsEmail('welcomeEmails')) {\n        const { sendWelcomeEmail } = require('../utils/emailService');\n        \n        const welcomeData = {\n          firstName: user.firstName,\n          email: user.email\n        };\n\n        const emailResult = await sendWelcomeEmail(user.email, welcomeData);\n        if (!emailResult.success) {\n          console.error('Failed to send welcome email:', emailResult.error);\n        }\n      }\n    } catch (emailError) {\n      console.error('Error sending welcome email:', emailError);\n    }\n\n    res.status(201).json({\n      success: true,\n      message: 'User registered successfully',\n      token,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'REGISTRATION_ERROR',\n        message: 'Failed to register user'\n      }\n    });\n  }\n});\n\n// Login user with enhanced cart merging\nrouter.post('/login', validateLogin, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, guestCartItems } = req.body;\n\n    // Find user and include password for comparison\n    const user = await User.findOne({ email, isActive: true }).select('+password');\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check password\n    const isPasswordValid = await user.comparePassword(password);\n    if (!isPasswordValid) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Generate token and update last login\n    const token = generateToken(user._id);\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Enhanced cart preservation and merging\n    let cartInfo = { itemCount: 0, mergedItems: 0 };\n    \n    // Merge guest cart if provided\n    if (guestCartItems && Array.isArray(guestCartItems) && guestCartItems.length > 0) {\n      try {\n        const mergeResult = await cartService.mergeCartsWithConflictResolution(\n          user._id,\n          guestCartItems,\n          req.sessionID\n        );\n        \n        cartInfo = {\n          preservedCart: true,\n          mergedItems: mergeResult.mergedItems,\n          conflicts: mergeResult.conflicts,\n          duration: mergeResult.duration\n        };\n      } catch (mergeError) {\n        console.error('Cart merge error during login:', mergeError);\n        cartInfo.mergeError = 'Failed to merge guest cart';\n      }\n    }\n\n    // Emit user login event\n    authService.emit('userLogin', {\n      userId: user._id,\n      email: user.email,\n      timestamp: new Date(),\n      ip: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n\n    res.json({\n      success: true,\n      message: 'Login successful',\n      token,\n      user: user.toPublicJSON(),\n      cart: cartInfo\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGIN_ERROR',\n        message: 'Failed to login'\n      }\n    });\n  }\n});\n\n// Get user profile\nrouter.get('/profile', requireAuth, async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      user: req.user.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_ERROR',\n        message: 'Failed to fetch profile'\n      }\n    });\n  }\n});\n\n// Update user profile with optimistic updates and performance monitoring\nrouter.put('/profile', requireAuth, [\n  body('email')\n    .optional()\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('firstName')\n    .optional()\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('First name must be less than 50 characters'),\n  body('lastName')\n    .optional()\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('Last name must be less than 50 characters')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, firstName, lastName, phone, preferences, addresses } = req.body;\n    \n    const updateData = {};\n    if (email && email !== req.user.email) updateData.email = email;\n    if (firstName && firstName.trim() !== req.user.firstName) updateData.firstName = firstName.trim();\n    if (lastName && lastName.trim() !== req.user.lastName) updateData.lastName = lastName.trim();\n    if (phone && phone.trim() !== req.user.phone) updateData.phone = phone.trim();\n    if (preferences) updateData.preferences = { ...req.user.preferences, ...preferences };\n    \n    // Handle addresses update separately for better performance\n    if (addresses && Array.isArray(addresses) && addresses.length > 0) {\n      // If the address has an ID, update it; otherwise add a new one\n      const address = addresses[0];\n      const operation = address._id ? 'update' : 'add';\n      \n      // Add type if not specified\n      if (!address.type) {\n        address.type = 'shipping';\n      }\n      \n      // Use firstName and lastName from update if not in address\n      if (!address.firstName && firstName) {\n        address.firstName = firstName.trim();\n      }\n      if (!address.lastName && lastName) {\n        address.lastName = lastName.trim();\n      }\n      \n      const addressResult = await authService.manageAddressOptimistically(\n        req.user._id,\n        operation,\n        address,\n        address._id\n      );\n      \n      if (!addressResult.success) {\n        return res.status(400).json({\n          success: false,\n          error: {\n            code: 'ADDRESS_UPDATE_ERROR',\n            message: addressResult.error\n          }\n        });\n      }\n    }\n\n    // Use optimistic profile service\n    const auditContext = {\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    };\n\n    const result = await authService.updateProfileOptimistically(\n      req.user._id,\n      updateData,\n      auditContext\n    );\n\n    if (!result.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: result.error.includes('Rate limit') ? 'RATE_LIMIT_ERROR' : 'PROFILE_UPDATE_ERROR',\n          message: result.error\n        }\n      });\n    }\n\n    // Send email notification for sensitive changes\n    if (updateData.email || updateData.phone) {\n      await authService.notifyUserOfSensitiveChange(\n        req.user._id,\n        updateData.email ? 'email' : 'phone',\n        auditContext\n      );\n    }\n\n    // Synchronize user data across sessions\n    await authService.synchronizeUserData(req.user._id, 'profile_update');\n\n    // Fetch the updated user with all methods\n    const updatedUser = await User.findById(req.user._id).select('-password');\n    \n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      user: updatedUser.toPublicJSON(),\n      performance: {\n        duration: result.duration,\n        status: result.performance\n      }\n    });\n\n  } catch (error) {\n    console.error('Profile update error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_UPDATE_ERROR',\n        message: 'Failed to update profile',\n        details: process.env.NODE_ENV === 'development' ? error.message : undefined\n      }\n    });\n  }\n});\n\n// Add address\nrouter.post('/addresses', requireAuth, async (req, res) => {\n  try {\n    const { type, firstName, lastName, street, city, state, zipCode, country, phone, isDefault } = req.body;\n\n    if (!['shipping', 'billing'].includes(type)) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_ADDRESS_TYPE',\n          message: 'Address type must be shipping or billing'\n        }\n      });\n    }\n\n    const addressData = {\n      type,\n      firstName: firstName.trim(),\n      lastName: lastName.trim(),\n      street: street.trim(),\n      city: city.trim(),\n      state: state.trim(),\n      zipCode: zipCode.trim(),\n      country: country.trim(),\n      phone: phone ? phone.trim() : undefined,\n      isDefault: Boolean(isDefault)\n    };\n\n    await req.user.addAddress(addressData);\n\n    res.status(201).json({\n      success: true,\n      message: 'Address added successfully',\n      user: req.user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Add address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_ADD_ERROR',\n        message: 'Failed to add address'\n      }\n    });\n  }\n});\n\n// Update address\nrouter.put('/addresses/:addressId', requireAuth, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n    const updateData = req.body;\n\n    const result = await req.user.updateAddress(addressId, updateData);\n    if (!result) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_NOT_FOUND',\n          message: 'Address not found'\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Address updated successfully',\n      user: req.user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Update address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_UPDATE_ERROR',\n        message: 'Failed to update address'\n      }\n    });\n  }\n});\n\n// Delete address\nrouter.delete('/addresses/:addressId', requireAuth, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n\n    await req.user.removeAddress(addressId);\n\n    res.json({\n      success: true,\n      message: 'Address removed successfully',\n      user: req.user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Remove address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_REMOVE_ERROR',\n        message: 'Failed to remove address'\n      }\n    });\n  }\n});\n\n// Get checkout preferences (addresses and settings)\nrouter.get('/checkout-preferences', requireAuth, async (req, res) => {\n  try {\n    const user = req.user;\n    \n    const preferences = {\n      defaultShippingAddress: user.getDefaultShippingAddress(),\n      defaultBillingAddress: user.getDefaultBillingAddress(),\n      allAddresses: user.addresses,\n      preferences: user.preferences,\n      hasAddresses: user.addresses.length > 0,\n      hasDefaultShipping: Boolean(user.getDefaultShippingAddress()),\n      hasDefaultBilling: Boolean(user.getDefaultBillingAddress())\n    };\n\n    res.json({\n      success: true,\n      preferences\n    });\n\n  } catch (error) {\n    console.error('Checkout preferences error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'CHECKOUT_PREFERENCES_ERROR',\n        message: 'Failed to fetch checkout preferences'\n      }\n    });\n  }\n});\n\n// Logout (client-side token removal, but we can track it)\nrouter.post('/logout', requireAuth, async (req, res) => {\n  try {\n    // In a more sophisticated setup, you might want to blacklist the token\n    // For now, we just acknowledge the logout\n    res.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGOUT_ERROR',\n        message: 'Failed to logout'\n      }\n    });\n  }\n});\n\n// Password reset request\nrouter.post('/forgot-password', async (req, res) => {\n  try {\n    const { email } = req.body;\n\n    if (!email) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'EMAIL_REQUIRED',\n          message: 'Email is required'\n        }\n      });\n    }\n\n    const user = await User.findOne({ email: email.toLowerCase(), isActive: true });\n    \n    // Always return success to prevent email enumeration\n    res.json({\n      success: true,\n      message: 'If an account with that email exists, a password reset link has been sent'\n    });\n\n    // Send password reset email if user exists\n    if (user && user.wantsEmail('welcomeEmails')) {\n      const crypto = require('crypto');\n      const { sendPasswordResetEmail } = require('../utils/emailService');\n      \n      // Generate reset token\n      const resetToken = crypto.randomBytes(32).toString('hex');\n      const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour from now\n      \n      // Save reset token to user (we need to add these fields to User model)\n      user.passwordResetToken = resetToken;\n      user.passwordResetExpiry = resetTokenExpiry;\n      await user.save();\n      \n      // Create reset URL\n      const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${resetToken}`;\n      \n      // Send email\n      const emailResult = await sendPasswordResetEmail(user.email, {\n        firstName: user.firstName,\n        resetToken,\n        resetUrl\n      });\n      \n      if (!emailResult.success) {\n        console.error('Failed to send password reset email:', emailResult.error);\n      }\n    }\n\n  } catch (error) {\n    console.error('Password reset error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_RESET_ERROR',\n        message: 'Failed to process password reset request'\n      }\n    });\n  }\n});\n\n// Reset password with token\nrouter.post('/reset-password', async (req, res) => {\n  try {\n    const { token, newPassword } = req.body;\n\n    if (!token || !newPassword) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MISSING_FIELDS',\n          message: 'Token and new password are required'\n        }\n      });\n    }\n\n    if (newPassword.length < 6) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_PASSWORD',\n          message: 'Password must be at least 6 characters long'\n        }\n      });\n    }\n\n    // Find user with valid reset token\n    const user = await User.findOne({\n      passwordResetToken: token,\n      passwordResetExpiry: { $gt: new Date() },\n      isActive: true\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Invalid or expired reset token'\n        }\n      });\n    }\n\n    // Update password and clear reset token\n    user.password = newPassword;\n    user.passwordResetToken = undefined;\n    user.passwordResetExpiry = undefined;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password reset successfully'\n    });\n\n  } catch (error) {\n    console.error('Password reset completion error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_RESET_COMPLETION_ERROR',\n        message: 'Failed to reset password'\n      }\n    });\n  }\n});\n\n// Get email preferences\nrouter.get('/email-preferences', requireAuth, async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      preferences: req.user.preferences.emailPreferences\n    });\n  } catch (error) {\n    console.error('Email preferences fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'EMAIL_PREFERENCES_ERROR',\n        message: 'Failed to fetch email preferences'\n      }\n    });\n  }\n});\n\n// Update email preferences\nrouter.put('/email-preferences', requireAuth, async (req, res) => {\n  try {\n    const { emailPreferences } = req.body;\n    \n    if (!emailPreferences || typeof emailPreferences !== 'object') {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_PREFERENCES',\n          message: 'Valid email preferences object is required'\n        }\n      });\n    }\n\n    // Validate preference keys\n    const validPreferences = [\n      'orderConfirmations',\n      'paymentReceipts', \n      'orderUpdates',\n      'promotionalEmails',\n      'welcomeEmails'\n    ];\n\n    const invalidKeys = Object.keys(emailPreferences).filter(\n      key => !validPreferences.includes(key)\n    );\n\n    if (invalidKeys.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_PREFERENCE_KEYS',\n          message: `Invalid preference keys: ${invalidKeys.join(', ')}`\n        }\n      });\n    }\n\n    await req.user.updateEmailPreferences(emailPreferences);\n\n    res.json({\n      success: true,\n      message: 'Email preferences updated successfully',\n      preferences: req.user.preferences.emailPreferences\n    });\n\n  } catch (error) {\n    console.error('Email preferences update error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'EMAIL_PREFERENCES_UPDATE_ERROR',\n        message: 'Failed to update email preferences'\n      }\n    });\n  }\n});\n\n// Change password\nrouter.post('/change-password', requireAuth, [\n  body('currentPassword')\n    .notEmpty()\n    .withMessage('Current password is required'),\n  body('newPassword')\n    .isLength({ min: 6 })\n    .withMessage('New password must be at least 6 characters long')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { currentPassword, newPassword } = req.body;\n\n    // Get user with password for comparison\n    const user = await User.findById(req.user._id).select('+password');\n    \n    // Verify current password\n    const isCurrentPasswordValid = await user.comparePassword(currentPassword);\n    if (!isCurrentPasswordValid) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_CURRENT_PASSWORD',\n          message: 'Current password is incorrect'\n        }\n      });\n    }\n\n    // Update password\n    user.password = newPassword;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password updated successfully'\n    });\n\n  } catch (error) {\n    console.error('Change password error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_CHANGE_ERROR',\n        message: 'Failed to change password'\n      }\n    });\n  }\n});\n\n// Test route to trigger hook\nrouter.get('/test', (req, res) => {\n  res.json({ message: 'Auth test endpoint' });\n});\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}