{"version":3,"names":["express","require","router","Router","jwt","body","validationResult","User","requireAuth","generateToken","userId","sign","process","env","JWT_SECRET","expiresIn","validateRegistration","isEmail","normalizeEmail","withMessage","isLength","min","trim","max","optional","isMobilePhone","validateLogin","notEmpty","post","req","res","errors","isEmpty","status","json","success","error","code","message","details","array","email","password","firstName","lastName","phone","preferences","existingUser","findOne","userData","user","create","token","_id","lastLogin","Date","save","wantsEmail","sendWelcomeEmail","welcomeData","emailResult","console","emailError","toPublicJSON","isActive","select","isPasswordValid","comparePassword","get","put","addresses","updateData","Array","isArray","length","address","findById","existingAddress","find","addr","type","street","undefined","city","state","zipCode","country","push","isDefault","updatedUser","findByIdAndUpdate","new","runValidators","includes","addressData","Boolean","addAddress","addressId","params","result","updateAddress","delete","removeAddress","defaultShippingAddress","getDefaultShippingAddress","defaultBillingAddress","getDefaultBillingAddress","allAddresses","hasAddresses","hasDefaultShipping","hasDefaultBilling","toLowerCase","crypto","sendPasswordResetEmail","resetToken","randomBytes","toString","resetTokenExpiry","now","passwordResetToken","passwordResetExpiry","resetUrl","FRONTEND_URL","newPassword","$gt","emailPreferences","validPreferences","invalidKeys","Object","keys","filter","key","join","updateEmailPreferences","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst jwt = require('jsonwebtoken');\nconst { body, validationResult } = require('express-validator');\nconst User = require('../models/User');\nconst { requireAuth } = require('../middleware/auth');\n\n// Generate JWT token\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '7d' });\n};\n\n// Validation middleware for registration\nconst validateRegistration = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long'),\n  body('firstName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('First name is required and must be less than 50 characters'),\n  body('lastName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('Last name is required and must be less than 50 characters'),\n  body('phone')\n    .optional()\n    .isMobilePhone()\n    .withMessage('Valid phone number is required')\n];\n\n// Validation middleware for login\nconst validateLogin = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\n// Register new user\nrouter.post('/register', validateRegistration, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, firstName, lastName, phone, preferences } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(409).json({\n        success: false,\n        error: {\n          code: 'USER_EXISTS',\n          message: 'User with this email already exists'\n        }\n      });\n    }\n\n    // Create new user\n    const userData = {\n      email,\n      password,\n      firstName,\n      lastName,\n      phone,\n      preferences: preferences || {}\n    };\n\n    const user = await User.create(userData);\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Send welcome email\n    try {\n      if (user.wantsEmail('welcomeEmails')) {\n        const { sendWelcomeEmail } = require('../utils/emailService');\n        \n        const welcomeData = {\n          firstName: user.firstName,\n          email: user.email\n        };\n\n        const emailResult = await sendWelcomeEmail(user.email, welcomeData);\n        if (!emailResult.success) {\n          console.error('Failed to send welcome email:', emailResult.error);\n        }\n      }\n    } catch (emailError) {\n      console.error('Error sending welcome email:', emailError);\n    }\n\n    res.status(201).json({\n      success: true,\n      message: 'User registered successfully',\n      token,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'REGISTRATION_ERROR',\n        message: 'Failed to register user'\n      }\n    });\n  }\n});\n\n// Login user\nrouter.post('/login', validateLogin, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password } = req.body;\n\n    // Find user and include password for comparison\n    const user = await User.findOne({ email, isActive: true }).select('+password');\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check password\n    const isPasswordValid = await user.comparePassword(password);\n    if (!isPasswordValid) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Generate token and update last login\n    const token = generateToken(user._id);\n    user.lastLogin = new Date();\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Login successful',\n      token,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGIN_ERROR',\n        message: 'Failed to login'\n      }\n    });\n  }\n});\n\n// Get user profile\nrouter.get('/profile', requireAuth, async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      user: req.user.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_ERROR',\n        message: 'Failed to fetch profile'\n      }\n    });\n  }\n});\n\n// Update user profile\nrouter.put('/profile', requireAuth, async (req, res) => {\n  try {\n    const { firstName, lastName, phone, preferences, addresses } = req.body;\n    \n    const updateData = {};\n    if (firstName) updateData.firstName = firstName.trim();\n    if (lastName) updateData.lastName = lastName.trim();\n    if (phone) updateData.phone = phone.trim();\n    if (preferences) updateData.preferences = { ...req.user.preferences, ...preferences };\n    \n    // Handle addresses update\n    if (addresses && Array.isArray(addresses) && addresses.length > 0) {\n      const address = addresses[0]; // Take the first address from the profile form\n      \n      // Find existing address or create new one\n      const user = await User.findById(req.user._id);\n      let existingAddress = user.addresses.find(addr => addr.type === 'shipping');\n      \n      if (existingAddress) {\n        // Update existing address - only update if values are provided\n        if (address.street !== undefined) existingAddress.street = address.street;\n        if (address.city !== undefined) existingAddress.city = address.city;\n        if (address.state !== undefined) existingAddress.state = address.state;\n        if (address.zipCode !== undefined) existingAddress.zipCode = address.zipCode;\n        if (address.country !== undefined) existingAddress.country = address.country;\n      } else if (address.street && address.city && address.state && address.zipCode) {\n        // Add new address only if all required fields are provided\n        user.addresses.push({\n          type: 'shipping',\n          firstName: firstName || user.firstName,\n          lastName: lastName || user.lastName,\n          street: address.street,\n          city: address.city,\n          state: address.state,\n          zipCode: address.zipCode,\n          country: address.country || 'US',\n          isDefault: true\n        });\n      }\n      \n      await user.save();\n      updateData.addresses = user.addresses;\n    }\n\n    const updatedUser = await User.findByIdAndUpdate(\n      req.user._id,\n      updateData,\n      { new: true, runValidators: true }\n    );\n\n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      user: updatedUser.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Profile update error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_UPDATE_ERROR',\n        message: 'Failed to update profile'\n      }\n    });\n  }\n});\n\n// Add address\nrouter.post('/addresses', requireAuth, async (req, res) => {\n  try {\n    const { type, firstName, lastName, street, city, state, zipCode, country, phone, isDefault } = req.body;\n\n    if (!['shipping', 'billing'].includes(type)) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_ADDRESS_TYPE',\n          message: 'Address type must be shipping or billing'\n        }\n      });\n    }\n\n    const addressData = {\n      type,\n      firstName: firstName.trim(),\n      lastName: lastName.trim(),\n      street: street.trim(),\n      city: city.trim(),\n      state: state.trim(),\n      zipCode: zipCode.trim(),\n      country: country.trim(),\n      phone: phone ? phone.trim() : undefined,\n      isDefault: Boolean(isDefault)\n    };\n\n    await req.user.addAddress(addressData);\n\n    res.status(201).json({\n      success: true,\n      message: 'Address added successfully',\n      user: req.user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Add address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_ADD_ERROR',\n        message: 'Failed to add address'\n      }\n    });\n  }\n});\n\n// Update address\nrouter.put('/addresses/:addressId', requireAuth, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n    const updateData = req.body;\n\n    const result = await req.user.updateAddress(addressId, updateData);\n    if (!result) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_NOT_FOUND',\n          message: 'Address not found'\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Address updated successfully',\n      user: req.user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Update address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_UPDATE_ERROR',\n        message: 'Failed to update address'\n      }\n    });\n  }\n});\n\n// Delete address\nrouter.delete('/addresses/:addressId', requireAuth, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n\n    await req.user.removeAddress(addressId);\n\n    res.json({\n      success: true,\n      message: 'Address removed successfully',\n      user: req.user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Remove address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_REMOVE_ERROR',\n        message: 'Failed to remove address'\n      }\n    });\n  }\n});\n\n// Get checkout preferences (addresses and settings)\nrouter.get('/checkout-preferences', requireAuth, async (req, res) => {\n  try {\n    const user = req.user;\n    \n    const preferences = {\n      defaultShippingAddress: user.getDefaultShippingAddress(),\n      defaultBillingAddress: user.getDefaultBillingAddress(),\n      allAddresses: user.addresses,\n      preferences: user.preferences,\n      hasAddresses: user.addresses.length > 0,\n      hasDefaultShipping: Boolean(user.getDefaultShippingAddress()),\n      hasDefaultBilling: Boolean(user.getDefaultBillingAddress())\n    };\n\n    res.json({\n      success: true,\n      preferences\n    });\n\n  } catch (error) {\n    console.error('Checkout preferences error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'CHECKOUT_PREFERENCES_ERROR',\n        message: 'Failed to fetch checkout preferences'\n      }\n    });\n  }\n});\n\n// Logout (client-side token removal, but we can track it)\nrouter.post('/logout', requireAuth, async (req, res) => {\n  try {\n    // In a more sophisticated setup, you might want to blacklist the token\n    // For now, we just acknowledge the logout\n    res.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGOUT_ERROR',\n        message: 'Failed to logout'\n      }\n    });\n  }\n});\n\n// Password reset request\nrouter.post('/forgot-password', async (req, res) => {\n  try {\n    const { email } = req.body;\n\n    if (!email) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'EMAIL_REQUIRED',\n          message: 'Email is required'\n        }\n      });\n    }\n\n    const user = await User.findOne({ email: email.toLowerCase(), isActive: true });\n    \n    // Always return success to prevent email enumeration\n    res.json({\n      success: true,\n      message: 'If an account with that email exists, a password reset link has been sent'\n    });\n\n    // Send password reset email if user exists\n    if (user && user.wantsEmail('welcomeEmails')) {\n      const crypto = require('crypto');\n      const { sendPasswordResetEmail } = require('../utils/emailService');\n      \n      // Generate reset token\n      const resetToken = crypto.randomBytes(32).toString('hex');\n      const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour from now\n      \n      // Save reset token to user (we need to add these fields to User model)\n      user.passwordResetToken = resetToken;\n      user.passwordResetExpiry = resetTokenExpiry;\n      await user.save();\n      \n      // Create reset URL\n      const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${resetToken}`;\n      \n      // Send email\n      const emailResult = await sendPasswordResetEmail(user.email, {\n        firstName: user.firstName,\n        resetToken,\n        resetUrl\n      });\n      \n      if (!emailResult.success) {\n        console.error('Failed to send password reset email:', emailResult.error);\n      }\n    }\n\n  } catch (error) {\n    console.error('Password reset error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_RESET_ERROR',\n        message: 'Failed to process password reset request'\n      }\n    });\n  }\n});\n\n// Reset password with token\nrouter.post('/reset-password', async (req, res) => {\n  try {\n    const { token, newPassword } = req.body;\n\n    if (!token || !newPassword) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MISSING_FIELDS',\n          message: 'Token and new password are required'\n        }\n      });\n    }\n\n    if (newPassword.length < 6) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_PASSWORD',\n          message: 'Password must be at least 6 characters long'\n        }\n      });\n    }\n\n    // Find user with valid reset token\n    const user = await User.findOne({\n      passwordResetToken: token,\n      passwordResetExpiry: { $gt: new Date() },\n      isActive: true\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Invalid or expired reset token'\n        }\n      });\n    }\n\n    // Update password and clear reset token\n    user.password = newPassword;\n    user.passwordResetToken = undefined;\n    user.passwordResetExpiry = undefined;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password reset successfully'\n    });\n\n  } catch (error) {\n    console.error('Password reset completion error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_RESET_COMPLETION_ERROR',\n        message: 'Failed to reset password'\n      }\n    });\n  }\n});\n\n// Get email preferences\nrouter.get('/email-preferences', requireAuth, async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      preferences: req.user.preferences.emailPreferences\n    });\n  } catch (error) {\n    console.error('Email preferences fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'EMAIL_PREFERENCES_ERROR',\n        message: 'Failed to fetch email preferences'\n      }\n    });\n  }\n});\n\n// Update email preferences\nrouter.put('/email-preferences', requireAuth, async (req, res) => {\n  try {\n    const { emailPreferences } = req.body;\n    \n    if (!emailPreferences || typeof emailPreferences !== 'object') {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_PREFERENCES',\n          message: 'Valid email preferences object is required'\n        }\n      });\n    }\n\n    // Validate preference keys\n    const validPreferences = [\n      'orderConfirmations',\n      'paymentReceipts', \n      'orderUpdates',\n      'promotionalEmails',\n      'welcomeEmails'\n    ];\n\n    const invalidKeys = Object.keys(emailPreferences).filter(\n      key => !validPreferences.includes(key)\n    );\n\n    if (invalidKeys.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_PREFERENCE_KEYS',\n          message: `Invalid preference keys: ${invalidKeys.join(', ')}`\n        }\n      });\n    }\n\n    await req.user.updateEmailPreferences(emailPreferences);\n\n    res.json({\n      success: true,\n      message: 'Email preferences updated successfully',\n      preferences: req.user.preferences.emailPreferences\n    });\n\n  } catch (error) {\n    console.error('Email preferences update error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'EMAIL_PREFERENCES_UPDATE_ERROR',\n        message: 'Failed to update email preferences'\n      }\n    });\n  }\n});\n\n// Test route to trigger hook\nrouter.get('/test', (req, res) => {\n  res.json({ message: 'Auth test endpoint' });\n});\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}