{"version":3,"names":["request","require","express","AppError","globalErrorHandler","ErrorCodes","describe","app","beforeEach","use","json","get","req","res","next","status","success","error","code","message","send","PRODUCT_NOT_FOUND","test","response","expect","body","toEqual","text","toBe","headers","toContain","routeFiles","file","codes","forEach","toBeDefined","mockI18n","defaultMessage","translations","formatError","spanishError"],"sources":["errorStandardization.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst { AppError, globalErrorHandler } = require('../middleware/errorHandler');\nconst { ErrorCodes } = require('../utils/errorHandler');\n\ndescribe('Error Standardization Integration', () => {\n  let app;\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    \n    // Test routes that demonstrate current error patterns\n    app.get('/auth-error', (req, res, next) => {\n      // Current auth.js pattern\n      res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    });\n\n    app.get('/product-error', (req, res, next) => {\n      // Current products.js pattern\n      res.status(404).json({\n        success: false,\n        error: {\n          code: 'PRODUCT_NOT_FOUND',\n          message: 'Product not found'\n        }\n      });\n    });\n\n    app.get('/cart-error', (req, res, next) => {\n      // Current cart.js pattern\n      res.status(500).json({ success: false, error: error.message });\n    });\n\n    app.get('/payment-webhook-error', (req, res, next) => {\n      // Current payments.js webhook pattern\n      res.status(400).send('Payment ID is required');\n    });\n\n    // Routes using AppError (standardized)\n    app.get('/standardized-error', (req, res, next) => {\n      next(new AppError('Product not found', 404, ErrorCodes.PRODUCT_NOT_FOUND));\n    });\n\n    app.use(globalErrorHandler);\n  });\n\n  test('auth route should return standardized error format', async () => {\n    const response = await request(app)\n      .get('/auth-error')\n      .expect(401);\n\n    expect(response.body).toEqual({\n      success: false,\n      error: {\n        code: 'INVALID_CREDENTIALS',\n        message: 'Invalid email or password'\n      }\n    });\n  });\n\n  test('product route should return standardized error format', async () => {\n    const response = await request(app)\n      .get('/product-error')\n      .expect(404);\n\n    expect(response.body).toEqual({\n      success: false,\n      error: {\n        code: 'PRODUCT_NOT_FOUND',\n        message: 'Product not found'\n      }\n    });\n  });\n\n  test('standardized error using AppError should match format', async () => {\n    const response = await request(app)\n      .get('/standardized-error')\n      .expect(404);\n\n    expect(response.body).toEqual({\n      success: false,\n      error: {\n        code: 'PRODUCT_NOT_FOUND',\n        message: 'Product not found'\n      }\n    });\n  });\n\n  test('webhook error should return plain text', async () => {\n    const response = await request(app)\n      .get('/payment-webhook-error')\n      .expect(400);\n\n    expect(response.text).toBe('Payment ID is required');\n    expect(response.headers['content-type']).toContain('text/html');\n  });\n});\n\n// Test to verify all error codes are used consistently\ndescribe('Error Code Usage', () => {\n  const routeFiles = [\n    { file: 'auth.js', codes: ['INVALID_CREDENTIALS', 'USER_EXISTS', 'VALIDATION_ERROR'] },\n    { file: 'products.js', codes: ['PRODUCT_NOT_FOUND', 'PRODUCTS_FETCH_ERROR'] },\n    { file: 'cart.js', codes: ['CART_ADD_ERROR', 'MAX_QUANTITY_EXCEEDED', 'ITEM_NOT_FOUND'] },\n    { file: 'orders.js', codes: ['ORDER_NOT_FOUND', 'ORDER_CREATE_ERROR'] },\n    { file: 'payments.js', codes: ['PAYMENT_FAILED', 'PAYMENT_REQUIRED'] }\n  ];\n\n  test('all route error codes should be defined in ErrorCodes', () => {\n    routeFiles.forEach(({ file, codes }) => {\n      codes.forEach(code => {\n        expect(ErrorCodes[code]).toBeDefined();\n        expect(ErrorCodes[code]).toBe(code);\n      });\n    });\n  });\n});\n\n// Test i18n support for errors\ndescribe('Error i18n Support', () => {\n  test('error messages should support translation', () => {\n    const mockI18n = (code, defaultMessage) => {\n      const translations = {\n        'PRODUCT_NOT_FOUND': 'Producto no encontrado',\n        'INVALID_CREDENTIALS': 'Correo o contraseña inválidos'\n      };\n      return translations[code] || defaultMessage || code;\n    };\n\n    const { formatError } = require('../utils/errorHandler');\n    \n    const spanishError = formatError('PRODUCT_NOT_FOUND', 'Product not found', null, null, mockI18n);\n    expect(spanishError.error.message).toBe('Producto no encontrado');\n  });\n\n  test('should fallback to default message when translation not found', () => {\n    const mockI18n = (code, defaultMessage) => defaultMessage || code; // No translations available\n    \n    const { formatError } = require('../utils/errorHandler');\n    \n    const error = formatError('CUSTOM_ERROR', 'Custom error message', null, null, mockI18n);\n    expect(error.error.message).toBe('Custom error message');\n  });\n});"],"mappings":"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","ignoreList":[]}