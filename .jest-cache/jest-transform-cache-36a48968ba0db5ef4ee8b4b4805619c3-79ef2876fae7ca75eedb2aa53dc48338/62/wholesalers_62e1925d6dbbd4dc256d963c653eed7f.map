{"version":3,"names":["cov_2ne65jkt7n","actualCoverage","express","s","require","router","Router","processPendingNotifications","processOrderNotifications","Order","get","req","res","f","json","success","message","timestamp","Date","toISOString","endpoints","post","result","b","data","processed","successCount","errorCount","results","status","error","orderId","params","orderNumber","pendingOrders","find","$or","select","summary","map","order","_id","orderDate","createdAt","paymentStatus","payment","pendingWholesalers","items","filter","item","wholesaler","notified","email","wholesalerName","name","wholesalerEmail","productCode","count","length","orders","findById","wholesalerStatus","notifiedAt","wholesalers","module","exports"],"sources":["wholesalers.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { processPendingNotifications, processOrderNotifications } = require('../utils/wholesalerNotificationService');\nconst Order = require('../models/Order');\n\n// GET /api/wholesalers/test\n// Test endpoint to verify the system is working\nrouter.get('/test', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Wholesaler notification system is active',\n    timestamp: new Date().toISOString(),\n    endpoints: [\n      'POST /api/wholesalers/process-notifications - Process all pending notifications',\n      'POST /api/wholesalers/notify/:orderId - Process notifications for specific order',\n      'GET /api/wholesalers/pending - Get orders with pending notifications',\n      'GET /api/wholesalers/status/:orderId - Get notification status for order'\n    ]\n  });\n});\n\n// POST /api/wholesalers/process-notifications\n// Process all pending wholesaler notifications\nrouter.post('/process-notifications', async (req, res) => {\n  try {\n    const result = await processPendingNotifications();\n    \n    if (result.success) {\n      res.json({\n        success: true,\n        message: 'Notification processing completed',\n        data: {\n          processed: result.processed,\n          successCount: result.successCount || 0,\n          errorCount: result.errorCount || 0,\n          results: result.results || []\n        }\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// POST /api/wholesalers/notify/:orderId\n// Process notifications for a specific order\nrouter.post('/notify/:orderId', async (req, res) => {\n  try {\n    const { orderId } = req.params;\n    const result = await processOrderNotifications(orderId);\n    \n    if (result.success) {\n      res.json({\n        success: true,\n        message: result.message || 'Order notifications processed',\n        data: {\n          orderNumber: result.orderNumber,\n          results: result.results || []\n        }\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// GET /api/wholesalers/pending\n// Get list of orders with pending wholesaler notifications\nrouter.get('/pending', async (req, res) => {\n  try {\n    const pendingOrders = await Order.find({\n      $or: [\n        { 'payment.status': 'paid' },\n        { status: 'processing' }\n      ],\n      'items.wholesaler.notified': false\n    }).select('orderNumber createdAt status payment.status items.wholesaler');\n    \n    const summary = pendingOrders.map(order => ({\n      orderId: order._id,\n      orderNumber: order.orderNumber,\n      orderDate: order.createdAt,\n      status: order.status,\n      paymentStatus: order.payment.status,\n      pendingWholesalers: order.items\n        .filter(item => !item.wholesaler.notified && item.wholesaler.email)\n        .map(item => ({\n          wholesalerName: item.wholesaler.name,\n          wholesalerEmail: item.wholesaler.email,\n          productCode: item.wholesaler.productCode\n        }))\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        count: pendingOrders.length,\n        orders: summary\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// GET /api/wholesalers/status/:orderId\n// Get wholesaler notification status for a specific order\nrouter.get('/status/:orderId', async (req, res) => {\n  try {\n    const { orderId } = req.params;\n    const order = await Order.findById(orderId).select('orderNumber items.wholesaler');\n    \n    if (!order) {\n      return res.status(404).json({\n        success: false,\n        error: 'Order not found'\n      });\n    }\n    \n    const wholesalerStatus = order.items.map(item => ({\n      wholesalerName: item.wholesaler.name,\n      wholesalerEmail: item.wholesaler.email,\n      productCode: item.wholesaler.productCode,\n      notified: item.wholesaler.notified,\n      notifiedAt: item.wholesaler.notifiedAt\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        orderNumber: order.orderNumber,\n        wholesalers: wholesalerStatus\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}