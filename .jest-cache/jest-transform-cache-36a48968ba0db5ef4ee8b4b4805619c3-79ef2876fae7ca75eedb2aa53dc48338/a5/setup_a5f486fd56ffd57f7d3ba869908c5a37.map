{"version":3,"names":["mongoose","require","MongoMemoryServer","mongoServer","beforeAll","create","mongoUri","getUri","process","env","NODE_ENV","JWT_SECRET","MONGODB_TEST_URI","connect","useNewUrlParser","useUnifiedTopology","afterEach","connection","readyState","collections","key","collection","deleteMany","afterAll","close","stop","on","reason","promise","console","log"],"sources":["setup.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst { MongoMemoryServer } = require('mongodb-memory-server');\n\n// Import mocks before anything else\nrequire('./helpers/mockServices');\n\nlet mongoServer;\n\n// Setup before all tests\nbeforeAll(async () => {\n  // Start in-memory MongoDB instance\n  mongoServer = await MongoMemoryServer.create();\n  const mongoUri = mongoServer.getUri();\n  \n  // Set test environment variables\n  process.env.NODE_ENV = 'test';\n  process.env.JWT_SECRET = 'test-secret-key-for-testing';\n  process.env.MONGODB_TEST_URI = mongoUri;\n  \n  // Connect to the in-memory database\n  await mongoose.connect(mongoUri, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  });\n}, 30000);\n\n// Cleanup after each test\nafterEach(async () => {\n  if (mongoose.connection.readyState === 1) {\n    const collections = mongoose.connection.collections;\n    for (const key in collections) {\n      const collection = collections[key];\n      await collection.deleteMany({});\n    }\n  }\n});\n\n// Cleanup after all tests\nafterAll(async () => {\n  if (mongoose.connection.readyState === 1) {\n    await mongoose.connection.close();\n  }\n  if (mongoServer) {\n    await mongoServer.stop();\n  }\n}, 30000);\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.log('Unhandled Rejection at:', promise, 'reason:', reason);\n});"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAM;EAAEC;AAAkB,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;;AAE9D;AACAA,OAAO,CAAC,wBAAwB,CAAC;AAEjC,IAAIE,WAAW;;AAEf;AACAC,SAAS,CAAC,YAAY;EACpB;EACAD,WAAW,GAAG,MAAMD,iBAAiB,CAACG,MAAM,CAAC,CAAC;EAC9C,MAAMC,QAAQ,GAAGH,WAAW,CAACI,MAAM,CAAC,CAAC;;EAErC;EACAC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAG,MAAM;EAC7BF,OAAO,CAACC,GAAG,CAACE,UAAU,GAAG,6BAA6B;EACtDH,OAAO,CAACC,GAAG,CAACG,gBAAgB,GAAGN,QAAQ;;EAEvC;EACA,MAAMN,QAAQ,CAACa,OAAO,CAACP,QAAQ,EAAE;IAC/BQ,eAAe,EAAE,IAAI;IACrBC,kBAAkB,EAAE;EACtB,CAAC,CAAC;AACJ,CAAC,EAAE,KAAK,CAAC;;AAET;AACAC,SAAS,CAAC,YAAY;EACpB,IAAIhB,QAAQ,CAACiB,UAAU,CAACC,UAAU,KAAK,CAAC,EAAE;IACxC,MAAMC,WAAW,GAAGnB,QAAQ,CAACiB,UAAU,CAACE,WAAW;IACnD,KAAK,MAAMC,GAAG,IAAID,WAAW,EAAE;MAC7B,MAAME,UAAU,GAAGF,WAAW,CAACC,GAAG,CAAC;MACnC,MAAMC,UAAU,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;IACjC;EACF;AACF,CAAC,CAAC;;AAEF;AACAC,QAAQ,CAAC,YAAY;EACnB,IAAIvB,QAAQ,CAACiB,UAAU,CAACC,UAAU,KAAK,CAAC,EAAE;IACxC,MAAMlB,QAAQ,CAACiB,UAAU,CAACO,KAAK,CAAC,CAAC;EACnC;EACA,IAAIrB,WAAW,EAAE;IACf,MAAMA,WAAW,CAACsB,IAAI,CAAC,CAAC;EAC1B;AACF,CAAC,EAAE,KAAK,CAAC;;AAET;AACAjB,OAAO,CAACkB,EAAE,CAAC,oBAAoB,EAAE,CAACC,MAAM,EAAEC,OAAO,KAAK;EACpDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,OAAO,EAAE,SAAS,EAAED,MAAM,CAAC;AACpE,CAAC,CAAC","ignoreList":[]}