55e3083bf7497faa758c21373d6355e6
const {
  logger
} = require('../utils/logger');

// Custom error class for application errors
class AppError extends Error {
  constructor(message, statusCode, code = null, isOperational = true) {
    super(message);
    this.statusCode = statusCode;
    this.code = code;
    this.isOperational = isOperational;
    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
    Error.captureStackTrace(this, this.constructor);
  }
}

// Error handling for different error types
const handleCastErrorDB = err => {
  const message = `Invalid ${err.path}: ${err.value}`;
  return new AppError(message, 400, 'INVALID_ID');
};
const handleDuplicateFieldsDB = err => {
  const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
  const message = `Duplicate field value: ${value}. Please use another value!`;
  return new AppError(message, 400, 'DUPLICATE_FIELD');
};
const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `Invalid input data. ${errors.join('. ')}`;
  return new AppError(message, 400, 'VALIDATION_ERROR');
};
const handleJWTError = () => new AppError('Invalid token. Please log in again!', 401, 'INVALID_TOKEN');
const handleJWTExpiredError = () => new AppError('Your token has expired! Please log in again.', 401, 'TOKEN_EXPIRED');

// Send error response in development
const sendErrorDev = (err, req, res) => {
  // Log error details
  logger.error('Error in development:', {
    error: err.message,
    stack: err.stack,
    url: req.originalUrl,
    method: req.method,
    ip: req.ip,
    userAgent: req.get('User-Agent')
  });
  return res.status(err.statusCode).json({
    success: false,
    error: {
      code: err.code,
      message: err.message,
      stack: err.stack,
      details: err
    }
  });
};

// Send error response in production
const sendErrorProd = (err, req, res) => {
  // Log error details
  logger.error('Production error:', {
    error: err.message,
    code: err.code,
    url: req.originalUrl,
    method: req.method,
    ip: req.ip,
    statusCode: err.statusCode
  });

  // Operational, trusted error: send message to client
  if (err.isOperational) {
    return res.status(err.statusCode).json({
      success: false,
      error: {
        code: err.code,
        message: err.message
      }
    });
  }

  // Programming or other unknown error: don't leak error details
  logger.error('Unknown error:', {
    error: err,
    stack: err.stack
  });
  return res.status(500).json({
    success: false,
    error: {
      code: 'INTERNAL_ERROR',
      message: 'Something went wrong!'
    }
  });
};

// Global error handling middleware
const globalErrorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';
  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, req, res);
  } else {
    let error = {
      ...err
    };
    error.message = err.message;

    // Handle specific error types
    if (error.name === 'CastError') {
      error = handleCastErrorDB(error);
    }
    if (error.code === 11000) {
      error = handleDuplicateFieldsDB(error);
    }
    if (error.name === 'ValidationError') {
      error = handleValidationErrorDB(error);
    }
    if (error.name === 'JsonWebTokenError') {
      error = handleJWTError();
    }
    if (error.name === 'TokenExpiredError') {
      error = handleJWTExpiredError();
    }
    sendErrorProd(error, req, res);
  }
};

// Async error wrapper
const catchAsync = fn => {
  return (req, res, next) => {
    fn(req, res, next).catch(next);
  };
};

// Handle unhandled promise rejections
process.on('unhandledRejection', (err, promise) => {
  logger.error('Unhandled Promise Rejection:', {
    error: err.message,
    stack: err.stack,
    promise: promise
  });

  // Close server gracefully
  process.exit(1);
});

// Handle uncaught exceptions
process.on('uncaughtException', err => {
  logger.error('Uncaught Exception:', {
    error: err.message,
    stack: err.stack
  });

  // Close server gracefully
  process.exit(1);
});
module.exports = {
  AppError,
  globalErrorHandler,
  catchAsync
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnZXIiLCJyZXF1aXJlIiwiQXBwRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInN0YXR1c0NvZGUiLCJjb2RlIiwiaXNPcGVyYXRpb25hbCIsInN0YXR1cyIsInN0YXJ0c1dpdGgiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImhhbmRsZUNhc3RFcnJvckRCIiwiZXJyIiwicGF0aCIsInZhbHVlIiwiaGFuZGxlRHVwbGljYXRlRmllbGRzREIiLCJlcnJtc2ciLCJtYXRjaCIsImhhbmRsZVZhbGlkYXRpb25FcnJvckRCIiwiZXJyb3JzIiwiT2JqZWN0IiwidmFsdWVzIiwibWFwIiwiZWwiLCJqb2luIiwiaGFuZGxlSldURXJyb3IiLCJoYW5kbGVKV1RFeHBpcmVkRXJyb3IiLCJzZW5kRXJyb3JEZXYiLCJyZXEiLCJyZXMiLCJlcnJvciIsInN0YWNrIiwidXJsIiwib3JpZ2luYWxVcmwiLCJtZXRob2QiLCJpcCIsInVzZXJBZ2VudCIsImdldCIsImpzb24iLCJzdWNjZXNzIiwiZGV0YWlscyIsInNlbmRFcnJvclByb2QiLCJnbG9iYWxFcnJvckhhbmRsZXIiLCJuZXh0IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwibmFtZSIsImNhdGNoQXN5bmMiLCJmbiIsImNhdGNoIiwib24iLCJwcm9taXNlIiwiZXhpdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJlcnJvckhhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBsb2dnZXIgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2xvZ2dlcicpO1xuXG4vLyBDdXN0b20gZXJyb3IgY2xhc3MgZm9yIGFwcGxpY2F0aW9uIGVycm9yc1xuY2xhc3MgQXBwRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1c0NvZGUsIGNvZGUgPSBudWxsLCBpc09wZXJhdGlvbmFsID0gdHJ1ZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLmlzT3BlcmF0aW9uYWwgPSBpc09wZXJhdGlvbmFsO1xuICAgIHRoaXMuc3RhdHVzID0gYCR7c3RhdHVzQ29kZX1gLnN0YXJ0c1dpdGgoJzQnKSA/ICdmYWlsJyA6ICdlcnJvcic7XG5cbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfVxufVxuXG4vLyBFcnJvciBoYW5kbGluZyBmb3IgZGlmZmVyZW50IGVycm9yIHR5cGVzXG5jb25zdCBoYW5kbGVDYXN0RXJyb3JEQiA9IChlcnIpID0+IHtcbiAgY29uc3QgbWVzc2FnZSA9IGBJbnZhbGlkICR7ZXJyLnBhdGh9OiAke2Vyci52YWx1ZX1gO1xuICByZXR1cm4gbmV3IEFwcEVycm9yKG1lc3NhZ2UsIDQwMCwgJ0lOVkFMSURfSUQnKTtcbn07XG5cbmNvbnN0IGhhbmRsZUR1cGxpY2F0ZUZpZWxkc0RCID0gKGVycikgPT4ge1xuICBjb25zdCB2YWx1ZSA9IGVyci5lcnJtc2cubWF0Y2goLyhbXCInXSkoXFxcXD8uKSo/XFwxLylbMF07XG4gIGNvbnN0IG1lc3NhZ2UgPSBgRHVwbGljYXRlIGZpZWxkIHZhbHVlOiAke3ZhbHVlfS4gUGxlYXNlIHVzZSBhbm90aGVyIHZhbHVlIWA7XG4gIHJldHVybiBuZXcgQXBwRXJyb3IobWVzc2FnZSwgNDAwLCAnRFVQTElDQVRFX0ZJRUxEJyk7XG59O1xuXG5jb25zdCBoYW5kbGVWYWxpZGF0aW9uRXJyb3JEQiA9IChlcnIpID0+IHtcbiAgY29uc3QgZXJyb3JzID0gT2JqZWN0LnZhbHVlcyhlcnIuZXJyb3JzKS5tYXAoZWwgPT4gZWwubWVzc2FnZSk7XG4gIGNvbnN0IG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dCBkYXRhLiAke2Vycm9ycy5qb2luKCcuICcpfWA7XG4gIHJldHVybiBuZXcgQXBwRXJyb3IobWVzc2FnZSwgNDAwLCAnVkFMSURBVElPTl9FUlJPUicpO1xufTtcblxuY29uc3QgaGFuZGxlSldURXJyb3IgPSAoKSA9PlxuICBuZXcgQXBwRXJyb3IoJ0ludmFsaWQgdG9rZW4uIFBsZWFzZSBsb2cgaW4gYWdhaW4hJywgNDAxLCAnSU5WQUxJRF9UT0tFTicpO1xuXG5jb25zdCBoYW5kbGVKV1RFeHBpcmVkRXJyb3IgPSAoKSA9PlxuICBuZXcgQXBwRXJyb3IoJ1lvdXIgdG9rZW4gaGFzIGV4cGlyZWQhIFBsZWFzZSBsb2cgaW4gYWdhaW4uJywgNDAxLCAnVE9LRU5fRVhQSVJFRCcpO1xuXG4vLyBTZW5kIGVycm9yIHJlc3BvbnNlIGluIGRldmVsb3BtZW50XG5jb25zdCBzZW5kRXJyb3JEZXYgPSAoZXJyLCByZXEsIHJlcykgPT4ge1xuICAvLyBMb2cgZXJyb3IgZGV0YWlsc1xuICBsb2dnZXIuZXJyb3IoJ0Vycm9yIGluIGRldmVsb3BtZW50OicsIHtcbiAgICBlcnJvcjogZXJyLm1lc3NhZ2UsXG4gICAgc3RhY2s6IGVyci5zdGFjayxcbiAgICB1cmw6IHJlcS5vcmlnaW5hbFVybCxcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgaXA6IHJlcS5pcCxcbiAgICB1c2VyQWdlbnQ6IHJlcS5nZXQoJ1VzZXItQWdlbnQnKVxuICB9KTtcblxuICByZXR1cm4gcmVzLnN0YXR1cyhlcnIuc3RhdHVzQ29kZSkuanNvbih7XG4gICAgc3VjY2VzczogZmFsc2UsXG4gICAgZXJyb3I6IHtcbiAgICAgIGNvZGU6IGVyci5jb2RlLFxuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICBzdGFjazogZXJyLnN0YWNrLFxuICAgICAgZGV0YWlsczogZXJyXG4gICAgfVxuICB9KTtcbn07XG5cbi8vIFNlbmQgZXJyb3IgcmVzcG9uc2UgaW4gcHJvZHVjdGlvblxuY29uc3Qgc2VuZEVycm9yUHJvZCA9IChlcnIsIHJlcSwgcmVzKSA9PiB7XG4gIC8vIExvZyBlcnJvciBkZXRhaWxzXG4gIGxvZ2dlci5lcnJvcignUHJvZHVjdGlvbiBlcnJvcjonLCB7XG4gICAgZXJyb3I6IGVyci5tZXNzYWdlLFxuICAgIGNvZGU6IGVyci5jb2RlLFxuICAgIHVybDogcmVxLm9yaWdpbmFsVXJsLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBpcDogcmVxLmlwLFxuICAgIHN0YXR1c0NvZGU6IGVyci5zdGF0dXNDb2RlXG4gIH0pO1xuXG4gIC8vIE9wZXJhdGlvbmFsLCB0cnVzdGVkIGVycm9yOiBzZW5kIG1lc3NhZ2UgdG8gY2xpZW50XG4gIGlmIChlcnIuaXNPcGVyYXRpb25hbCkge1xuICAgIHJldHVybiByZXMuc3RhdHVzKGVyci5zdGF0dXNDb2RlKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogZXJyLmNvZGUsXG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBQcm9ncmFtbWluZyBvciBvdGhlciB1bmtub3duIGVycm9yOiBkb24ndCBsZWFrIGVycm9yIGRldGFpbHNcbiAgbG9nZ2VyLmVycm9yKCdVbmtub3duIGVycm9yOicsIHtcbiAgICBlcnJvcjogZXJyLFxuICAgIHN0YWNrOiBlcnIuc3RhY2tcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBlcnJvcjoge1xuICAgICAgY29kZTogJ0lOVEVSTkFMX0VSUk9SJyxcbiAgICAgIG1lc3NhZ2U6ICdTb21ldGhpbmcgd2VudCB3cm9uZyEnXG4gICAgfVxuICB9KTtcbn07XG5cbi8vIEdsb2JhbCBlcnJvciBoYW5kbGluZyBtaWRkbGV3YXJlXG5jb25zdCBnbG9iYWxFcnJvckhhbmRsZXIgPSAoZXJyLCByZXEsIHJlcywgbmV4dCkgPT4ge1xuICBlcnIuc3RhdHVzQ29kZSA9IGVyci5zdGF0dXNDb2RlIHx8IDUwMDtcbiAgZXJyLnN0YXR1cyA9IGVyci5zdGF0dXMgfHwgJ2Vycm9yJztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICBzZW5kRXJyb3JEZXYoZXJyLCByZXEsIHJlcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGVycm9yID0geyAuLi5lcnIgfTtcbiAgICBlcnJvci5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG5cbiAgICAvLyBIYW5kbGUgc3BlY2lmaWMgZXJyb3IgdHlwZXNcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Nhc3RFcnJvcicpIHtlcnJvciA9IGhhbmRsZUNhc3RFcnJvckRCKGVycm9yKTt9XG4gICAgaWYgKGVycm9yLmNvZGUgPT09IDExMDAwKSB7ZXJyb3IgPSBoYW5kbGVEdXBsaWNhdGVGaWVsZHNEQihlcnJvcik7fVxuICAgIGlmIChlcnJvci5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJykge2Vycm9yID0gaGFuZGxlVmFsaWRhdGlvbkVycm9yREIoZXJyb3IpO31cbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0pzb25XZWJUb2tlbkVycm9yJykge2Vycm9yID0gaGFuZGxlSldURXJyb3IoKTt9XG4gICAgaWYgKGVycm9yLm5hbWUgPT09ICdUb2tlbkV4cGlyZWRFcnJvcicpIHtlcnJvciA9IGhhbmRsZUpXVEV4cGlyZWRFcnJvcigpO31cblxuICAgIHNlbmRFcnJvclByb2QoZXJyb3IsIHJlcSwgcmVzKTtcbiAgfVxufTtcblxuLy8gQXN5bmMgZXJyb3Igd3JhcHBlclxuY29uc3QgY2F0Y2hBc3luYyA9IChmbikgPT4ge1xuICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgZm4ocmVxLCByZXMsIG5leHQpLmNhdGNoKG5leHQpO1xuICB9O1xufTtcblxuLy8gSGFuZGxlIHVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbnNcbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChlcnIsIHByb21pc2UpID0+IHtcbiAgbG9nZ2VyLmVycm9yKCdVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb246Jywge1xuICAgIGVycm9yOiBlcnIubWVzc2FnZSxcbiAgICBzdGFjazogZXJyLnN0YWNrLFxuICAgIHByb21pc2U6IHByb21pc2VcbiAgfSk7XG4gIFxuICAvLyBDbG9zZSBzZXJ2ZXIgZ3JhY2VmdWxseVxuICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcblxuLy8gSGFuZGxlIHVuY2F1Z2h0IGV4Y2VwdGlvbnNcbnByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgKGVycikgPT4ge1xuICBsb2dnZXIuZXJyb3IoJ1VuY2F1Z2h0IEV4Y2VwdGlvbjonLCB7XG4gICAgZXJyb3I6IGVyci5tZXNzYWdlLFxuICAgIHN0YWNrOiBlcnIuc3RhY2tcbiAgfSk7XG4gIFxuICAvLyBDbG9zZSBzZXJ2ZXIgZ3JhY2VmdWxseVxuICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFwcEVycm9yLFxuICBnbG9iYWxFcnJvckhhbmRsZXIsXG4gIGNhdGNoQXN5bmNcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0VBQUVBO0FBQU8sQ0FBQyxHQUFHQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7O0FBRTdDO0FBQ0EsTUFBTUMsUUFBUSxTQUFTQyxLQUFLLENBQUM7RUFDM0JDLFdBQVdBLENBQUNDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxJQUFJLEdBQUcsSUFBSSxFQUFFQyxhQUFhLEdBQUcsSUFBSSxFQUFFO0lBQ2xFLEtBQUssQ0FBQ0gsT0FBTyxDQUFDO0lBQ2QsSUFBSSxDQUFDQyxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDQyxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDQyxhQUFhLEdBQUdBLGFBQWE7SUFDbEMsSUFBSSxDQUFDQyxNQUFNLEdBQUcsR0FBR0gsVUFBVSxFQUFFLENBQUNJLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsT0FBTztJQUVoRVAsS0FBSyxDQUFDUSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxD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