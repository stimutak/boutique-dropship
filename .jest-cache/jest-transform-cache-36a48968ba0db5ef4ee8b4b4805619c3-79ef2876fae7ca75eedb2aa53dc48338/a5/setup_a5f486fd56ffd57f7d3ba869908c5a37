43b622982ba7954eb3bf24e07ec52d87
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');

// Import mocks before anything else
require('./helpers/mockServices');
let mongoServer;

// Setup before all tests
beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const mongoUri = mongoServer.getUri();

  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.JWT_SECRET = 'test-secret-key-for-testing';
  process.env.MONGODB_TEST_URI = mongoUri;

  // Connect to the in-memory database
  await mongoose.connect(mongoUri, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
}, 30000);

// Cleanup after each test
afterEach(async () => {
  if (mongoose.connection.readyState === 1) {
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      const collection = collections[key];
      await collection.deleteMany({});
    }
  }
});

// Cleanup after all tests
afterAll(async () => {
  if (mongoose.connection.readyState === 1) {
    await mongoose.connection.close();
  }
  if (mongoServer) {
    await mongoServer.stop();
  }
}, 30000);

// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  console.log('Unhandled Rejection at:', promise, 'reason:', reason);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJNb25nb01lbW9yeVNlcnZlciIsIm1vbmdvU2VydmVyIiwiYmVmb3JlQWxsIiwiY3JlYXRlIiwibW9uZ29VcmkiLCJnZXRVcmkiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJKV1RfU0VDUkVUIiwiTU9OR09EQl9URVNUX1VSSSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJhZnRlckVhY2giLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImNvbGxlY3Rpb25zIiwia2V5IiwiY29sbGVjdGlvbiIsImRlbGV0ZU1hbnkiLCJhZnRlckFsbCIsImNsb3NlIiwic3RvcCIsIm9uIiwicmVhc29uIiwicHJvbWlzZSIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJzZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5jb25zdCB7IE1vbmdvTWVtb3J5U2VydmVyIH0gPSByZXF1aXJlKCdtb25nb2RiLW1lbW9yeS1zZXJ2ZXInKTtcblxuLy8gSW1wb3J0IG1vY2tzIGJlZm9yZSBhbnl0aGluZyBlbHNlXG5yZXF1aXJlKCcuL2hlbHBlcnMvbW9ja1NlcnZpY2VzJyk7XG5cbmxldCBtb25nb1NlcnZlcjtcblxuLy8gU2V0dXAgYmVmb3JlIGFsbCB0ZXN0c1xuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgLy8gU3RhcnQgaW4tbWVtb3J5IE1vbmdvREIgaW5zdGFuY2VcbiAgbW9uZ29TZXJ2ZXIgPSBhd2FpdCBNb25nb01lbW9yeVNlcnZlci5jcmVhdGUoKTtcbiAgY29uc3QgbW9uZ29VcmkgPSBtb25nb1NlcnZlci5nZXRVcmkoKTtcbiAgXG4gIC8vIFNldCB0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlc1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0LXNlY3JldC1rZXktZm9yLXRlc3RpbmcnO1xuICBwcm9jZXNzLmVudi5NT05HT0RCX1RFU1RfVVJJID0gbW9uZ29Vcmk7XG4gIFxuICAvLyBDb25uZWN0IHRvIHRoZSBpbi1tZW1vcnkgZGF0YWJhc2VcbiAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdChtb25nb1VyaSwge1xuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUsXG4gIH0pO1xufSwgMzAwMDApO1xuXG4vLyBDbGVhbnVwIGFmdGVyIGVhY2ggdGVzdFxuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgaWYgKG1vbmdvb3NlLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gbW9uZ29vc2UuY29ubmVjdGlvbi5jb2xsZWN0aW9ucztcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjb2xsZWN0aW9ucykge1xuICAgICAgY29uc3QgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25zW2tleV07XG4gICAgICBhd2FpdCBjb2xsZWN0aW9uLmRlbGV0ZU1hbnkoe30pO1xuICAgIH1cbiAgfVxufSk7XG5cbi8vIENsZWFudXAgYWZ0ZXIgYWxsIHRlc3RzXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gIGlmIChtb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGUgPT09IDEpIHtcbiAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0aW9uLmNsb3NlKCk7XG4gIH1cbiAgaWYgKG1vbmdvU2VydmVyKSB7XG4gICAgYXdhaXQgbW9uZ29TZXJ2ZXIuc3RvcCgpO1xuICB9XG59LCAzMDAwMCk7XG5cbi8vIEhhbmRsZSB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25zXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAocmVhc29uLCBwcm9taXNlKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdVbmhhbmRsZWQgUmVqZWN0aW9uIGF0OicsIHByb21pc2UsICdyZWFzb246JywgcmVhc29uKTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU07RUFBRUM7QUFBa0IsQ0FBQyxHQUFHRCxPQUFPLENBQUMsdUJBQXVCLENBQUM7O0FBRTlEO0FBQ0FBLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQUVqQyxJQUFJRSxXQUFXOztBQUVmO0FBQ0FDLFNBQVMsQ0FBQyxZQUFZO0VBQ3BCO0VBQ0FELFdBQVcsR0FBRyxNQUFNRCxpQkFBaUIsQ0FBQ0csTUFBTSxDQUFDLENBQUM7RUFDOUMsTUFBTUMsUUFBUSxHQUFHSCxXQUFXLENBQUNJLE1BQU0sQ0FBQyxDQUFDOztFQUVyQztFQUNBQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHLE1BQU07RUFDN0JGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSxVQUFVLEdBQUcsNkJBQTZCO0VBQ3RESCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0csZ0JBQWdCLEdBQUdOLFFBQVE7O0VBRXZDO0VBQ0EsTUFBTU4sUUFBUSxDQUFDYSxPQUFPLENBQUNQLFFBQVEsRUFBRTtJQUMvQlEsZUFBZSxFQUFFLElBQUk7SUFDckJDLGtCQUFrQixFQUFFO0VBQ3RCLENBQUMsQ0FBQztBQUNKLENBQUMsRUFBRSxLQUFLLENBQUM7O0FBRVQ7QUFDQUMsU0FBUyxDQUFDLFlBQVk7RUFDcEIsSUFBSWhCLFFBQVEsQ0FBQ2lCLFVBQVUsQ0FBQ0MsVUFBVSxLQUFLLENBQUMsRUFBRTtJQUN4QyxNQUFNQyxXQUFXLEdBQUduQixRQUFRLENBQUNpQixVQUFVLENBQUNFLFdBQVc7SUFDbkQsS0FBSyxNQUFNQyxHQUFHLElBQUlELFdBQVcsRUFBRTtNQUM3QixNQUFNRSxVQUFVLEdBQUdGLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDO01BQ25DLE1BQU1DLFVBQVUsQ0FBQ0MsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDO0VBQ0Y7QUFDRixDQUFDLENBQUM7O0FBRUY7QUFDQUMsUUFBUSxDQUFDLFlBQVk7RUFDbkIsSUFBSXZCLFFBQVEsQ0FBQ2lCLFVBQVUsQ0FBQ0MsVUFBVSxLQUFLLENBQUMsRUFBRTtJQUN4QyxNQUFNbEIsUUFBUSxDQUFDaUIsVUFBVSxDQUFDTyxLQUFLLENBQUMsQ0FBQztFQUNuQztFQUNBLElBQUlyQixXQUFXLEVBQUU7SUFDZixNQUFNQSxXQUFXLENBQUNzQixJQUFJLENBQUMsQ0FBQztFQUMxQjtBQUNGLENBQUMsRUFBRSxLQUFLLENBQUM7O0FBRVQ7QUFDQWpCLE9BQU8sQ0FBQ2tCLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDQyxNQUFNLEVBQUVDLE9BQU8sS0FBSztFQUNwREMsT0FBTyxDQUFDQyxHQUFHLENBQUMseUJBQXlCLEVBQUVGLE9BQU8sRUFBRSxTQUFTLEVBQUVELE1BQU0sQ0FBQztBQUNwRSxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=