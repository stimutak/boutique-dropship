{"version":3,"names":["fs","require","path","describe","routesDir","join","__dirname","routeFiles","readdirSync","filter","file","endsWith","errorPatterns","good","bad","forEach","content","beforeAll","readFileSync","test","hasErrorResponse","expect","toBe","lines","split","errorLines","line","index","pattern","push","trim","issue","length","console","log","toBeGreaterThanOrEqual","hardcodedMessages","hardcodedPatterns","match","includes","message","report","totalFiles","filesAnalyzed","standardizedFiles","needsWork","hasGoodPattern","some","hasBadPattern","toBeGreaterThan"],"sources":["routeErrorPatterns.test.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\ndescribe('Route Error Pattern Analysis', () => {\n  const routesDir = path.join(__dirname, '..', 'routes');\n  const routeFiles = fs.readdirSync(routesDir).filter(file => file.endsWith('.js'));\n\n  // Patterns to look for\n  const errorPatterns = {\n    // Good patterns - standardized format\n    good: [\n      /res\\.status\\(\\d+\\)\\.json\\(\\{\\s*success:\\s*false,\\s*error:\\s*\\{[^}]+\\}\\s*\\}\\)/,\n      /new AppError\\(/,\n      /next\\(new AppError\\(/,\n      /res\\.error\\(/  // New standardized error helper\n    ],\n    // Bad patterns - inconsistent formats\n    bad: [\n      /res\\.status\\(\\d+\\)\\.json\\(\\{\\s*error:\\s*['\"]/,  // { error: \"string\" }\n      /res\\.status\\(\\d+\\)\\.send\\(['\"]/,                // .send(\"string\")\n      /res\\.json\\(\\{\\s*error:\\s*error\\.message\\s*\\}\\)/, // { error: error.message }\n      /res\\.status\\(\\d+\\)\\.json\\(\\{\\s*message:\\s*/     // { message: ... } instead of error\n    ]\n  };\n\n  routeFiles.forEach(file => {\n    if (file === 'index.js') return; // Skip index file\n\n    describe(`${file} error patterns`, () => {\n      let content;\n      \n      beforeAll(() => {\n        content = fs.readFileSync(path.join(routesDir, file), 'utf8');\n      });\n\n      test('should have at least one error response', () => {\n        const hasErrorResponse = /res\\.status\\([45]\\d{2}\\)|res\\.error\\(/.test(content);\n        expect(hasErrorResponse).toBe(true);\n      });\n\n      test('should use standardized error format', () => {\n        const lines = content.split('\\n');\n        const errorLines = [];\n        \n        lines.forEach((line, index) => {\n          // Check for bad patterns\n          errorPatterns.bad.forEach(pattern => {\n            if (pattern.test(line)) {\n              errorLines.push({\n                line: index + 1,\n                content: line.trim(),\n                issue: 'Non-standard error format'\n              });\n            }\n          });\n        });\n\n        if (errorLines.length > 0) {\n          console.log(`\\n${file} has non-standard error formats:`);\n          errorLines.forEach(({ line, content, issue }) => {\n            console.log(`  Line ${line}: ${issue}`);\n            console.log(`    ${content}`);\n          });\n        }\n\n        // This test is informational - it logs issues but doesn't fail\n        // In a real migration, we'd make this fail and fix all issues\n        expect(errorLines.length).toBeGreaterThanOrEqual(0);\n      });\n\n      test('should not have hardcoded error messages', () => {\n        // Look for error messages that should be i18n keys\n        const hardcodedMessages = [];\n        const lines = content.split('\\n');\n        \n        lines.forEach((line, index) => {\n          // Check for common hardcoded messages\n          const hardcodedPatterns = [\n            /message:\\s*['\"](?!errors\\.)([^'\"]+)['\"]/,  // message: \"text\" (not starting with errors.)\n            /Error\\(['\"]([^'\"]+)['\"]\\)/,                 // new Error(\"text\")\n          ];\n          \n          hardcodedPatterns.forEach(pattern => {\n            const match = line.match(pattern);\n            if (match && match[1]) {\n              // Skip if it's a variable or template literal\n              if (!match[1].includes('${') && !match[1].match(/^[A-Z_]+$/)) {\n                hardcodedMessages.push({\n                  line: index + 1,\n                  message: match[1]\n                });\n              }\n            }\n          });\n        });\n\n        if (hardcodedMessages.length > 0) {\n          console.log(`\\n${file} has hardcoded error messages:`);\n          hardcodedMessages.forEach(({ line, message }) => {\n            console.log(`  Line ${line}: \"${message}\"`);\n          });\n        }\n\n        // Informational - logs but doesn't fail\n        expect(hardcodedMessages.length).toBeGreaterThanOrEqual(0);\n      });\n    });\n  });\n\n  // Summary test\n  test('should generate error standardization report', () => {\n    console.log('\\n=== Error Standardization Report ===');\n    \n    const report = {\n      totalFiles: routeFiles.length,\n      filesAnalyzed: [],\n      standardizedFiles: [],\n      needsWork: []\n    };\n\n    routeFiles.forEach(file => {\n      if (file === 'index.js') return;\n      \n      const content = fs.readFileSync(path.join(routesDir, file), 'utf8');\n      const hasGoodPattern = errorPatterns.good.some(pattern => pattern.test(content));\n      const hasBadPattern = errorPatterns.bad.some(pattern => pattern.test(content));\n      \n      report.filesAnalyzed.push(file);\n      \n      if (hasGoodPattern && !hasBadPattern) {\n        report.standardizedFiles.push(file);\n      } else if (hasBadPattern) {\n        report.needsWork.push(file);\n      }\n    });\n\n    console.log(`Total route files: ${report.totalFiles}`);\n    console.log(`Files analyzed: ${report.filesAnalyzed.length}`);\n    console.log(`\\nStandardized files (${report.standardizedFiles.length}):`);\n    report.standardizedFiles.forEach(file => console.log(`  ✓ ${file}`));\n    console.log(`\\nFiles needing standardization (${report.needsWork.length}):`);\n    report.needsWork.forEach(file => console.log(`  ✗ ${file}`));\n\n    expect(report.filesAnalyzed.length).toBeGreaterThan(0);\n  });\n});"],"mappings":"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","ignoreList":[]}