{"version":3,"names":["express","require","router","Router","jwt","crypto","body","validationResult","User","requireAuth","authService","cartService","generateToken","userId","sign","process","env","JWT_SECRET","expiresIn","validateRegistration","isEmail","normalizeEmail","withMessage","isLength","min","trim","max","optional","isString","validateLogin","notEmpty","validateForgotPassword","validateResetPassword","post","req","res","errors","isEmpty","status","json","success","error","code","message","details","array","email","password","firstName","lastName","phone","preferences","existingUser","findOne","userData","user","create","token","_id","lastLogin","Date","save","wantsEmail","sendWelcomeEmail","welcomeData","emailResult","console","emailError","toPublicJSON","guestCartItems","isMatch","comparePassword","isActive","cartInfo","itemCount","mergedItems","Array","isArray","length","mergeResult","mergeCartsWithConflictResolution","sessionID","preservedCart","conflicts","duration","mergeError","emit","timestamp","ip","userAgent","get","cart","resetToken","randomBytes","toString","resetTokenHash","createHash","update","digest","passwordResetToken","passwordResetExpiry","now","sendPasswordResetEmail","resetUrl","FRONTEND_URL","log","$gt","undefined","authToken","put","isBoolean","addresses","updateData","updatedUser","findByIdAndUpdate","new","runValidators","currentPassword","newPassword","findById","select","session","destroy","decoded","verify","newToken","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\nconst { body, validationResult } = require('express-validator');\nconst User = require('../models/User');\nconst { requireAuth } = require('../middleware/auth');\nconst authService = require('../services/authService');\nconst cartService = require('../services/cartService');\n\n// Generate JWT token\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '7d' });\n};\n\n// Validation middleware for registration\nconst validateRegistration = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long'),\n  body('firstName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('First name is required and must be less than 50 characters'),\n  body('lastName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('Last name is required and must be less than 50 characters'),\n  body('phone')\n    .optional()\n    .isString()\n    .isLength({ min: 7, max: 30 })\n    .withMessage('Phone number must be between 7 and 30 characters')\n];\n\n// Validation middleware for login\nconst validateLogin = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\n// Validation for forgot password\nconst validateForgotPassword = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required')\n];\n\n// Validation for reset password\nconst validateResetPassword = [\n  body('token')\n    .notEmpty()\n    .withMessage('Reset token is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long')\n];\n\n// Register new user\nrouter.post('/register', validateRegistration, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, firstName, lastName, phone, preferences } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(409).json({\n        success: false,\n        error: {\n          code: 'USER_EXISTS',\n          message: 'User with this email already exists'\n        }\n      });\n    }\n\n    // Create new user\n    const userData = {\n      email,\n      password,\n      firstName,\n      lastName,\n      phone,\n      preferences: preferences || {}\n    };\n\n    const user = await User.create(userData);\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Send welcome email\n    try {\n      if (user.wantsEmail('welcomeEmails')) {\n        const { sendWelcomeEmail } = require('../utils/emailService');\n        \n        const welcomeData = {\n          firstName: user.firstName,\n          email: user.email\n        };\n\n        const emailResult = await sendWelcomeEmail(user.email, welcomeData);\n        if (!emailResult.success) {\n          console.error('Failed to send welcome email:', emailResult.error);\n        }\n      }\n    } catch (emailError) {\n      console.error('Error sending welcome email:', emailError);\n    }\n\n    res.status(201).json({\n      success: true,\n      message: 'User registered successfully',\n      token,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'REGISTRATION_ERROR',\n        message: 'Failed to register user'\n      }\n    });\n  }\n});\n\n// Login user with enhanced cart merging\nrouter.post('/login', validateLogin, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, guestCartItems } = req.body;\n\n    // Find user\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return res.status(403).json({\n        success: false,\n        error: {\n          code: 'ACCOUNT_DISABLED',\n          message: 'Your account has been disabled'\n        }\n      });\n    }\n\n    // Generate token\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Enhanced cart preservation and merging\n    let cartInfo = { itemCount: 0, mergedItems: 0 };\n    \n    // Merge guest cart if provided\n    if (guestCartItems && Array.isArray(guestCartItems) && guestCartItems.length > 0) {\n      try {\n        const mergeResult = await cartService.mergeCartsWithConflictResolution(\n          user._id,\n          guestCartItems,\n          req.sessionID\n        );\n        \n        cartInfo = {\n          preservedCart: true,\n          mergedItems: mergeResult.mergedItems,\n          conflicts: mergeResult.conflicts,\n          duration: mergeResult.duration\n        };\n      } catch (mergeError) {\n        console.error('Cart merge error during login:', mergeError);\n        cartInfo.mergeError = 'Failed to merge guest cart';\n      }\n    }\n\n    // Emit user login event\n    authService.emit('userLogin', {\n      userId: user._id,\n      email: user.email,\n      timestamp: new Date(),\n      ip: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n\n    res.json({\n      success: true,\n      message: 'Login successful',\n      token,\n      user: user.toPublicJSON(),\n      cart: cartInfo\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGIN_ERROR',\n        message: 'Failed to login'\n      }\n    });\n  }\n});\n\n// Forgot password\nrouter.post('/forgot-password', validateForgotPassword, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email } = req.body;\n    \n    // Find user\n    const user = await User.findOne({ email });\n    \n    // Always return success to prevent email enumeration\n    if (!user) {\n      return res.json({\n        success: true,\n        message: 'If an account exists with this email, a password reset link will be sent.'\n      });\n    }\n\n    // Generate reset token\n    const resetToken = crypto.randomBytes(32).toString('hex');\n    const resetTokenHash = crypto\n      .createHash('sha256')\n      .update(resetToken)\n      .digest('hex');\n\n    // Save reset token and expiry\n    user.passwordResetToken = resetTokenHash;\n    user.passwordResetExpiry = Date.now() + 3600000; // 1 hour\n    await user.save();\n\n    // Send reset email\n    try {\n      const { sendPasswordResetEmail } = require('../utils/emailService');\n      const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;\n      \n      const emailResult = await sendPasswordResetEmail(user.email, {\n        firstName: user.firstName,\n        resetToken,\n        resetUrl\n      });\n      \n      if (!emailResult.success) {\n        console.error('Failed to send reset email:', emailResult.error);\n      }\n      \n      // Log reset URL for development when email is not configured\n      if (emailResult.message === 'Email skipped - not configured') {\n        console.log('\\n========================================');\n        console.log('PASSWORD RESET URL (Email not configured)');\n        console.log('========================================');\n        console.log(`User: ${user.email}`);\n        console.log(`Reset URL: ${resetUrl}`);\n        console.log('========================================\\n');\n      }\n    } catch (emailError) {\n      console.error('Error sending reset email:', emailError);\n    }\n\n    res.json({\n      success: true,\n      message: 'If an account exists with this email, a password reset link will be sent.'\n    });\n\n  } catch (error) {\n    console.error('Forgot password error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'FORGOT_PASSWORD_ERROR',\n        message: 'Failed to process password reset request'\n      }\n    });\n  }\n});\n\n// Reset password\nrouter.post('/reset-password', validateResetPassword, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { token, password } = req.body;\n    \n    // Hash the token to match stored version\n    const resetTokenHash = crypto\n      .createHash('sha256')\n      .update(token)\n      .digest('hex');\n\n    // Find user with valid reset token\n    const user = await User.findOne({\n      passwordResetToken: resetTokenHash,\n      passwordResetExpiry: { $gt: Date.now() }\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Password reset token is invalid or has expired'\n        }\n      });\n    }\n\n    // Update password\n    user.password = password;\n    user.passwordResetToken = undefined;\n    user.passwordResetExpiry = undefined;\n    await user.save();\n\n    // Generate new auth token\n    const authToken = generateToken(user._id);\n\n    res.json({\n      success: true,\n      message: 'Password has been reset successfully',\n      token: authToken,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Reset password error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'RESET_PASSWORD_ERROR',\n        message: 'Failed to reset password'\n      }\n    });\n  }\n});\n\n// Get user profile\nrouter.get('/profile', requireAuth, async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      user: req.user.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_FETCH_ERROR',\n        message: 'Failed to fetch user profile'\n      }\n    });\n  }\n});\n\n// Update user profile\nrouter.put('/profile', requireAuth, [\n  body('firstName').optional().trim().isLength({ min: 1, max: 50 }),\n  body('lastName').optional().trim().isLength({ min: 1, max: 50 }),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }),\n  body('preferences.notifications').optional().isBoolean(),\n  body('preferences.newsletter').optional().isBoolean()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, firstName, lastName, phone, preferences, addresses } = req.body;\n    \n    const updateData = {};\n    if (firstName !== undefined) updateData.firstName = firstName;\n    if (lastName !== undefined) updateData.lastName = lastName;\n    if (phone !== undefined) updateData.phone = phone;\n    if (preferences !== undefined) updateData.preferences = { ...req.user.preferences, ...preferences };\n    if (addresses !== undefined) updateData.addresses = addresses;\n\n    // Don't allow email updates through this endpoint\n    delete updateData.email;\n\n    const updatedUser = await User.findByIdAndUpdate(\n      req.user._id,\n      updateData,\n      { new: true, runValidators: true }\n    );\n\n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      user: updatedUser.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Profile update error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_UPDATE_ERROR',\n        message: 'Failed to update profile'\n      }\n    });\n  }\n});\n\n// Change password\nrouter.post('/change-password', requireAuth, [\n  body('currentPassword').notEmpty().withMessage('Current password is required'),\n  body('newPassword').isLength({ min: 6 }).withMessage('New password must be at least 6 characters long')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { currentPassword, newPassword } = req.body;\n\n    // Get user with password field\n    const user = await User.findById(req.user._id).select('+password');\n\n    // Verify current password\n    const isMatch = await user.comparePassword(currentPassword);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_PASSWORD',\n          message: 'Current password is incorrect'\n        }\n      });\n    }\n\n    // Update password\n    user.password = newPassword;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password changed successfully'\n    });\n  } catch (error) {\n    console.error('Password change error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_CHANGE_ERROR',\n        message: 'Failed to change password'\n      }\n    });\n  }\n});\n\n// Logout (optional - mainly for server-side session cleanup)\nrouter.post('/logout', requireAuth, async (req, res) => {\n  try {\n    // Emit logout event\n    authService.emit('userLogout', {\n      userId: req.user._id,\n      timestamp: new Date()\n    });\n\n    // Clear any server-side sessions if needed\n    if (req.session) {\n      req.session.destroy();\n    }\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGOUT_ERROR',\n        message: 'Failed to logout'\n      }\n    });\n  }\n});\n\n// Refresh token endpoint\nrouter.post('/refresh-token', async (req, res) => {\n  try {\n    const { token } = req.body;\n    \n    if (!token) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MISSING_TOKEN',\n          message: 'Token is required'\n        }\n      });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n    \n    if (!user || !user.isActive) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Invalid token'\n        }\n      });\n    }\n\n    const newToken = generateToken(user._id);\n    \n    res.json({\n      success: true,\n      token: newToken,\n      user: user.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Token refresh error:', error);\n    res.status(401).json({\n      success: false,\n      error: {\n        code: 'TOKEN_REFRESH_ERROR',\n        message: 'Failed to refresh token'\n      }\n    });\n  }\n});\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}