ef92208f71425af01379ae38390e4f27
const request = require('supertest');
const express = require('express');
const session = require('express-session');
const mongoose = require('mongoose');
const Product = require('../../models/Product');
const cartRoutes = require('../../routes/cart');

// Create test app
const createTestApp = () => {
  const app = express();

  // Session middleware for testing
  app.use(session({
    secret: 'test-secret',
    resave: false,
    saveUninitialized: true,
    // Important for guest carts
    cookie: {
      secure: false,
      httpOnly: false,
      maxAge: 1000 * 60 * 60 // 1 hour
    }
  }));
  app.use(express.json());
  app.use('/api/cart', cartRoutes);
  return app;
};
describe('Cart Routes', () => {
  let app;
  let testProduct;
  beforeAll(async () => {
    // Connect to test database
    await mongoose.connect(process.env.MONGODB_TEST_URI || 'mongodb://localhost:27017/holistic-store-test', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    app = createTestApp();
  });
  beforeEach(async () => {
    // Clear database and create test product
    await Product.deleteMany({});
    testProduct = await Product.create({
      name: 'Test Crystal',
      slug: 'test-crystal',
      description: 'A test crystal for unit testing',
      shortDescription: 'A test crystal for unit testing',
      price: 29.99,
      category: 'crystals',
      isActive: true,
      properties: {
        chakra: ['crown'],
        element: ['air'],
        healing: ['test']
      },
      wholesaler: {
        name: 'Test Wholesaler',
        email: 'test@wholesaler.com',
        productCode: 'TEST-001',
        cost: 15.00
      }
    });
  });
  afterAll(async () => {
    await mongoose.connection.close();
  });
  describe('GET /api/cart', () => {
    it('should return empty cart for new session', async () => {
      const response = await request(app).get('/api/cart').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.cart.items).toEqual([]);
      expect(response.body.data.cart.subtotal).toBe(0);
      expect(response.body.data.cart.itemCount).toBe(0);
      expect(response.body.data.cart.isEmpty).toBe(true);
    });
    it('should return cart with populated product details', async () => {
      const agent = request.agent(app);

      // Add item to cart first
      await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 2
      }).expect(200);

      // Get cart
      const response = await agent.get('/api/cart').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.cart.items).toHaveLength(1);
      expect(response.body.data.cart.items[0].product.name).toBe('Test Crystal');
      expect(response.body.data.cart.items[0].quantity).toBe(2);
      expect(response.body.data.cart.items[0].subtotal).toBe(59.98);
      expect(response.body.data.cart.subtotal).toBe(59.98);
      expect(response.body.data.cart.itemCount).toBe(2);
      expect(response.body.data.cart.isEmpty).toBe(false);

      // Ensure wholesaler info is not exposed
      expect(response.body.data.cart.items[0].product.wholesaler).toBeUndefined();
    });
    it('should filter out inactive products from cart', async () => {
      const agent = request.agent(app);

      // Add item to cart
      await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(200);

      // Deactivate product
      testProduct.isActive = false;
      await testProduct.save();

      // Get cart - should be empty now
      const response = await agent.get('/api/cart').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.cart.items).toEqual([]);
      expect(response.body.data.cart.isEmpty).toBe(true);
    });
  });
  describe('POST /api/cart/add', () => {
    it('should add new item to cart', async () => {
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item added to cart');
      expect(response.body.data.cart.itemCount).toBe(1);
    });
    it('should update quantity for existing item', async () => {
      const agent = request.agent(app);

      // Add item first time
      await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 2
      }).expect(200);

      // Add same item again
      const response = await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 3
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.cart.itemCount).toBe(5); // 2 + 3
    });
    it('should reject invalid product ID', async () => {
      const response = await request(app).post('/api/cart/add').send({
        productId: 'invalid-id',
        quantity: 1
      }).expect(400); // Invalid format validation

      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_PRODUCT_ID');
    });
    it('should reject missing product ID', async () => {
      const response = await request(app).post('/api/cart/add').send({
        quantity: 1
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('MISSING_PRODUCT_ID');
    });
    it('should reject invalid quantity', async () => {
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 0
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_QUANTITY');
    });
    it('should reject quantity over maximum', async () => {
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 100
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_QUANTITY');
    });
    it('should reject inactive product', async () => {
      testProduct.isActive = false;
      await testProduct.save();
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(404);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('PRODUCT_NOT_FOUND');
    });
    it('should prevent exceeding maximum quantity when updating existing item', async () => {
      const agent = request.agent(app);

      // Add item with high quantity
      await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 98
      }).expect(200);

      // Try to add more - should fail
      const response = await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 2
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('MAX_QUANTITY_EXCEEDED');
    });
  });
  describe('PUT /api/cart/update', () => {
    it('should update item quantity', async () => {
      const agent = request.agent(app);

      // Add item first
      await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(200);

      // Update quantity
      const response = await agent.put('/api/cart/update').send({
        productId: testProduct._id,
        quantity: 5
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Cart updated');
      expect(response.body.cartItemCount).toBe(5);
    });
    it('should remove item when quantity is 0', async () => {
      const agent = request.agent(app);

      // Add item first
      await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(200);

      // Update quantity to 0
      const response = await agent.put('/api/cart/update').send({
        productId: testProduct._id,
        quantity: 0
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item removed from cart');
      expect(response.body.cartItemCount).toBe(0);
    });
    it('should reject missing product ID', async () => {
      const response = await request(app).put('/api/cart/update').send({
        quantity: 1
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('MISSING_PRODUCT_ID');
    });
    it('should reject invalid quantity', async () => {
      const response = await request(app).put('/api/cart/update').send({
        productId: testProduct._id,
        quantity: -1
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_QUANTITY');
    });
    it('should return 404 for non-existent item', async () => {
      const response = await request(app).put('/api/cart/update').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(404);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('ITEM_NOT_FOUND');
    });
  });
  describe('DELETE /api/cart/remove', () => {
    it('should remove item from cart', async () => {
      const agent = request.agent(app);

      // Add item first
      await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 3
      }).expect(200);

      // Remove item
      const response = await agent.delete('/api/cart/remove').send({
        productId: testProduct._id
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item removed from cart');
      expect(response.body.cartItemCount).toBe(0);
    });
    it('should reject missing product ID', async () => {
      const response = await request(app).delete('/api/cart/remove').send({}).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('MISSING_PRODUCT_ID');
    });
    it('should return 404 for non-existent item', async () => {
      const response = await request(app).delete('/api/cart/remove').send({
        productId: testProduct._id
      }).expect(404);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('ITEM_NOT_FOUND');
    });
  });
  describe('DELETE /api/cart/clear', () => {
    it('should clear entire cart', async () => {
      const agent = request.agent(app);

      // Add multiple items
      await agent.post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 2
      }).expect(200);

      // Clear cart
      const response = await agent.delete('/api/cart/clear').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Cart cleared');
      expect(response.body.cartItemCount).toBe(0);
    });
    it('should work on empty cart', async () => {
      const response = await request(app).delete('/api/cart/clear').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.cartItemCount).toBe(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImV4cHJlc3MiLCJzZXNzaW9uIiwibW9uZ29vc2UiLCJQcm9kdWN0IiwiY2FydFJvdXRlcyIsImNyZWF0ZVRlc3RBcHAiLCJhcHAiLCJ1c2UiLCJzZWNyZXQiLCJyZXNhdmUiLCJzYXZlVW5pbml0aWFsaXplZCIsImNvb2tpZSIsInNlY3VyZSIsImh0dHBPbmx5IiwibWF4QWdlIiwianNvbiIsImRlc2NyaWJlIiwidGVzdFByb2R1Y3QiLCJiZWZvcmVBbGwiLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfVEVTVF9VUkkiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJiZWZvcmVFYWNoIiwiZGVsZXRlTWFueSIsImNyZWF0ZSIsIm5hbWUiLCJzbHVnIiwiZGVzY3JpcHRpb24iLCJzaG9ydERlc2NyaXB0aW9uIiwicHJpY2UiLCJjYXRlZ29yeSIsImlzQWN0aXZlIiwicHJvcGVydGllcyIsImNoYWtyYSIsImVsZW1lbnQiLCJoZWFsaW5nIiwid2hvbGVzYWxlciIsImVtYWlsIiwicHJvZHVjdENvZGUiLCJjb3N0IiwiYWZ0ZXJBbGwiLCJjb25uZWN0aW9uIiwiY2xvc2UiLCJpdCIsInJlc3BvbnNlIiwiZ2V0IiwiZXhwZWN0IiwiYm9keSIsInN1Y2Nlc3MiLCJ0b0JlIiwiZGF0YSIsImNhcnQiLCJpdGVtcyIsInRvRXF1YWwiLCJzdWJ0b3RhbCIsIml0ZW1Db3VudCIsImlzRW1wdHkiLCJhZ2VudCIsInBvc3QiLCJzZW5kIiwicHJvZHVjdElkIiwiX2lkIiwicXVhbnRpdHkiLCJ0b0hhdmVMZW5ndGgiLCJwcm9kdWN0IiwidG9CZVVuZGVmaW5lZCIsInNhdmUiLCJtZXNzYWdlIiwiZXJyb3IiLCJjb2RlIiwicHV0IiwiY2FydEl0ZW1Db3VudCIsImRlbGV0ZSJdLCJzb3VyY2VzIjpbImNhcnQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3Qgc2Vzc2lvbiA9IHJlcXVpcmUoJ2V4cHJlc3Mtc2Vzc2lvbicpO1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuY29uc3QgUHJvZHVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZGVscy9Qcm9kdWN0Jyk7XG5jb25zdCBjYXJ0Um91dGVzID0gcmVxdWlyZSgnLi4vLi4vcm91dGVzL2NhcnQnKTtcblxuLy8gQ3JlYXRlIHRlc3QgYXBwXG5jb25zdCBjcmVhdGVUZXN0QXBwID0gKCkgPT4ge1xuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gIFxuICAvLyBTZXNzaW9uIG1pZGRsZXdhcmUgZm9yIHRlc3RpbmdcbiAgYXBwLnVzZShzZXNzaW9uKHtcbiAgICBzZWNyZXQ6ICd0ZXN0LXNlY3JldCcsXG4gICAgcmVzYXZlOiBmYWxzZSxcbiAgICBzYXZlVW5pbml0aWFsaXplZDogdHJ1ZSwgLy8gSW1wb3J0YW50IGZvciBndWVzdCBjYXJ0c1xuICAgIGNvb2tpZTogeyBcbiAgICAgIHNlY3VyZTogZmFsc2UsXG4gICAgICBodHRwT25seTogZmFsc2UsXG4gICAgICBtYXhBZ2U6IDEwMDAgKiA2MCAqIDYwIC8vIDEgaG91clxuICAgIH1cbiAgfSkpO1xuICBcbiAgYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG4gIGFwcC51c2UoJy9hcGkvY2FydCcsIGNhcnRSb3V0ZXMpO1xuICBcbiAgcmV0dXJuIGFwcDtcbn07XG5cbmRlc2NyaWJlKCdDYXJ0IFJvdXRlcycsICgpID0+IHtcbiAgbGV0IGFwcDtcbiAgbGV0IHRlc3RQcm9kdWN0O1xuICBcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICAvLyBDb25uZWN0IHRvIHRlc3QgZGF0YWJhc2VcbiAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPREJfVEVTVF9VUkkgfHwgJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvaG9saXN0aWMtc3RvcmUtdGVzdCcsIHtcbiAgICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcbiAgICB9KTtcbiAgICBcbiAgICBhcHAgPSBjcmVhdGVUZXN0QXBwKCk7XG4gIH0pO1xuICBcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgLy8gQ2xlYXIgZGF0YWJhc2UgYW5kIGNyZWF0ZSB0ZXN0IHByb2R1Y3RcbiAgICBhd2FpdCBQcm9kdWN0LmRlbGV0ZU1hbnkoe30pO1xuICAgIFxuICAgIHRlc3RQcm9kdWN0ID0gYXdhaXQgUHJvZHVjdC5jcmVhdGUoe1xuICAgICAgbmFtZTogJ1Rlc3QgQ3J5c3RhbCcsXG4gICAgICBzbHVnOiAndGVzdC1jcnlzdGFsJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnQSB0ZXN0IGNyeXN0YWwgZm9yIHVuaXQgdGVzdGluZycsXG4gICAgICBzaG9ydERlc2NyaXB0aW9uOiAnQSB0ZXN0IGNyeXN0YWwgZm9yIHVuaXQgdGVzdGluZycsXG4gICAgICBwcmljZTogMjkuOTksXG4gICAgICBjYXRlZ29yeTogJ2NyeXN0YWxzJyxcbiAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBjaGFrcmE6IFsnY3Jvd24nXSxcbiAgICAgICAgZWxlbWVudDogWydhaXInXSxcbiAgICAgICAgaGVhbGluZzogWyd0ZXN0J11cbiAgICAgIH0sXG4gICAgICB3aG9sZXNhbGVyOiB7XG4gICAgICAgIG5hbWU6ICdUZXN0IFdob2xlc2FsZXInLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAd2hvbGVzYWxlci5jb20nLFxuICAgICAgICBwcm9kdWN0Q29kZTogJ1RFU1QtMDAxJyxcbiAgICAgICAgY29zdDogMTUuMDBcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIFxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdGlvbi5jbG9zZSgpO1xuICB9KTtcbiAgXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS9jYXJ0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGVtcHR5IGNhcnQgZm9yIG5ldyBzZXNzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS9jYXJ0JylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5jYXJ0Lml0ZW1zKS50b0VxdWFsKFtdKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5zdWJ0b3RhbCkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pdGVtQ291bnQpLnRvQmUoMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmNhcnQuaXNFbXB0eSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHJldHVybiBjYXJ0IHdpdGggcG9wdWxhdGVkIHByb2R1Y3QgZGV0YWlscycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFnZW50ID0gcmVxdWVzdC5hZ2VudChhcHApO1xuICAgICAgXG4gICAgICAvLyBBZGQgaXRlbSB0byBjYXJ0IGZpcnN0XG4gICAgICBhd2FpdCBhZ2VudFxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAyIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgLy8gR2V0IGNhcnRcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYWdlbnRcbiAgICAgICAgLmdldCgnL2FwaS9jYXJ0JylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5jYXJ0Lml0ZW1zKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmNhcnQuaXRlbXNbMF0ucHJvZHVjdC5uYW1lKS50b0JlKCdUZXN0IENyeXN0YWwnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pdGVtc1swXS5xdWFudGl0eSkudG9CZSgyKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pdGVtc1swXS5zdWJ0b3RhbCkudG9CZSg1OS45OCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmNhcnQuc3VidG90YWwpLnRvQmUoNTkuOTgpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5jYXJ0Lml0ZW1Db3VudCkudG9CZSgyKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pc0VtcHR5KS50b0JlKGZhbHNlKTtcbiAgICAgIFxuICAgICAgLy8gRW5zdXJlIHdob2xlc2FsZXIgaW5mbyBpcyBub3QgZXhwb3NlZFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5jYXJ0Lml0ZW1zWzBdLnByb2R1Y3Qud2hvbGVzYWxlcikudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgZmlsdGVyIG91dCBpbmFjdGl2ZSBwcm9kdWN0cyBmcm9tIGNhcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhZ2VudCA9IHJlcXVlc3QuYWdlbnQoYXBwKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIGl0ZW0gdG8gY2FydFxuICAgICAgYXdhaXQgYWdlbnRcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMSB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgICBcbiAgICAgIC8vIERlYWN0aXZhdGUgcHJvZHVjdFxuICAgICAgdGVzdFByb2R1Y3QuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGF3YWl0IHRlc3RQcm9kdWN0LnNhdmUoKTtcbiAgICAgIFxuICAgICAgLy8gR2V0IGNhcnQgLSBzaG91bGQgYmUgZW1wdHkgbm93XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFnZW50XG4gICAgICAgIC5nZXQoJy9hcGkvY2FydCcpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pdGVtcykudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmNhcnQuaXNFbXB0eSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnUE9TVCAvYXBpL2NhcnQvYWRkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYWRkIG5ldyBpdGVtIHRvIGNhcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAxIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQmUoJ0l0ZW0gYWRkZWQgdG8gY2FydCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5jYXJ0Lml0ZW1Db3VudCkudG9CZSgxKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHVwZGF0ZSBxdWFudGl0eSBmb3IgZXhpc3RpbmcgaXRlbScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFnZW50ID0gcmVxdWVzdC5hZ2VudChhcHApO1xuICAgICAgXG4gICAgICAvLyBBZGQgaXRlbSBmaXJzdCB0aW1lXG4gICAgICBhd2FpdCBhZ2VudFxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAyIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHNhbWUgaXRlbSBhZ2FpblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhZ2VudFxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAzIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pdGVtQ291bnQpLnRvQmUoNSk7IC8vIDIgKyAzXG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBwcm9kdWN0IElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogJ2ludmFsaWQtaWQnLCBxdWFudGl0eTogMSB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7IC8vIEludmFsaWQgZm9ybWF0IHZhbGlkYXRpb25cbiAgICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ0lOVkFMSURfUFJPRFVDVF9JRCcpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVqZWN0IG1pc3NpbmcgcHJvZHVjdCBJRCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2NhcnQvYWRkJylcbiAgICAgICAgLnNlbmQoeyBxdWFudGl0eTogMSB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnTUlTU0lOR19QUk9EVUNUX0lEJyk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBxdWFudGl0eScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2NhcnQvYWRkJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCwgcXVhbnRpdHk6IDAgfSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ0lOVkFMSURfUVVBTlRJVFknKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHJlamVjdCBxdWFudGl0eSBvdmVyIG1heGltdW0nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAxMDAgfSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ0lOVkFMSURfUVVBTlRJVFknKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbmFjdGl2ZSBwcm9kdWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgdGVzdFByb2R1Y3QuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGF3YWl0IHRlc3RQcm9kdWN0LnNhdmUoKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMSB9KVxuICAgICAgICAuZXhwZWN0KDQwNCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnUFJPRFVDVF9OT1RfRk9VTkQnKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHByZXZlbnQgZXhjZWVkaW5nIG1heGltdW0gcXVhbnRpdHkgd2hlbiB1cGRhdGluZyBleGlzdGluZyBpdGVtJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYWdlbnQgPSByZXF1ZXN0LmFnZW50KGFwcCk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBpdGVtIHdpdGggaGlnaCBxdWFudGl0eVxuICAgICAgYXdhaXQgYWdlbnRcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogOTggfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICAvLyBUcnkgdG8gYWRkIG1vcmUgLSBzaG91bGQgZmFpbFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhZ2VudFxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAyIH0pXG4gICAgICAgIC5leHBlY3QoNDAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdNQVhfUVVBTlRJVFlfRVhDRUVERUQnKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnUFVUIC9hcGkvY2FydC91cGRhdGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgaXRlbSBxdWFudGl0eScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFnZW50ID0gcmVxdWVzdC5hZ2VudChhcHApO1xuICAgICAgXG4gICAgICAvLyBBZGQgaXRlbSBmaXJzdFxuICAgICAgYXdhaXQgYWdlbnRcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMSB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBxdWFudGl0eVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhZ2VudFxuICAgICAgICAucHV0KCcvYXBpL2NhcnQvdXBkYXRlJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCwgcXVhbnRpdHk6IDUgfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9CZSgnQ2FydCB1cGRhdGVkJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5jYXJ0SXRlbUNvdW50KS50b0JlKDUpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVtb3ZlIGl0ZW0gd2hlbiBxdWFudGl0eSBpcyAwJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYWdlbnQgPSByZXF1ZXN0LmFnZW50KGFwcCk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBpdGVtIGZpcnN0XG4gICAgICBhd2FpdCBhZ2VudFxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAxIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHF1YW50aXR5IHRvIDBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYWdlbnRcbiAgICAgICAgLnB1dCgnL2FwaS9jYXJ0L3VwZGF0ZScpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAwIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQmUoJ0l0ZW0gcmVtb3ZlZCBmcm9tIGNhcnQnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmNhcnRJdGVtQ291bnQpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgbWlzc2luZyBwcm9kdWN0IElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnB1dCgnL2FwaS9jYXJ0L3VwZGF0ZScpXG4gICAgICAgIC5zZW5kKHsgcXVhbnRpdHk6IDEgfSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ01JU1NJTkdfUFJPRFVDVF9JRCcpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGludmFsaWQgcXVhbnRpdHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucHV0KCcvYXBpL2NhcnQvdXBkYXRlJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCwgcXVhbnRpdHk6IC0xIH0pXG4gICAgICAgIC5leHBlY3QoNDAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdJTlZBTElEX1FVQU5USVRZJyk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gNDA0IGZvciBub24tZXhpc3RlbnQgaXRlbScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wdXQoJy9hcGkvY2FydC91cGRhdGUnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMSB9KVxuICAgICAgICAuZXhwZWN0KDQwNCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnSVRFTV9OT1RfRk9VTkQnKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnREVMRVRFIC9hcGkvY2FydC9yZW1vdmUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZW1vdmUgaXRlbSBmcm9tIGNhcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhZ2VudCA9IHJlcXVlc3QuYWdlbnQoYXBwKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIGl0ZW0gZmlyc3RcbiAgICAgIGF3YWl0IGFnZW50XG4gICAgICAgIC5wb3N0KCcvYXBpL2NhcnQvYWRkJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCwgcXVhbnRpdHk6IDMgfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICAvLyBSZW1vdmUgaXRlbVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhZ2VudFxuICAgICAgICAuZGVsZXRlKCcvYXBpL2NhcnQvcmVtb3ZlJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0JlKCdJdGVtIHJlbW92ZWQgZnJvbSBjYXJ0Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5jYXJ0SXRlbUNvdW50KS50b0JlKDApO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVqZWN0IG1pc3NpbmcgcHJvZHVjdCBJRCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5kZWxldGUoJy9hcGkvY2FydC9yZW1vdmUnKVxuICAgICAgICAuc2VuZCh7fSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ01JU1NJTkdfUFJPRFVDVF9JRCcpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDQwNCBmb3Igbm9uLWV4aXN0ZW50IGl0ZW0nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZGVsZXRlKCcvYXBpL2NhcnQvcmVtb3ZlJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCB9KVxuICAgICAgICAuZXhwZWN0KDQwNCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnSVRFTV9OT1RfRk9VTkQnKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnREVMRVRFIC9hcGkvY2FydC9jbGVhcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNsZWFyIGVudGlyZSBjYXJ0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYWdlbnQgPSByZXF1ZXN0LmFnZW50KGFwcCk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBtdWx0aXBsZSBpdGVtc1xuICAgICAgYXdhaXQgYWdlbnRcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMiB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgICBcbiAgICAgIC8vIENsZWFyIGNhcnRcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYWdlbnRcbiAgICAgICAgLmRlbGV0ZSgnL2FwaS9jYXJ0L2NsZWFyJylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9CZSgnQ2FydCBjbGVhcmVkJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5jYXJ0SXRlbUNvdW50KS50b0JlKDApO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgd29yayBvbiBlbXB0eSBjYXJ0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmRlbGV0ZSgnL2FwaS9jYXJ0L2NsZWFyJylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuY2FydEl0ZW1Db3VudCkudG9CZSgwKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNwQyxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDMUMsTUFBTUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU1JLE9BQU8sR0FBR0osT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBQy9DLE1BQU1LLFVBQVUsR0FBR0wsT0FBTyxDQUFDLG1C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