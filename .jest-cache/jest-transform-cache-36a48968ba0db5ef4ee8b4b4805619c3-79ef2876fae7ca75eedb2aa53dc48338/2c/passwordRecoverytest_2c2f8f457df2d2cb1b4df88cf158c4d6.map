{"version":3,"names":["request","require","crypto","app","User","connectDB","clearDB","closeDB","describe","agent","testUser","beforeAll","afterAll","beforeEach","create","email","password","firstName","lastName","isActive","test","res","post","send","expect","status","toBe","body","success","message","toContain","updatedUser","findById","_id","passwordResetToken","toBeDefined","passwordResetExpiry","getTime","toBeGreaterThan","Date","now","error","code","resetToken","randomBytes","toString","resetTokenHash","createHash","update","digest","save","newPassword","token","user","isMatch","comparePassword","toBeUndefined","details","msg","loginRes","forgotRes","userWithToken","resetRes"],"sources":["passwordRecovery.test.js"],"sourcesContent":["const request = require('supertest');\nconst crypto = require('crypto');\nconst app = require('../../server');\nconst User = require('../../models/User');\nconst { connectDB, clearDB, closeDB } = require('../setup/testDb');\n\ndescribe('Password Recovery Flow', () => {\n  let agent;\n  let testUser;\n\n  beforeAll(async () => {\n    await connectDB();\n  });\n\n  afterAll(async () => {\n    await closeDB();\n  });\n\n  beforeEach(async () => {\n    await clearDB();\n    agent = request.agent(app);\n    \n    // Create test user\n    testUser = await User.create({\n      email: 'test@example.com',\n      password: 'oldPassword123',\n      firstName: 'Test',\n      lastName: 'User',\n      isActive: true\n    });\n  });\n\n  describe('Forgot Password', () => {\n    test('should send reset email for valid user', async () => {\n      const res = await agent\n        .post('/api/auth/forgot-password')\n        .send({ email: 'test@example.com' });\n      \n      expect(res.status).toBe(200);\n      expect(res.body.success).toBe(true);\n      expect(res.body.message).toContain('If an account exists');\n      \n      // Check that reset token was saved\n      const updatedUser = await User.findById(testUser._id);\n      expect(updatedUser.passwordResetToken).toBeDefined();\n      expect(updatedUser.passwordResetExpiry).toBeDefined();\n      expect(updatedUser.passwordResetExpiry.getTime()).toBeGreaterThan(Date.now());\n    });\n\n    test('should return success even for non-existent email (prevent enumeration)', async () => {\n      const res = await agent\n        .post('/api/auth/forgot-password')\n        .send({ email: 'nonexistent@example.com' });\n      \n      expect(res.status).toBe(200);\n      expect(res.body.success).toBe(true);\n      expect(res.body.message).toContain('If an account exists');\n    });\n\n    test('should validate email format', async () => {\n      const res = await agent\n        .post('/api/auth/forgot-password')\n        .send({ email: 'invalid-email' });\n      \n      expect(res.status).toBe(400);\n      expect(res.body.success).toBe(false);\n      expect(res.body.error.code).toBe('VALIDATION_ERROR');\n    });\n  });\n\n  describe('Reset Password', () => {\n    let resetToken;\n\n    beforeEach(async () => {\n      // Generate reset token for user\n      resetToken = crypto.randomBytes(32).toString('hex');\n      const resetTokenHash = crypto\n        .createHash('sha256')\n        .update(resetToken)\n        .digest('hex');\n      \n      testUser.passwordResetToken = resetTokenHash;\n      testUser.passwordResetExpiry = Date.now() + 3600000; // 1 hour\n      await testUser.save();\n    });\n\n    test('should reset password with valid token', async () => {\n      const newPassword = 'newPassword123';\n      \n      const res = await agent\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken,\n          password: newPassword\n        });\n      \n      expect(res.status).toBe(200);\n      expect(res.body.success).toBe(true);\n      expect(res.body.message).toBe('Password has been reset successfully');\n      expect(res.body.token).toBeDefined(); // Auth token\n      expect(res.body.user).toBeDefined();\n      \n      // Verify password was changed\n      const updatedUser = await User.findById(testUser._id);\n      const isMatch = await updatedUser.comparePassword(newPassword);\n      expect(isMatch).toBe(true);\n      \n      // Verify reset token was cleared\n      expect(updatedUser.passwordResetToken).toBeUndefined();\n      expect(updatedUser.passwordResetExpiry).toBeUndefined();\n    });\n\n    test('should reject invalid reset token', async () => {\n      const res = await agent\n        .post('/api/auth/reset-password')\n        .send({\n          token: 'invalid-token',\n          password: 'newPassword123'\n        });\n      \n      expect(res.status).toBe(400);\n      expect(res.body.success).toBe(false);\n      expect(res.body.error.code).toBe('INVALID_TOKEN');\n    });\n\n    test('should reject expired reset token', async () => {\n      // Set token to expired\n      testUser.passwordResetExpiry = Date.now() - 3600000; // 1 hour ago\n      await testUser.save();\n      \n      const res = await agent\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken,\n          password: 'newPassword123'\n        });\n      \n      expect(res.status).toBe(400);\n      expect(res.body.success).toBe(false);\n      expect(res.body.error.code).toBe('INVALID_TOKEN');\n      expect(res.body.error.message).toContain('invalid or has expired');\n    });\n\n    test('should validate new password', async () => {\n      const res = await agent\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken,\n          password: '123' // Too short\n        });\n      \n      expect(res.status).toBe(400);\n      expect(res.body.success).toBe(false);\n      expect(res.body.error.code).toBe('VALIDATION_ERROR');\n      expect(res.body.error.details[0].msg).toContain('at least 6 characters');\n    });\n\n    test('should allow login with new password after reset', async () => {\n      // Reset password\n      await agent\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken,\n          password: 'newPassword123'\n        });\n      \n      // Try to login with new password\n      const loginRes = await agent\n        .post('/api/auth/login')\n        .send({\n          email: 'test@example.com',\n          password: 'newPassword123'\n        });\n      \n      expect(loginRes.status).toBe(200);\n      expect(loginRes.body.success).toBe(true);\n      expect(loginRes.body.token).toBeDefined();\n    });\n  });\n\n  describe('Complete Flow', () => {\n    test('should handle full password recovery flow', async () => {\n      // 1. Request password reset\n      const forgotRes = await agent\n        .post('/api/auth/forgot-password')\n        .send({ email: 'test@example.com' });\n      \n      expect(forgotRes.status).toBe(200);\n      \n      // 2. Get reset token from database (in real app, this would come from email)\n      const userWithToken = await User.findById(testUser._id);\n      expect(userWithToken.passwordResetToken).toBeDefined();\n      \n      // Simulate getting the unhashed token from email\n      // In real implementation, we'd extract this from the email sent\n      const resetToken = 'simulated-token';\n      const resetTokenHash = crypto\n        .createHash('sha256')\n        .update(resetToken)\n        .digest('hex');\n      \n      userWithToken.passwordResetToken = resetTokenHash;\n      await userWithToken.save();\n      \n      // 3. Reset password with token\n      const resetRes = await agent\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken,\n          password: 'brandNewPassword123'\n        });\n      \n      expect(resetRes.status).toBe(200);\n      expect(resetRes.body.success).toBe(true);\n      \n      // 4. Verify can login with new password\n      const loginRes = await agent\n        .post('/api/auth/login')\n        .send({\n          email: 'test@example.com',\n          password: 'brandNewPassword123'\n        });\n      \n      expect(loginRes.status).toBe(200);\n      expect(loginRes.body.success).toBe(true);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}