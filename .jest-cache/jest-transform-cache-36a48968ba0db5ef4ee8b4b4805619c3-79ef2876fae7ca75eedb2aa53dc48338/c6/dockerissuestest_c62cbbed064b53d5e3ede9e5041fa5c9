9c9c806f66fc35cdb270d6c9850af8aa
const request = require('supertest');
const app = require('../server');
const User = require('../models/User');
const Product = require('../models/Product');
const mongoose = require('mongoose');
describe('Docker Environment Issues - Bug Reproduction', () => {
  let testProduct;
  beforeAll(async () => {
    // Connect to test database
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/holistic-store-test';
    await mongoose.connect(mongoUri);

    // Clear test data
    await User.deleteMany({});
    await Product.deleteMany({});

    // Create test product
    testProduct = await Product.create({
      name: 'Test Product',
      description: 'Test product for Docker testing',
      price: 19.99,
      category: 'test',
      stock: 100,
      image: '/images/test-product.jpg',
      isActive: true
    });
  });
  afterAll(async () => {
    await mongoose.connection.close();
  });
  describe('Issue #1: Products not displaying on frontend', () => {
    test('GET /api/products should return products list', async () => {
      const response = await request(app).get('/api/products').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.products).toBeInstanceOf(Array);
      expect(response.body.data.products.length).toBeGreaterThan(0);
      expect(response.body.data.products[0]).toHaveProperty('name');
      expect(response.body.data.products[0]).toHaveProperty('price');
    });
    test('Frontend API calls should work with proxy configuration', async () => {
      // This test simulates the frontend making an API call
      // In Docker, the frontend nginx needs to proxy /api calls to backend
      const response = await request(app).get('/api/products').set('Origin', 'http://localhost:3001').set('Referer', 'http://localhost:3001/products').expect(200);

      // Check CORS headers are set correctly
      expect(response.headers['access-control-allow-origin']).toBe('http://localhost:3001');
      expect(response.headers['access-control-allow-credentials']).toBe('true');
    });
  });
  describe('Issue #2: User login not working', () => {
    const testUser = {
      email: 'docker-test@example.com',
      password: 'Password123!',
      firstName: 'Docker',
      lastName: 'Test'
    };
    beforeEach(async () => {
      await User.deleteMany({
        email: testUser.email
      });
    });
    test('POST /api/auth/register should create user and set httpOnly cookie', async () => {
      const response = await request(app).post('/api/auth/register').send(testUser).expect(201);
      expect(response.body.success).toBe(true);
      expect(response.body.data.user).toHaveProperty('email', testUser.email);

      // Check for httpOnly cookie
      const cookies = response.headers['set-cookie'];
      expect(cookies).toBeDefined();
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      expect(tokenCookie).toBeDefined();
      expect(tokenCookie).toContain('HttpOnly');
      expect(tokenCookie).toContain('Path=/');
    });
    test('POST /api/auth/login should authenticate user and set httpOnly cookie', async () => {
      // First register the user
      await User.create({
        email: testUser.email,
        password: testUser.password,
        firstName: testUser.firstName,
        lastName: testUser.lastName
      });
      const response = await request(app).post('/api/auth/login').send({
        email: testUser.email,
        password: testUser.password
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.user).toHaveProperty('email', testUser.email);

      // Check for httpOnly cookie
      const cookies = response.headers['set-cookie'];
      expect(cookies).toBeDefined();
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      expect(tokenCookie).toBeDefined();
      expect(tokenCookie).toContain('HttpOnly');
    });
    test('Protected routes should work with httpOnly cookie authentication', async () => {
      // Register and login to get cookie
      const loginResponse = await request(app).post('/api/auth/register').send(testUser);
      const cookies = loginResponse.headers['set-cookie'];

      // Try to access protected route with cookie
      const profileResponse = await request(app).get('/api/auth/profile').set('Cookie', cookies).expect(200);
      expect(profileResponse.body.success).toBe(true);
      expect(profileResponse.body.data.user.email).toBe(testUser.email);
    });
  });
  describe('Issue #3: Frontend-Backend communication in Docker', () => {
    test('CORS should allow frontend origin', async () => {
      const response = await request(app).options('/api/products').set('Origin', 'http://localhost:3001').set('Access-Control-Request-Method', 'GET').expect(204);
      expect(response.headers['access-control-allow-origin']).toBe('http://localhost:3001');
      expect(response.headers['access-control-allow-credentials']).toBe('true');
    });
    test('API should handle requests without VITE_API_URL', async () => {
      // When frontend uses relative URLs, they should work
      const response = await request(app).get('/api/products').set('Host', 'localhost:5001').expect(200);
      expect(response.body.success).toBe(true);
    });
    test('CSRF token endpoint should work', async () => {
      const response = await request(app).get('/api/csrf-token').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body).toHaveProperty('csrfToken');
    });
  });
  describe('Docker nginx proxy configuration issues', () => {
    test('API endpoints should be accessible through correct paths', async () => {
      const endpoints = ['/api/products', '/api/csrf-token', '/health'];
      for (const endpoint of endpoints) {
        const response = await request(app).get(endpoint).expect(200);
        expect(response.body).toBeDefined();
      }
    });
    test('Static image paths should be configured correctly', async () => {
      // In Docker, /images should be served by backend
      const response = await request(app).get('/images/test.jpg').expect(res => {
        // Should either return 200 (if exists) or 404 (if not exists)
        // but not 500 or other errors
        expect([200, 404]).toContain(res.status);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImFwcCIsIlVzZXIiLCJQcm9kdWN0IiwibW9uZ29vc2UiLCJkZXNjcmliZSIsInRlc3RQcm9kdWN0IiwiYmVmb3JlQWxsIiwibW9uZ29VcmkiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJjb25uZWN0IiwiZGVsZXRlTWFueSIsImNyZWF0ZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInByaWNlIiwiY2F0ZWdvcnkiLCJzdG9jayIsImltYWdlIiwiaXNBY3RpdmUiLCJhZnRlckFsbCIsImNvbm5lY3Rpb24iLCJjbG9zZSIsInRlc3QiLCJyZXNwb25zZSIsImdldCIsImV4cGVjdCIsImJvZHkiLCJzdWNjZXNzIiwidG9CZSIsImRhdGEiLCJwcm9kdWN0cyIsInRvQmVJbnN0YW5jZU9mIiwiQXJyYXkiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iLCJ0b0hhdmVQcm9wZXJ0eSIsInNldCIsImhlYWRlcnMiLCJ0ZXN0VXNlciIsImVtYWlsIiwicGFzc3dvcmQiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImJlZm9yZUVhY2giLCJwb3N0Iiwic2VuZCIsInVzZXIiLCJjb29raWVzIiwidG9CZURlZmluZWQiLCJ0b2tlbkNvb2tpZSIsImZpbmQiLCJjb29raWUiLCJzdGFydHNXaXRoIiwidG9Db250YWluIiwibG9naW5SZXNwb25zZSIsInByb2ZpbGVSZXNwb25zZSIsIm9wdGlvbnMiLCJlbmRwb2ludHMiLCJlbmRwb2ludCIsInJlcyIsInN0YXR1cyJdLCJzb3VyY2VzIjpbImRvY2tlci1pc3N1ZXMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBhcHAgPSByZXF1aXJlKCcuLi9zZXJ2ZXInKTtcbmNvbnN0IFVzZXIgPSByZXF1aXJlKCcuLi9tb2RlbHMvVXNlcicpO1xuY29uc3QgUHJvZHVjdCA9IHJlcXVpcmUoJy4uL21vZGVscy9Qcm9kdWN0Jyk7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5cbmRlc2NyaWJlKCdEb2NrZXIgRW52aXJvbm1lbnQgSXNzdWVzIC0gQnVnIFJlcHJvZHVjdGlvbicsICgpID0+IHtcbiAgbGV0IHRlc3RQcm9kdWN0O1xuICBcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICAvLyBDb25uZWN0IHRvIHRlc3QgZGF0YWJhc2VcbiAgICBjb25zdCBtb25nb1VyaSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJIHx8ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L2hvbGlzdGljLXN0b3JlLXRlc3QnO1xuICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3QobW9uZ29VcmkpO1xuICAgIFxuICAgIC8vIENsZWFyIHRlc3QgZGF0YVxuICAgIGF3YWl0IFVzZXIuZGVsZXRlTWFueSh7fSk7XG4gICAgYXdhaXQgUHJvZHVjdC5kZWxldGVNYW55KHt9KTtcbiAgICBcbiAgICAvLyBDcmVhdGUgdGVzdCBwcm9kdWN0XG4gICAgdGVzdFByb2R1Y3QgPSBhd2FpdCBQcm9kdWN0LmNyZWF0ZSh7XG4gICAgICBuYW1lOiAnVGVzdCBQcm9kdWN0JyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGVzdCBwcm9kdWN0IGZvciBEb2NrZXIgdGVzdGluZycsXG4gICAgICBwcmljZTogMTkuOTksXG4gICAgICBjYXRlZ29yeTogJ3Rlc3QnLFxuICAgICAgc3RvY2s6IDEwMCxcbiAgICAgIGltYWdlOiAnL2ltYWdlcy90ZXN0LXByb2R1Y3QuanBnJyxcbiAgICAgIGlzQWN0aXZlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0aW9uLmNsb3NlKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJc3N1ZSAjMTogUHJvZHVjdHMgbm90IGRpc3BsYXlpbmcgb24gZnJvbnRlbmQnLCAoKSA9PiB7XG4gICAgdGVzdCgnR0VUIC9hcGkvcHJvZHVjdHMgc2hvdWxkIHJldHVybiBwcm9kdWN0cyBsaXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS9wcm9kdWN0cycpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEucHJvZHVjdHMpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEucHJvZHVjdHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLnByb2R1Y3RzWzBdKS50b0hhdmVQcm9wZXJ0eSgnbmFtZScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5wcm9kdWN0c1swXSkudG9IYXZlUHJvcGVydHkoJ3ByaWNlJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdGcm9udGVuZCBBUEkgY2FsbHMgc2hvdWxkIHdvcmsgd2l0aCBwcm94eSBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVGhpcyB0ZXN0IHNpbXVsYXRlcyB0aGUgZnJvbnRlbmQgbWFraW5nIGFuIEFQSSBjYWxsXG4gICAgICAvLyBJbiBEb2NrZXIsIHRoZSBmcm9udGVuZCBuZ2lueCBuZWVkcyB0byBwcm94eSAvYXBpIGNhbGxzIHRvIGJhY2tlbmRcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvcHJvZHVjdHMnKVxuICAgICAgICAuc2V0KCdPcmlnaW4nLCAnaHR0cDovL2xvY2FsaG9zdDozMDAxJylcbiAgICAgICAgLnNldCgnUmVmZXJlcicsICdodHRwOi8vbG9jYWxob3N0OjMwMDEvcHJvZHVjdHMnKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIC8vIENoZWNrIENPUlMgaGVhZGVycyBhcmUgc2V0IGNvcnJlY3RseVxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlcnNbJ2FjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpbiddKS50b0JlKCdodHRwOi8vbG9jYWxob3N0OjMwMDEnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzWydhY2Nlc3MtY29udHJvbC1hbGxvdy1jcmVkZW50aWFscyddKS50b0JlKCd0cnVlJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJc3N1ZSAjMjogVXNlciBsb2dpbiBub3Qgd29ya2luZycsICgpID0+IHtcbiAgICBjb25zdCB0ZXN0VXNlciA9IHtcbiAgICAgIGVtYWlsOiAnZG9ja2VyLXRlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICdQYXNzd29yZDEyMyEnLFxuICAgICAgZmlyc3ROYW1lOiAnRG9ja2VyJyxcbiAgICAgIGxhc3ROYW1lOiAnVGVzdCdcbiAgICB9O1xuXG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBVc2VyLmRlbGV0ZU1hbnkoeyBlbWFpbDogdGVzdFVzZXIuZW1haWwgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdQT1NUIC9hcGkvYXV0aC9yZWdpc3RlciBzaG91bGQgY3JlYXRlIHVzZXIgYW5kIHNldCBodHRwT25seSBjb29raWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQodGVzdFVzZXIpXG4gICAgICAgIC5leHBlY3QoMjAxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEudXNlcikudG9IYXZlUHJvcGVydHkoJ2VtYWlsJywgdGVzdFVzZXIuZW1haWwpO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBmb3IgaHR0cE9ubHkgY29va2llXG4gICAgICBjb25zdCBjb29raWVzID0gcmVzcG9uc2UuaGVhZGVyc1snc2V0LWNvb2tpZSddO1xuICAgICAgZXhwZWN0KGNvb2tpZXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBjb25zdCB0b2tlbkNvb2tpZSA9IGNvb2tpZXMuZmluZChjb29raWUgPT4gY29va2llLnN0YXJ0c1dpdGgoJ3Rva2VuPScpKTtcbiAgICAgIGV4cGVjdCh0b2tlbkNvb2tpZSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdCh0b2tlbkNvb2tpZSkudG9Db250YWluKCdIdHRwT25seScpO1xuICAgICAgZXhwZWN0KHRva2VuQ29va2llKS50b0NvbnRhaW4oJ1BhdGg9LycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnUE9TVCAvYXBpL2F1dGgvbG9naW4gc2hvdWxkIGF1dGhlbnRpY2F0ZSB1c2VyIGFuZCBzZXQgaHR0cE9ubHkgY29va2llJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gRmlyc3QgcmVnaXN0ZXIgdGhlIHVzZXJcbiAgICAgIGF3YWl0IFVzZXIuY3JlYXRlKHtcbiAgICAgICAgZW1haWw6IHRlc3RVc2VyLmVtYWlsLFxuICAgICAgICBwYXNzd29yZDogdGVzdFVzZXIucGFzc3dvcmQsXG4gICAgICAgIGZpcnN0TmFtZTogdGVzdFVzZXIuZmlyc3ROYW1lLFxuICAgICAgICBsYXN0TmFtZTogdGVzdFVzZXIubGFzdE5hbWVcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL2xvZ2luJylcbiAgICAgICAgLnNlbmQoe1xuICAgICAgICAgIGVtYWlsOiB0ZXN0VXNlci5lbWFpbCxcbiAgICAgICAgICBwYXNzd29yZDogdGVzdFVzZXIucGFzc3dvcmRcbiAgICAgICAgfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS51c2VyKS50b0hhdmVQcm9wZXJ0eSgnZW1haWwnLCB0ZXN0VXNlci5lbWFpbCk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGZvciBodHRwT25seSBjb29raWVcbiAgICAgIGNvbnN0IGNvb2tpZXMgPSByZXNwb25zZS5oZWFkZXJzWydzZXQtY29va2llJ107XG4gICAgICBleHBlY3QoY29va2llcykudG9CZURlZmluZWQoKTtcbiAgICAgIGNvbnN0IHRva2VuQ29va2llID0gY29va2llcy5maW5kKGNvb2tpZSA9PiBjb29raWUuc3RhcnRzV2l0aCgndG9rZW49JykpO1xuICAgICAgZXhwZWN0KHRva2VuQ29va2llKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHRva2VuQ29va2llKS50b0NvbnRhaW4oJ0h0dHBPbmx5Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdQcm90ZWN0ZWQgcm91dGVzIHNob3VsZCB3b3JrIHdpdGggaHR0cE9ubHkgY29va2llIGF1dGhlbnRpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gUmVnaXN0ZXIgYW5kIGxvZ2luIHRvIGdldCBjb29raWVcbiAgICAgIGNvbnN0IGxvZ2luUmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9yZWdpc3RlcicpXG4gICAgICAgIC5zZW5kKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgY29va2llcyA9IGxvZ2luUmVzcG9uc2UuaGVhZGVyc1snc2V0LWNvb2tpZSddO1xuICAgICAgXG4gICAgICAvLyBUcnkgdG8gYWNjZXNzIHByb3RlY3RlZCByb3V0ZSB3aXRoIGNvb2tpZVxuICAgICAgY29uc3QgcHJvZmlsZVJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvYXV0aC9wcm9maWxlJylcbiAgICAgICAgLnNldCgnQ29va2llJywgY29va2llcylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3QocHJvZmlsZVJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChwcm9maWxlUmVzcG9uc2UuYm9keS5kYXRhLnVzZXIuZW1haWwpLnRvQmUodGVzdFVzZXIuZW1haWwpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSXNzdWUgIzM6IEZyb250ZW5kLUJhY2tlbmQgY29tbXVuaWNhdGlvbiBpbiBEb2NrZXInLCAoKSA9PiB7XG4gICAgdGVzdCgnQ09SUyBzaG91bGQgYWxsb3cgZnJvbnRlbmQgb3JpZ2luJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLm9wdGlvbnMoJy9hcGkvcHJvZHVjdHMnKVxuICAgICAgICAuc2V0KCdPcmlnaW4nLCAnaHR0cDovL2xvY2FsaG9zdDozMDAxJylcbiAgICAgICAgLnNldCgnQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1NZXRob2QnLCAnR0VUJylcbiAgICAgICAgLmV4cGVjdCgyMDQpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuaGVhZGVyc1snYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luJ10pLnRvQmUoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlcnNbJ2FjY2Vzcy1jb250cm9sLWFsbG93LWNyZWRlbnRpYWxzJ10pLnRvQmUoJ3RydWUnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0FQSSBzaG91bGQgaGFuZGxlIHJlcXVlc3RzIHdpdGhvdXQgVklURV9BUElfVVJMJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gV2hlbiBmcm9udGVuZCB1c2VzIHJlbGF0aXZlIFVSTHMsIHRoZXkgc2hvdWxkIHdvcmtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvcHJvZHVjdHMnKVxuICAgICAgICAuc2V0KCdIb3N0JywgJ2xvY2FsaG9zdDo1MDAxJylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnQ1NSRiB0b2tlbiBlbmRwb2ludCBzaG91bGQgd29yaycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvY3NyZi10b2tlbicpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnY3NyZlRva2VuJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEb2NrZXIgbmdpbnggcHJveHkgY29uZmlndXJhdGlvbiBpc3N1ZXMnLCAoKSA9PiB7XG4gICAgdGVzdCgnQVBJIGVuZHBvaW50cyBzaG91bGQgYmUgYWNjZXNzaWJsZSB0aHJvdWdoIGNvcnJlY3QgcGF0aHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBlbmRwb2ludHMgPSBbXG4gICAgICAgICcvYXBpL3Byb2R1Y3RzJyxcbiAgICAgICAgJy9hcGkvY3NyZi10b2tlbicsXG4gICAgICAgICcvaGVhbHRoJ1xuICAgICAgXTtcblxuICAgICAgZm9yIChjb25zdCBlbmRwb2ludCBvZiBlbmRwb2ludHMpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgICAuZ2V0KGVuZHBvaW50KVxuICAgICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9CZURlZmluZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRlc3QoJ1N0YXRpYyBpbWFnZSBwYXRocyBzaG91bGQgYmUgY29uZmlndXJlZCBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBJbiBEb2NrZXIsIC9pbWFnZXMgc2hvdWxkIGJlIHNlcnZlZCBieSBiYWNrZW5kXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvaW1hZ2VzL3Rlc3QuanBnJylcbiAgICAgICAgLmV4cGVjdCgocmVzKSA9PiB7XG4gICAgICAgICAgLy8gU2hvdWxkIGVpdGhlciByZXR1cm4gMjAwIChpZiBleGlzdHMpIG9yIDQwNCAoaWYgbm90IGV4aXN0cylcbiAgICAgICAgICAvLyBidXQgbm90IDUwMCBvciBvdGhlciBlcnJvcnNcbiAgICAgICAgICBleHBlY3QoWzIwMCwgNDA0XSkudG9Db250YWluKHJlcy5zdGF0dXMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNwQyxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDaEMsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFDdEMsTUFBTUcsT0FBTyxHQUFHSCxPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDNUMsTUFBTUksUUFBUSxHQUFHSixPQUFPLENBQUMsVUFBVSxDQUFDO0FBRXBDSyxRQUFRLENBQUMsOENBQThDLEVBQUUsTUFBTTtFQUM3RCxJQUFJQyxXQUFXO0VBRWZDLFNBQVMsQ0FBQyxZQUFZO0lBQ3BCO0lBQ0EsTUFBTUMsUUFBUSxHQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBVyxJQUFJLCtDQUErQztJQUMzRixNQUFNUCxRQUFRLENBQUNRLE9BQU8sQ0FBQ0osUUFBUSxDQUFDOztJQUVoQztJQUNBLE1BQU1OLElBQUksQ0FBQ1csVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU1WLE9BQU8sQ0FBQ1UsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUU1QjtJQUNBUCxXQUFXLEdBQUcsTUFBTUgsT0FBTyxDQUFDVyxNQUFNLENBQUM7TUFDakNDLElBQUksRUFBRSxjQUFjO01BQ3BCQyxXQUFXLEVBQUUsaUNBQWlDO01BQzlDQyxLQUFLLEVBQUUsS0FBSztNQUNaQyxRQUFRLEVBQUUsTUFBTTtNQUNoQkMsS0FBSyxFQUFFLEdBQUc7TUFDVkMsS0FBSyxFQUFFLDBCQUEwQjtNQUNqQ0MsUUFBUSxFQUFFO0lBQ1osQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZDLFFBQVEsQ0FBQyxZQUFZO0lBQ25CLE1BQU1sQixRQUFRLENBQUNtQixVQUFVLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DLENBQUMsQ0FBQztFQUVGbkIsUUFBUSxDQUFDLCtDQUErQyxFQUFFLE1BQU07SUFDOURvQixJQUFJLENBQUMsK0NBQStDLEVBQUUsWUFBWTtNQUNoRSxNQUFNQyxRQUFRLEdBQUcsTUFBTTNCLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDLENBQ2hDMEIsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUNwQkMsTUFBTSxDQUFDLEdBQUcsQ0FBQztNQUVkQSxNQUFNLENBQUNGLFFBQVEsQ0FBQ0csSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztNQUN4Q0gsTUFBTSxDQUFDRixRQUFRLENBQUNHLElBQUksQ0FBQ0csSUFBSSxDQUFDQyxRQUFRLENBQUMsQ0FBQ0MsY0FBYyxDQUFDQyxLQUFLLENBQUM7TUFDekRQLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDRyxJQUFJLENBQUNHLElBQUksQ0FBQ0MsUUFBUSxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsZUFBZSxDQUFDLENBQUMsQ0FBQztNQUM3RFQsTUFBTSxDQUFDRixRQUFRLENBQUNHLElBQUksQ0FBQ0csSUFBSSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0ssY0FBYyxDQUFDLE1BQU0sQ0FBQztNQUM3RFYsTUFBTSxDQUFDRixRQUFRLENBQUNHLElBQUksQ0FBQ0csSUFBSSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0ssY0FBYyxDQUFDLE9BQU8sQ0FBQztJQUNoRSxDQUFDLENBQUM7SUFFRmIsSUFBSSxDQUFDLHlEQUF5RCxFQUFFLFlBQVk7TUFDMUU7TUFDQTtNQUNBLE1BQU1DLFFBQVEsR0FBRyxNQUFNM0IsT0FBTyxDQUFDRSxHQUFHLENBQUMsQ0FDaEMwQixHQUFHLENBQUMsZUFBZSxDQUFDLENBQ3BCWSxHQUFHLENBQUMsUUFBUSxFQUFFLHVCQUF1QixDQUFDLENBQ3RDQSxHQUFHLENBQUMsU0FBUyxFQUFFLGdDQUFnQyxDQUFDLENBQ2hEWCxNQUFNLENBQUMsR0FBRyxDQUFDOztNQUVkO01BQ0FBLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDYyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDVCxJQUFJLENBQUMsdUJBQXVCLENBQUM7TUFDckZILE1BQU0sQ0FBQ0YsUUFBUSxDQUFDYyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNFLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGMUIsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLE1BQU07SUFDakQsTUFBTW9DLFFBQVEsR0FBRztNQUNmQyxLQUFLLEVBQUUseUJBQXlCO01BQ2hDQyxRQUFRLEVBQUUsY0FBYztNQUN4QkMsU0FBUyxFQUFFLFFBQVE7TUFDbkJDLFFBQVEsRUFBRTtJQUNaLENBQUM7SUFFREMsVUFBVSxDQUFDLFlBQVk7TUFDckIsTUFBTTVDLElBQUksQ0FBQ1csVUFBVSxDQUFDO1FBQUU2QixLQUFLLEVBQUVELFFBQVEsQ0FBQ0M7TUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDO0lBRUZqQixJQUFJLENBQUMsb0VBQW9FLEVBQUUsWUFBWTtNQUNyRixNQUFNQyxRQUFRLEdBQUcsTUFBTTNCLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDLENBQ2hDOEMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQzFCQyxJQUFJLENBQUNQLFFBQVEsQ0FBQyxDQUNkYixNQUFNLENBQUMsR0FBRyxDQUFDO01BRWRBLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDRyxJQUFJLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO01BQ3hDSCxNQUFNLENBQUNGLFFBQVEsQ0FBQ0csSUFBSSxDQUFDRyxJQUFJLENBQUNpQixJQUFJLENBQUMsQ0FBQ1gsY0FBYyxDQUFDLE9BQU8sRUFBRUcsUUFBUSxDQUFDQyxLQUFLLENBQUM7O01BRXZFO01BQ0EsTUFBTVEsT0FBTyxHQUFHeEIsUUFBUSxDQUFDYyxPQUFPLENBQUMsWUFBWSxDQUFDO01BQzlDWixNQUFNLENBQUNzQixPQUFPLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7TUFDN0IsTUFBTUMsV0FBVyxHQUFHRixPQUFPLENBQUNHLElBQUksQ0FBQ0MsTUFBTSxJQUFJQSxNQUFNLENBQUNDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztNQUN2RTNCLE1BQU0sQ0FBQ3dCLFdBQVcsQ0FBQyxDQUFDRCxXQUFXLENBQUMsQ0FBQztNQUNqQ3ZCLE1BQU0sQ0FBQ3dCLFdBQVcsQ0FBQyxDQUFDSSxTQUFTLENBQUMsVUFBVSxDQUFDO01BQ3pDNUIsTUFBTSxDQUFDd0IsV0FBVyxDQUFDLENBQUNJLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDekMsQ0FBQyxDQUFDO0lBRUYvQixJQUFJLENBQUMsdUVBQXVFLEVBQUUsWUFBWTtNQUN4RjtNQUNBLE1BQU12QixJQUFJLENBQUNZLE1BQU0sQ0FBQztRQUNoQjRCLEtBQUssRUFBRUQsUUFBUSxDQUFDQyxLQUFLO1FBQ3JCQyxRQUFRLEVBQUVGLFFBQVEsQ0FBQ0UsUUFBUTtRQUMzQkMsU0FBUyxFQUFFSCxRQUFRLENBQUNHLFNBQVM7UUFDN0JDLFFBQVEsRUFBRUosUUFBUSxDQUFDSTtNQUNyQixDQUFDLENBQUM7TUFFRixNQUFNbkIsUUFBUSxHQUFHLE1BQU0zQixPQUFPLENBQUNFLEdBQUcsQ0FBQyxDQUNoQzhDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUN2QkMsSUFBSSxDQUFDO1FBQ0pOLEtBQUssRUFBRUQsUUFBUSxDQUFDQyxLQUFLO1FBQ3JCQyxRQUFRLEVBQUVGLFFBQVEsQ0FBQ0U7TUFDckIsQ0FBQyxDQUFDLENBQ0RmLE1BQU0sQ0FBQyxHQUFHLENBQUM7TUFFZEEsTUFBTSxDQUFDRixRQUFRLENBQUNHLElBQUksQ0FBQ0MsT0FBTyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDeENILE1BQU0sQ0FBQ0YsUUFBUSxDQUFDRyxJQUFJLENBQUNHLElBQUksQ0FBQ2lCLElBQUksQ0FBQyxDQUFDWCxjQUFjLENBQUMsT0FBTyxFQUFFRyxRQUFRLENBQUNDLEtBQUssQ0FBQzs7TUFFdkU7TUFDQSxNQUFNUSxPQUFPLEdBQUd4QixRQUFRLENBQUNjLE9BQU8sQ0FBQyxZQUFZLENBQUM7TUFDOUNaLE1BQU0sQ0FBQ3NCLE9BQU8sQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztNQUM3QixNQUFNQyxXQUFXLEdBQUdGLE9BQU8sQ0FBQ0csSUFBSSxDQUFDQyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO01BQ3ZFM0IsTUFBTSxDQUFDd0IsV0FBVyxDQUFDLENBQUNELFdBQVcsQ0FBQyxDQUFDO01BQ2pDdkIsTUFBTSxDQUFDd0IsV0FBVyxDQUFDLENBQUNJLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0lBRUYvQixJQUFJLENBQUMsa0VBQWtFLEVBQUUsWUFBWTtNQUNuRjtNQUNBLE1BQU1nQyxhQUFhLEdBQUcsTUFBTTFELE9BQU8sQ0FBQ0UsR0FBRyxDQUFDLENBQ3JDOEMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQzFCQyxJQUFJLENBQUNQLFFBQVEsQ0FBQztNQUVqQixNQUFNUyxPQUFPLEdBQUdPLGFBQWEsQ0FBQ2pCLE9BQU8sQ0FBQyxZQUFZLENBQUM7O01BRW5EO01BQ0EsTUFBTWtCLGVBQWUsR0FBRyxNQUFNM0QsT0FBTyxDQUFDRSxHQUFHLENBQUMsQ0FDdkMwQixHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FDeEJZLEdBQUcsQ0FBQyxRQUFRLEVBQUVXLE9BQU8sQ0FBQyxDQUN0QnRCLE1BQU0sQ0FBQyxHQUFHLENBQUM7TUFFZEEsTUFBTSxDQUFDOEIsZUFBZSxDQUFDN0IsSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztNQUMvQ0gsTUFBTSxDQUFDOEIsZUFBZSxDQUFDN0IsSUFBSSxDQUFDRyxJQUFJLENBQUNpQixJQUFJLENBQUNQLEtBQUssQ0FBQyxDQUFDWCxJQUFJLENBQUNVLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDO0lBQ25FLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGckMsUUFBUSxDQUFDLG9EQUFvRCxFQUFFLE1BQU07SUFDbkVvQixJQUFJLENBQUMsbUNBQW1DLEVBQUUsWUFBWTtNQUNwRCxNQUFNQyxRQUFRLEdBQUcsTUFBTTNCLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDLENBQ2hDMEQsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUN4QnBCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsQ0FDdENBLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLENBQUMsQ0FDM0NYLE1BQU0sQ0FBQyxHQUFHLENBQUM7TUFFZEEsTUFBTSxDQUFDRixRQUFRLENBQUNjLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUNULElBQUksQ0FBQyx1QkFBdUIsQ0FBQztNQUNyRkgsTUFBTSxDQUFDRixRQUFRLENBQUNjLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUNULElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0UsQ0FBQyxDQUFDO0lBRUZOLElBQUksQ0FBQyxpREFBaUQsRUFBRSxZQUFZO01BQ2xFO01BQ0EsTUFBTUMsUUFBUSxHQUFHLE1BQU0zQixPQUFPLENBQUNFLEdBQUcsQ0FBQyxDQUNoQzBCLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FDcEJZLEdBQUcsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FDN0JYLE1BQU0sQ0FBQyxHQUFHLENBQUM7TUFFZEEsTUFBTSxDQUFDRixRQUFRLENBQUNHLElBQUksQ0FBQ0MsT0FBTyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0lBRUZOLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxZQUFZO01BQ2xELE1BQU1DLFFBQVEsR0FBRyxNQUFNM0IsT0FBTyxDQUFDRSxHQUFHLENBQUMsQ0FDaEMwQixHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FDdEJDLE1BQU0sQ0FBQyxHQUFHLENBQUM7TUFFZEEsTUFBTSxDQUFDRixRQUFRLENBQUNHLElBQUksQ0FBQ0MsT0FBTyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDeENILE1BQU0sQ0FBQ0YsUUFBUSxDQUFDRyxJQUFJLENBQUMsQ0FBQ1MsY0FBYyxDQUFDLFdBQVcsQ0FBQztJQUNuRCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRmpDLFFBQVEsQ0FBQyx5Q0FBeUMsRUFBRSxNQUFNO0lBQ3hEb0IsSUFBSSxDQUFDLDBEQUEwRCxFQUFFLFlBQVk7TUFDM0UsTUFBTW1DLFNBQVMsR0FBRyxDQUNoQixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLFNBQVMsQ0FDVjtNQUVELEtBQUssTUFBTUMsUUFBUSxJQUFJRCxTQUFTLEVBQUU7UUFDaEMsTUFBTWxDLFFBQVEsR0FBRyxNQUFNM0IsT0FBTyxDQUFDRSxHQUFHLENBQUMsQ0FDaEMwQixHQUFHLENBQUNrQyxRQUFRLENBQUMsQ0FDYmpDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFZEEsTUFBTSxDQUFDRixRQUFRLENBQUNHLElBQUksQ0FBQyxDQUFDc0IsV0FBVyxDQUFDLENBQUM7TUFDckM7SUFDRixDQUFDLENBQUM7SUFFRjFCLElBQUksQ0FBQyxtREFBbUQsRUFBRSxZQUFZO01BQ3BFO01BQ0EsTUFBTUMsUUFBUSxHQUFHLE1BQU0zQixPQUFPLENBQUNFLEdBQUcsQ0FBQyxDQUNoQzBCLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUN2QkMsTUFBTSxDQUFFa0MsR0FBRyxJQUFLO1FBQ2Y7UUFDQTtRQUNBbEMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM0QixTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDO01BQzFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==