fca0606e7f869d20b4fb815cb064824e
const request = require('supertest');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../../models/User');
const {
  createTestApp
} = require('../helpers/testApp');
describe('Auth Routes', () => {
  let app;
  beforeAll(() => {
    app = createTestApp();
  });
  beforeEach(async () => {
    // Clear users before each test
    await User.deleteMany({});
  });
  describe('POST /api/auth/register', () => {
    const validUserData = {
      email: 'test@example.com',
      password: 'password123',
      firstName: 'Test',
      lastName: 'User'
    };
    it('should register a new user successfully', async () => {
      const response = await request(app).post('/api/auth/register').send(validUserData).expect(201);
      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('user');
      expect(response.body.data).toHaveProperty('token');
      expect(response.body.data.user.email).toBe(validUserData.email);
      expect(response.body.data.user).not.toHaveProperty('password');
    });
    it('should validate required fields', async () => {
      const response = await request(app).post('/api/auth/register').send({}).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should validate email format', async () => {
      const response = await request(app).post('/api/auth/register').send({
        ...validUserData,
        email: 'invalid-email'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should validate password length', async () => {
      const response = await request(app).post('/api/auth/register').send({
        ...validUserData,
        password: '123'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should prevent duplicate email registration', async () => {
      // First registration
      await request(app).post('/api/auth/register').send(validUserData).expect(201);

      // Second registration with same email
      const response = await request(app).post('/api/auth/register').send(validUserData).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('DUPLICATE_FIELD');
    });
  });
  describe('POST /api/auth/login', () => {
    let testUser;
    beforeEach(async () => {
      // Create test user
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });
    });
    it('should login with valid credentials', async () => {
      const response = await request(app).post('/api/auth/login').send({
        email: 'test@example.com',
        password: 'password123'
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('user');
      expect(response.body.data).toHaveProperty('token');
      expect(response.body.data.user.email).toBe('test@example.com');
      expect(response.body.data.user).not.toHaveProperty('password');
    });
    it('should reject invalid email', async () => {
      const response = await request(app).post('/api/auth/login').send({
        email: 'wrong@example.com',
        password: 'password123'
      }).expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_CREDENTIALS');
    });
    it('should reject invalid password', async () => {
      const response = await request(app).post('/api/auth/login').send({
        email: 'test@example.com',
        password: 'wrongpassword'
      }).expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_CREDENTIALS');
    });
    it('should validate required fields', async () => {
      const response = await request(app).post('/api/auth/login').send({}).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
  });
  describe('GET /api/auth/profile', () => {
    let testUser;
    let authToken;
    beforeEach(async () => {
      // Create test user
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });

      // Generate auth token
      authToken = jwt.sign({
        userId: testUser._id
      }, process.env.JWT_SECRET, {
        expiresIn: '1h'
      });
    });
    it('should get user profile with valid token', async () => {
      const response = await request(app).get('/api/auth/profile').set('Authorization', `Bearer ${authToken}`).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.user.email).toBe('test@example.com');
      expect(response.body.data.user).not.toHaveProperty('password');
    });
    it('should reject request without token', async () => {
      const response = await request(app).get('/api/auth/profile').expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('NO_TOKEN');
    });
    it('should reject request with invalid token', async () => {
      const response = await request(app).get('/api/auth/profile').set('Authorization', 'Bearer invalid-token').expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_TOKEN');
    });
  });
  describe('PUT /api/auth/profile', () => {
    let testUser;
    let authToken;
    beforeEach(async () => {
      // Create test user
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });

      // Generate auth token
      authToken = jwt.sign({
        userId: testUser._id
      }, process.env.JWT_SECRET, {
        expiresIn: '1h'
      });
    });
    it('should update user profile', async () => {
      const updateData = {
        firstName: 'Updated',
        lastName: 'Name'
      };
      const response = await request(app).put('/api/auth/profile').set('Authorization', `Bearer ${authToken}`).send(updateData).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.user.firstName).toBe('Updated');
      expect(response.body.data.user.lastName).toBe('Name');
    });
    it('should validate email format when updating', async () => {
      const response = await request(app).put('/api/auth/profile').set('Authorization', `Bearer ${authToken}`).send({
        email: 'invalid-email'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should require authentication', async () => {
      const response = await request(app).put('/api/auth/profile').send({
        firstName: 'Updated'
      }).expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('NO_TOKEN');
    });
  });
  describe('POST /api/auth/change-password', () => {
    let testUser;
    let authToken;
    beforeEach(async () => {
      // Create test user
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });

      // Generate auth token
      authToken = jwt.sign({
        userId: testUser._id
      }, process.env.JWT_SECRET, {
        expiresIn: '1h'
      });
    });
    it('should change password with valid current password', async () => {
      const response = await request(app).post('/api/auth/change-password').set('Authorization', `Bearer ${authToken}`).send({
        currentPassword: 'password123',
        newPassword: 'newpassword123'
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toContain('Password updated successfully');
    });
    it('should reject incorrect current password', async () => {
      const response = await request(app).post('/api/auth/change-password').set('Authorization', `Bearer ${authToken}`).send({
        currentPassword: 'wrongpassword',
        newPassword: 'newpassword123'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_CURRENT_PASSWORD');
    });
    it('should validate new password length', async () => {
      const response = await request(app).post('/api/auth/change-password').set('Authorization', `Bearer ${authToken}`).send({
        currentPassword: 'password123',
        newPassword: '123'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should require authentication', async () => {
      const response = await request(app).post('/api/auth/change-password').send({
        currentPassword: 'password123',
        newPassword: 'newpassword123'
      }).expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('NO_TOKEN');
    });
  });
  describe('Response Format Consistency', () => {
    it('should maintain consistent success response format', async () => {
      const response = await request(app).post('/api/auth/register').send({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      }).expect(201);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(typeof response.body.data).toBe('object');
    });
    it('should maintain consistent error response format', async () => {
      const response = await request(app).post('/api/auth/login').send({}).expect(400);
      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('error');
      expect(response.body.error).toHaveProperty('code');
      expect(response.body.error).toHaveProperty('message');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,