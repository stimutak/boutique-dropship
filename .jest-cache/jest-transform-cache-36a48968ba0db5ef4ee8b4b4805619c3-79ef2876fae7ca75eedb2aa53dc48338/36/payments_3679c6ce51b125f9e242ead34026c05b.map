{"version":3,"names":["express","require","router","Router","createMollieClient","body","param","validationResult","Order","requireAuth","authenticateToken","mollieClient","apiKey","process","env","MOLLIE_API_KEY","MOLLIE_TEST_KEY","console","warn","Error","log","error","message","payments","create","Promise","reject","get","refunds","methods","list","resolve","post","isMongoId","withMessage","optional","isIn","custom","value","match","req","res","errors","isEmpty","status","json","success","code","details","array","orderId","method","redirectUrl","webhookUrl","order","findById","payment","paymentData","amount","currency","total","toFixed","description","orderNumber","FRONTEND_URL","_id","API_URL","metadata","toString","molliePayment","molliePaymentId","id","save","data","paymentId","checkoutUrl","_links","checkout","href","createdAt","Date","toISOString","field","detail","title","statusCode","params","user","isAdmin","customer","paidAt","transactionId","now","session","cart","processOrderNotifications","notificationError","send","findOne","previousStatus","cardNumber","populate","sendPaymentReceipt","customerEmail","customerName","shouldSendEmail","email","firstName","lastName","preferences","emailPreferences","paymentReceipts","guestInfo","paymentMethod","emailResult","emailError","sendWholesalerNotification","item","items","wholesaler","notified","wholesalerData","orderDate","toLocaleDateString","shippingAddress","quantity","productName","product","name","notes","notificationResult","updateWholesalerNotification","wholesalerError","paymentStatus","query","parseFloat","availableMethods","map","minimumAmount","maximumAmount","image","pricing","refundData","mollieRefund","refund","length","testMode","startsWith","module","exports"],"sources":["payments.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { createMollieClient } = require('@mollie/api-client');\nconst { body, param, validationResult } = require('express-validator');\nconst Order = require('../models/Order');\nconst { requireAuth, authenticateToken } = require('../middleware/auth');\n\n// Initialize Mollie client with fallback\nlet mollieClient;\ntry {\n  const apiKey = process.env.MOLLIE_API_KEY || process.env.MOLLIE_TEST_KEY;\n  \n  if (!apiKey) {\n    console.warn('No Mollie API key found. Using mock client for development.');\n    throw new Error('No API key provided');\n  }\n  \n  mollieClient = createMollieClient({ \n    apiKey: apiKey\n  });\n  console.log('Mollie client initialized successfully');\n} catch (error) {\n  console.warn('Mollie client initialization failed:', error.message);\n  // Create a mock client for development\n  mollieClient = {\n    payments: {\n      create: () => Promise.reject(new Error('Mollie not configured')),\n      get: () => Promise.reject(new Error('Mollie not configured')),\n      refunds: {\n        create: () => Promise.reject(new Error('Mollie not configured'))\n      }\n    },\n    methods: {\n      list: () => Promise.resolve([])\n    }\n  };\n}\n\n// Create payment for order\n// Note: Using optional authentication to support guest checkout\nrouter.post('/create', [\n  body('orderId').isMongoId().withMessage('Valid order ID is required'),\n  body('method').optional().isIn(['card', 'crypto', 'creditcard', 'other']).withMessage('Invalid payment method'),\n  body('redirectUrl').optional().custom((value) => {\n    if (value && !value.match(/^https?:\\/\\/.+/)) {\n      throw new Error('Valid redirect URL required');\n    }\n    return true;\n  }),\n  body('webhookUrl').optional().custom((value) => {\n    if (value && !value.match(/^https?:\\/\\/.+/)) {\n      throw new Error('Valid webhook URL required');\n    }\n    return true;\n  })\n], async (req, res) => {\n  try {\n    // Check validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n        return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { orderId, method = 'card', redirectUrl, webhookUrl } = req.body;\n\n    // Find the order\n    const order = await Order.findById(orderId);\n    \n    if (!order) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ORDER_NOT_FOUND',\n          message: 'Order not found'\n        }\n      });\n    }\n\n    // Check if order already has a payment\n    if (order.payment.status === 'paid') {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'ORDER_ALREADY_PAID',\n          message: 'Order has already been paid'\n        }\n      });\n    }\n\n    // Prepare payment data\n    const paymentData = {\n      amount: {\n        currency: 'USD',\n        value: order.total.toFixed(2)\n      },\n      description: `Order ${order.orderNumber}`,\n      redirectUrl: redirectUrl || `${process.env.FRONTEND_URL}/order-confirmation/${order._id}`,\n      webhookUrl: webhookUrl || `${process.env.API_URL}/api/payments/webhook`,\n      metadata: {\n        orderId: order._id.toString(),\n        orderNumber: order.orderNumber\n      }\n    };\n\n    // Add method if specified\n    if (method && method !== 'creditcard') {\n      paymentData.method = method;\n    }\n\n    // Create payment with Mollie\n    const molliePayment = await mollieClient.payments.create(paymentData);\n\n    // Update order with payment information\n    order.payment.molliePaymentId = molliePayment.id;\n    order.payment.method = method;\n    order.payment.status = 'pending';\n    await order.save();\n\n    res.json({\n      success: true,\n      data: {\n        paymentId: molliePayment.id,\n        status: molliePayment.status,\n        checkoutUrl: molliePayment._links?.checkout?.href || 'https://checkout.mollie.com/test',\n        amount: molliePayment.amount,\n        method: molliePayment.method || method,\n        createdAt: molliePayment.createdAt || new Date().toISOString(),\n        order: {\n          id: order._id,\n          orderNumber: order.orderNumber,\n          total: order.total\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Payment creation error:', error);\n    \n    // Handle Mollie API errors\n    if (error.field) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MOLLIE_VALIDATION_ERROR',\n          message: `Mollie validation error: ${error.detail}`,\n          field: error.field\n        }\n      });\n    }\n\n    // Handle Mollie API key errors\n    if (error.title === 'Bad Request' && error.statusCode === 400) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MOLLIE_API_ERROR',\n          message: 'Payment service unavailable. Please use demo payment or contact support.'\n        }\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PAYMENT_CREATION_ERROR',\n        message: 'Failed to create payment'\n      }\n    });\n  }\n});\n\n// Demo payment completion endpoint (for testing)\n// Note: No authentication required to support guest checkout\nrouter.post('/demo-complete/:orderId', [\n  param('orderId').isMongoId().withMessage('Valid order ID is required')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n        return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { orderId } = req.params;\n    \n    const order = await Order.findById(orderId);\n    if (!order) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ORDER_NOT_FOUND',\n          message: 'Order not found'\n        }\n      });\n    }\n\n    // Check if user owns this order or is admin (allow guest orders)\n    if (req.user && !req.user.isAdmin && order.customer && order.customer.toString() !== req.user._id.toString()) {\n      return res.status(403).json({\n        success: false,\n        error: {\n          code: 'ACCESS_DENIED',\n          message: 'You can only complete payments for your own orders'\n        }\n      });\n    }\n\n    // Check if order is already paid\n    if (order.payment.status === 'paid') {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'ORDER_ALREADY_PAID',\n          message: 'Order has already been paid'\n        }\n      });\n    }\n\n    // Update order payment status\n    order.payment.status = 'paid';\n    order.payment.method = 'other'; // Use 'other' since 'demo' is not in enum\n    order.payment.paidAt = new Date();\n    order.payment.transactionId = `demo_${Date.now()}`;\n    order.status = 'processing';\n    \n    // Associate order with authenticated user if not already associated\n    if (req.user && req.user._id && !order.customer) {\n      order.customer = req.user._id;\n    }\n    \n    await order.save();\n\n    // Clear cart session after successful payment\n    if (req.session && req.session.cart) {\n      req.session.cart = [];\n    }\n\n    // Send wholesaler notifications\n    try {\n      const { processOrderNotifications } = require('../utils/wholesalerNotificationService');\n      await processOrderNotifications(orderId);\n    } catch (notificationError) {\n      console.error('Wholesaler notification error:', notificationError);\n    }\n\n    res.json({\n      success: true,\n      message: 'Demo payment completed successfully',\n      order: {\n        _id: order._id,\n        orderNumber: order.orderNumber,\n        status: order.status,\n        payment: {\n          status: order.payment.status,\n          method: order.payment.method,\n          paidAt: order.payment.paidAt\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Demo payment completion error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'DEMO_PAYMENT_ERROR',\n        message: 'Failed to complete demo payment'\n      }\n    });\n  }\n});\n\n// Mollie webhook handler\nrouter.post('/webhook', async (req, res) => {\n  try {\n    const { id: paymentId } = req.body;\n\n    if (!paymentId) {\n      return res.status(400).send('Payment ID is required');\n    }\n\n    // Get payment details from Mollie\n    const molliePayment = await mollieClient.payments.get(paymentId);\n    \n    // Find the order\n    const order = await Order.findOne({ 'payment.molliePaymentId': paymentId });\n    if (!order) {\n      console.error(`Order not found for payment ID: ${paymentId}`);\n      return res.status(404).send('Order not found');\n    }\n\n    // Update order based on payment status\n    const previousStatus = order.payment.status;\n    \n    switch (molliePayment.status) {\n      case 'paid':\n        order.payment.status = 'paid';\n        order.payment.paidAt = new Date(molliePayment.paidAt);\n        order.payment.transactionId = molliePayment.details?.cardNumber || molliePayment.id;\n        order.status = 'processing'; // Move order to processing\n        break;\n        \n      case 'failed':\n      case 'canceled':\n      case 'expired':\n        order.payment.status = 'failed';\n        order.status = 'cancelled';\n        break;\n        \n      case 'pending':\n      case 'open':\n        order.payment.status = 'pending';\n        break;\n        \n      default:\n        console.log(`Unhandled payment status: ${molliePayment.status}`);\n    }\n\n    await order.save();\n\n    // Log status change\n    console.log(`Payment ${paymentId} status changed from ${previousStatus} to ${molliePayment.status} for order ${order.orderNumber}`);\n\n    // Send payment receipt and trigger wholesaler notifications if payment is successful\n    if (molliePayment.status === 'paid' && previousStatus !== 'paid') {\n      // Populate customer data for email\n      await order.populate('customer', 'firstName lastName email preferences');\n      \n      try {\n        const { sendPaymentReceipt } = require('../utils/emailService');\n        \n        let customerEmail, customerName, shouldSendEmail = true;\n        \n        if (order.customer) {\n          // Registered user\n          customerEmail = order.customer.email;\n          customerName = `${order.customer.firstName} ${order.customer.lastName}`;\n          shouldSendEmail = order.customer.preferences?.emailPreferences?.paymentReceipts !== false;\n        } else {\n          // Guest user\n          customerEmail = order.guestInfo.email;\n          customerName = `${order.guestInfo.firstName} ${order.guestInfo.lastName}`;\n        }\n\n        if (shouldSendEmail) {\n          const paymentData = {\n            orderNumber: order.orderNumber,\n            customerName,\n            total: order.total,\n            paymentMethod: order.payment.method === 'card' ? 'Credit/Debit Card' : \n                          order.payment.method === 'crypto' ? 'Cryptocurrency' : \n                          order.payment.method,\n            transactionId: order.payment.transactionId,\n            paidAt: order.payment.paidAt\n          };\n\n          const emailResult = await sendPaymentReceipt(customerEmail, paymentData);\n          if (!emailResult.success) {\n            console.error('Failed to send payment receipt email:', emailResult.error);\n          }\n        }\n      } catch (emailError) {\n        console.error('Error sending payment receipt email:', emailError);\n      }\n\n      // Trigger wholesaler notifications\n      try {\n        const { sendWholesalerNotification } = require('../utils/emailService');\n        \n        // Process each item that needs wholesaler notification\n        for (const item of order.items) {\n          if (!item.wholesaler.notified && item.wholesaler.email) {\n            const wholesalerData = {\n              orderNumber: order.orderNumber,\n              orderDate: order.createdAt.toLocaleDateString(),\n              shippingAddress: order.shippingAddress,\n              items: [{\n                wholesaler: item.wholesaler,\n                quantity: item.quantity,\n                productName: item.product?.name || 'Product'\n              }],\n              notes: order.notes\n            };\n\n            const notificationResult = await sendWholesalerNotification(\n              item.wholesaler.email, \n              wholesalerData\n            );\n\n            // Update notification status\n            await order.updateWholesalerNotification(\n              item._id, \n              notificationResult.success, \n              notificationResult.error\n            );\n\n            if (notificationResult.success) {\n              console.log(`Wholesaler notification sent for order ${order.orderNumber}, item ${item._id}`);\n            } else {\n              console.error(`Failed to send wholesaler notification for order ${order.orderNumber}, item ${item._id}:`, notificationResult.error);\n            }\n          }\n        }\n      } catch (wholesalerError) {\n        console.error('Error sending wholesaler notifications:', wholesalerError);\n      }\n    }\n\n    res.status(200).send('OK');\n\n  } catch (error) {\n    console.error('Webhook processing error:', error);\n    res.status(500).send('Webhook processing failed');\n  }\n});\n\n// Check payment status\nrouter.get('/status/:paymentId', async (req, res) => {\n  try {\n    const { paymentId } = req.params;\n\n    // Get payment from Mollie\n    const molliePayment = await mollieClient.payments.get(paymentId);\n    \n    // Find associated order\n    const order = await Order.findOne({ 'payment.molliePaymentId': paymentId });\n\n    res.json({\n      success: true,\n      payment: {\n        id: molliePayment.id,\n        status: molliePayment.status,\n        amount: molliePayment.amount,\n        method: molliePayment.method,\n        paidAt: molliePayment.paidAt,\n        createdAt: molliePayment.createdAt,\n        description: molliePayment.description\n      },\n      order: order ? {\n        id: order._id,\n        orderNumber: order.orderNumber,\n        status: order.status,\n        paymentStatus: order.payment.status\n      } : null\n    });\n\n  } catch (error) {\n    console.error('Payment status check error:', error);\n    \n    if (error.statusCode === 404) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'PAYMENT_NOT_FOUND',\n          message: 'Payment not found'\n        }\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PAYMENT_STATUS_ERROR',\n        message: 'Failed to check payment status'\n      }\n    });\n  }\n});\n\n// Get available payment methods\nrouter.get('/methods', async (req, res) => {\n  try {\n    const { amount, currency = 'USD' } = req.query;\n\n    const params = {};\n    if (amount) {\n      params.amount = {\n        currency,\n        value: parseFloat(amount).toFixed(2)\n      };\n    }\n\n    const methods = await mollieClient.methods.list(params);\n\n    const availableMethods = methods.map(method => ({\n      id: method.id,\n      description: method.description,\n      minimumAmount: method.minimumAmount,\n      maximumAmount: method.maximumAmount,\n      image: method.image,\n      pricing: method.pricing\n    }));\n\n    res.json({\n      success: true,\n      methods: availableMethods\n    });\n\n  } catch (error) {\n    console.error('Payment methods error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PAYMENT_METHODS_ERROR',\n        message: 'Failed to fetch payment methods'\n      }\n    });\n  }\n});\n\n// Process refund (admin only)\nrouter.post('/refund', requireAuth, async (req, res) => {\n  try {\n    const { paymentId, amount, description } = req.body;\n\n    // Check if user is admin (you may want to add proper admin middleware)\n    if (!req.user.isAdmin) {\n      return res.status(403).json({\n        success: false,\n        error: {\n          code: 'INSUFFICIENT_PERMISSIONS',\n          message: 'Admin access required'\n        }\n      });\n    }\n\n    if (!paymentId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MISSING_PAYMENT_ID',\n          message: 'Payment ID is required'\n        }\n      });\n    }\n\n    // Find the order\n    const order = await Order.findOne({ 'payment.molliePaymentId': paymentId });\n    if (!order) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ORDER_NOT_FOUND',\n          message: 'Order not found for this payment'\n        }\n      });\n    }\n\n    // Prepare refund data\n    const refundData = {\n      description: description || `Refund for order ${order.orderNumber}`\n    };\n\n    if (amount) {\n      refundData.amount = {\n        currency: 'USD',\n        value: parseFloat(amount).toFixed(2)\n      };\n    }\n\n    // Create refund with Mollie\n    const mollieRefund = await mollieClient.payments.refunds.create(paymentId, refundData);\n\n    // Update order status\n    if (mollieRefund.amount.value === order.total.toFixed(2)) {\n      order.payment.status = 'refunded';\n      order.status = 'cancelled';\n    }\n    await order.save();\n\n    res.json({\n      success: true,\n      message: 'Refund processed successfully',\n      refund: {\n        id: mollieRefund.id,\n        amount: mollieRefund.amount,\n        status: mollieRefund.status,\n        createdAt: mollieRefund.createdAt\n      },\n      order: {\n        id: order._id,\n        orderNumber: order.orderNumber,\n        status: order.status,\n        paymentStatus: order.payment.status\n      }\n    });\n\n  } catch (error) {\n    console.error('Refund processing error:', error);\n    \n    if (error.field) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MOLLIE_REFUND_ERROR',\n          message: `Mollie refund error: ${error.detail}`,\n          field: error.field\n        }\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'REFUND_ERROR',\n        message: 'Failed to process refund'\n      }\n    });\n  }\n});\n\n// Test Mollie connection\nrouter.get('/test', async (req, res) => {\n  try {\n    // Test by fetching payment methods\n    const methods = await mollieClient.methods.list();\n    \n    res.json({\n      success: true,\n      message: 'Mollie connection successful',\n      availableMethods: methods.length,\n      testMode: process.env.MOLLIE_API_KEY?.startsWith('test_')\n    });\n\n  } catch (error) {\n    console.error('Mollie test error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'MOLLIE_CONNECTION_ERROR',\n        message: 'Failed to connect to Mollie API'\n      }\n    });\n  }\n});\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}