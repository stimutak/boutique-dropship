5dfea28a1dea0c949d8be079edeff1a1
/* istanbul ignore next */
function cov_bi2719ewd() {
  var path = "/Users/oliver/Projects/boutique/utils/logger.js";
  var hash = "ec2088acea158f8d29192f030cc11188422bd74d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/oliver/Projects/boutique/utils/logger.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 13
        },
        end: {
          line: 2,
          column: 28
        }
      },
      "2": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 11,
          column: 1
        }
      },
      "3": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 20,
          column: 1
        }
      },
      "4": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 23,
          column: 26
        }
      },
      "5": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 32,
          column: 1
        }
      },
      "6": {
        start: {
          line: 30,
          column: 14
        },
        end: {
          line: 30,
          column: 64
        }
      },
      "7": {
        start: {
          line: 35,
          column: 19
        },
        end: {
          line: 60,
          column: 1
        }
      },
      "8": {
        start: {
          line: 63,
          column: 15
        },
        end: {
          line: 68,
          column: 2
        }
      },
      "9": {
        start: {
          line: 71,
          column: 22
        },
        end: {
          line: 89,
          column: 2
        }
      },
      "10": {
        start: {
          line: 91,
          column: 25
        },
        end: {
          line: 109,
          column: 2
        }
      },
      "11": {
        start: {
          line: 111,
          column: 23
        },
        end: {
          line: 129,
          column: 2
        }
      },
      "12": {
        start: {
          line: 131,
          column: 0
        },
        end: {
          line: 136,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 14
          },
          end: {
            line: 30,
            column: 64
          }
        },
        line: 30
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 64,
            column: 9
          },
          end: {
            line: 64,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 9
          },
          end: {
            line: 64,
            column: 30
          }
        }, {
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 40
          }
        }],
        line: 64
      },
      "1": {
        loc: {
          start: {
            line: 72,
            column: 9
          },
          end: {
            line: 72,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 9
          },
          end: {
            line: 72,
            column: 30
          }
        }, {
          start: {
            line: 72,
            column: 34
          },
          end: {
            line: 72,
            column: 40
          }
        }],
        line: 72
      },
      "2": {
        loc: {
          start: {
            line: 92,
            column: 9
          },
          end: {
            line: 92,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 9
          },
          end: {
            line: 92,
            column: 30
          }
        }, {
          start: {
            line: 92,
            column: 34
          },
          end: {
            line: 92,
            column: 40
          }
        }],
        line: 92
      },
      "3": {
        loc: {
          start: {
            line: 112,
            column: 9
          },
          end: {
            line: 112,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 9
          },
          end: {
            line: 112,
            column: 30
          }
        }, {
          start: {
            line: 112,
            column: 34
          },
          end: {
            line: 112,
            column: 40
          }
        }],
        line: 112
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ec2088acea158f8d29192f030cc11188422bd74d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bi2719ewd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bi2719ewd();
const winston =
/* istanbul ignore next */
(cov_bi2719ewd().s[0]++, require('winston'));
const path =
/* istanbul ignore next */
(cov_bi2719ewd().s[1]++, require('path'));

// Define log levels
const levels =
/* istanbul ignore next */
(cov_bi2719ewd().s[2]++, {
  error: 0,
  warn: 1,
  info: 2,
  http: 3,
  debug: 4
});

// Define colors for each level
const colors =
/* istanbul ignore next */
(cov_bi2719ewd().s[3]++, {
  error: 'red',
  warn: 'yellow',
  info: 'green',
  http: 'magenta',
  debug: 'white'
});

// Tell winston that you want to link the colors
/* istanbul ignore next */
cov_bi2719ewd().s[4]++;
winston.addColors(colors);

// Define format for logs
const format =
/* istanbul ignore next */
(cov_bi2719ewd().s[5]++, winston.format.combine(winston.format.timestamp({
  format: 'YYYY-MM-DD HH:mm:ss:ms'
}), winston.format.colorize({
  all: true
}), winston.format.printf(info => {
  /* istanbul ignore next */
  cov_bi2719ewd().f[0]++;
  cov_bi2719ewd().s[6]++;
  return `${info.timestamp} ${info.level}: ${info.message}`;
})));

// Define which transports the logger must use
const transports =
/* istanbul ignore next */
(cov_bi2719ewd().s[7]++, [
// Console transport
new winston.transports.Console({
  format: winston.format.combine(winston.format.colorize(), winston.format.simple())
}),
// File transport for errors
new winston.transports.File({
  filename: 'logs/error.log',
  level: 'error',
  format: winston.format.combine(winston.format.timestamp(), winston.format.json())
}),
// File transport for all logs
new winston.transports.File({
  filename: 'logs/combined.log',
  format: winston.format.combine(winston.format.timestamp(), winston.format.json())
})]);

// Create the logger
const logger =
/* istanbul ignore next */
(cov_bi2719ewd().s[8]++, winston.createLogger({
  level:
  /* istanbul ignore next */
  (cov_bi2719ewd().b[0][0]++, process.env.LOG_LEVEL) ||
  /* istanbul ignore next */
  (cov_bi2719ewd().b[0][1]++, 'info'),
  levels,
  format,
  transports
}));

// Create specialized loggers for different contexts
const paymentLogger =
/* istanbul ignore next */
(cov_bi2719ewd().s[9]++, winston.createLogger({
  level:
  /* istanbul ignore next */
  (cov_bi2719ewd().b[1][0]++, process.env.LOG_LEVEL) ||
  /* istanbul ignore next */
  (cov_bi2719ewd().b[1][1]++, 'info'),
  format: winston.format.combine(winston.format.timestamp(), winston.format.label({
    label: 'PAYMENT'
  }), winston.format.json()),
  transports: [new winston.transports.File({
    filename: 'logs/payment.log'
  }), new winston.transports.Console({
    format: winston.format.combine(winston.format.colorize(), winston.format.simple())
  })]
}));
const wholesalerLogger =
/* istanbul ignore next */
(cov_bi2719ewd().s[10]++, winston.createLogger({
  level:
  /* istanbul ignore next */
  (cov_bi2719ewd().b[2][0]++, process.env.LOG_LEVEL) ||
  /* istanbul ignore next */
  (cov_bi2719ewd().b[2][1]++, 'info'),
  format: winston.format.combine(winston.format.timestamp(), winston.format.label({
    label: 'WHOLESALER'
  }), winston.format.json()),
  transports: [new winston.transports.File({
    filename: 'logs/wholesaler.log'
  }), new winston.transports.Console({
    format: winston.format.combine(winston.format.colorize(), winston.format.simple())
  })]
}));
const securityLogger =
/* istanbul ignore next */
(cov_bi2719ewd().s[11]++, winston.createLogger({
  level:
  /* istanbul ignore next */
  (cov_bi2719ewd().b[3][0]++, process.env.LOG_LEVEL) ||
  /* istanbul ignore next */
  (cov_bi2719ewd().b[3][1]++, 'info'),
  format: winston.format.combine(winston.format.timestamp(), winston.format.label({
    label: 'SECURITY'
  }), winston.format.json()),
  transports: [new winston.transports.File({
    filename: 'logs/security.log'
  }), new winston.transports.Console({
    format: winston.format.combine(winston.format.colorize(), winston.format.simple())
  })]
}));
/* istanbul ignore next */
cov_bi2719ewd().s[12]++;
module.exports = {
  logger,
  paymentLogger,
  wholesalerLogger,
  securityLogger
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,