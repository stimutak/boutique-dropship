91386e599ee046546d449528abf6e7b1
/* istanbul ignore next */
function cov_v4zlebj95() {
  var path = "/Users/oliver/Projects/boutique/routes/monitoring.js";
  var hash = "a1f24b0054168f0b73f177ef6479a880873f34c5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/oliver/Projects/boutique/routes/monitoring.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 2,
          column: 36
        }
      },
      "2": {
        start: {
          line: 3,
          column: 19
        },
        end: {
          line: 3,
          column: 45
        }
      },
      "3": {
        start: {
          line: 4,
          column: 36
        },
        end: {
          line: 4,
          column: 69
        }
      },
      "4": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "6": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "7": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 16,
          column: 3
        }
      },
      "8": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 18,
          column: 24
        }
      },
      "9": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 57,
          column: 3
        }
      },
      "10": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 56,
          column: 3
        }
      },
      "11": {
        start: {
          line: 24,
          column: 19
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "12": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 37,
          column: 7
        }
      },
      "13": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 42,
          column: 7
        }
      },
      "14": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 47,
          column: 7
        }
      },
      "15": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 55,
          column: 7
        }
      },
      "16": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 89,
          column: 3
        }
      },
      "17": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 50
        }
      },
      "18": {
        start: {
          line: 63,
          column: 19
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "19": {
        start: {
          line: 70,
          column: 19
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "20": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "21": {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 79,
          column: 50
        }
      },
      "22": {
        start: {
          line: 80,
          column: 6
        },
        end: {
          line: 80,
          column: 30
        }
      },
      "23": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 18
        }
      },
      "24": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 88,
          column: 6
        }
      },
      "25": {
        start: {
          line: 94,
          column: 19
        },
        end: {
          line: 94,
          column: 21
        }
      },
      "26": {
        start: {
          line: 97,
          column: 2
        },
        end: {
          line: 108,
          column: 3
        }
      },
      "27": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 102,
          column: 6
        }
      },
      "28": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 107,
          column: 6
        }
      },
      "29": {
        start: {
          line: 111,
          column: 2
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "30": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 116,
          column: 6
        }
      },
      "31": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 121,
          column: 6
        }
      },
      "32": {
        start: {
          line: 124,
          column: 2
        },
        end: {
          line: 124,
          column: 18
        }
      },
      "33": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 162,
          column: 3
        }
      },
      "34": {
        start: {
          line: 129,
          column: 2
        },
        end: {
          line: 161,
          column: 3
        }
      },
      "35": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 142,
          column: 5
        }
      },
      "36": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 147,
          column: 7
        }
      },
      "37": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 152,
          column: 7
        }
      },
      "38": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 160,
          column: 7
        }
      },
      "39": {
        start: {
          line: 166,
          column: 2
        },
        end: {
          line: 186,
          column: 3
        }
      },
      "40": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 80
        }
      },
      "41": {
        start: {
          line: 168,
          column: 18
        },
        end: {
          line: 168,
          column: 20
        }
      },
      "42": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "43": {
        start: {
          line: 171,
          column: 6
        },
        end: {
          line: 180,
          column: 7
        }
      },
      "44": {
        start: {
          line: 172,
          column: 32
        },
        end: {
          line: 172,
          column: 96
        }
      },
      "45": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 177,
          column: 10
        }
      },
      "46": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 58
        }
      },
      "47": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 183,
          column: 17
        }
      },
      "48": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 185,
          column: 36
        }
      },
      "49": {
        start: {
          line: 193,
          column: 2
        },
        end: {
          line: 200,
          column: 4
        }
      },
      "50": {
        start: {
          line: 204,
          column: 0
        },
        end: {
          line: 232,
          column: 3
        }
      },
      "51": {
        start: {
          line: 205,
          column: 2
        },
        end: {
          line: 231,
          column: 3
        }
      },
      "52": {
        start: {
          line: 206,
          column: 44
        },
        end: {
          line: 206,
          column: 53
        }
      },
      "53": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 217,
          column: 7
        }
      },
      "54": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 222,
          column: 7
        }
      },
      "55": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 230,
          column: 7
        }
      },
      "56": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 234,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 10,
            column: 23
          }
        },
        loc: {
          start: {
            line: 10,
            column: 36
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 36
          },
          end: {
            line: 22,
            column: 37
          }
        },
        loc: {
          start: {
            line: 22,
            column: 56
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 22
      },
      "2": {
        name: "getDatabaseStatus",
        decl: {
          start: {
            line: 60,
            column: 15
          },
          end: {
            line: 60,
            column: 32
          }
        },
        loc: {
          start: {
            line: 60,
            column: 35
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 60
      },
      "3": {
        name: "getServicesStatus",
        decl: {
          start: {
            line: 93,
            column: 15
          },
          end: {
            line: 93,
            column: 32
          }
        },
        loc: {
          start: {
            line: 93,
            column: 35
          },
          end: {
            line: 125,
            column: 1
          }
        },
        line: 93
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 128,
            column: 37
          },
          end: {
            line: 128,
            column: 38
          }
        },
        loc: {
          start: {
            line: 128,
            column: 57
          },
          end: {
            line: 162,
            column: 1
          }
        },
        line: 128
      },
      "5": {
        name: "getCollectionStats",
        decl: {
          start: {
            line: 165,
            column: 15
          },
          end: {
            line: 165,
            column: 33
          }
        },
        loc: {
          start: {
            line: 165,
            column: 36
          },
          end: {
            line: 187,
            column: 1
          }
        },
        line: 165
      },
      "6": {
        name: "getErrorMetrics",
        decl: {
          start: {
            line: 190,
            column: 15
          },
          end: {
            line: 190,
            column: 30
          }
        },
        loc: {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 190
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 204,
            column: 34
          },
          end: {
            line: 204,
            column: 35
          }
        },
        loc: {
          start: {
            line: 204,
            column: 48
          },
          end: {
            line: 232,
            column: 1
          }
        },
        line: 204
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 17
          },
          end: {
            line: 15,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 17
          },
          end: {
            line: 15,
            column: 37
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 15,
            column: 54
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 19
          },
          end: {
            line: 26,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 19
          },
          end: {
            line: 26,
            column: 39
          }
        }, {
          start: {
            line: 26,
            column: 43
          },
          end: {
            line: 26,
            column: 56
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 206,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 206,
            column: 20
          },
          end: {
            line: 206,
            column: 26
          }
        }],
        line: 206
      },
      "4": {
        loc: {
          start: {
            line: 206,
            column: 28
          },
          end: {
            line: 206,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 206,
            column: 36
          },
          end: {
            line: 206,
            column: 39
          }
        }],
        line: 206
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a1f24b0054168f0b73f177ef6479a880873f34c5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_v4zlebj95 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_v4zlebj95();
const express =
/* istanbul ignore next */
(cov_v4zlebj95().s[0]++, require('express'));
const mongoose =
/* istanbul ignore next */
(cov_v4zlebj95().s[1]++, require('mongoose'));
const {
  logger
} =
/* istanbul ignore next */
(cov_v4zlebj95().s[2]++, require('../utils/logger'));
const {
  getCircuitBreakerStatus
} =
/* istanbul ignore next */
(cov_v4zlebj95().s[3]++, require('../utils/errorRecovery'));
const {
  requireAdmin
} =
/* istanbul ignore next */
(cov_v4zlebj95().s[4]++, require('../middleware/auth'));
const router =
/* istanbul ignore next */
(cov_v4zlebj95().s[5]++, express.Router());

// Basic health check
/* istanbul ignore next */
cov_v4zlebj95().s[6]++;
router.get('/health', (req, res) => {
  /* istanbul ignore next */
  cov_v4zlebj95().f[0]++;
  const healthCheck =
  /* istanbul ignore next */
  (cov_v4zlebj95().s[7]++, {
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment:
    /* istanbul ignore next */
    (cov_v4zlebj95().b[0][0]++, process.env.NODE_ENV) ||
    /* istanbul ignore next */
    (cov_v4zlebj95().b[0][1]++, 'development')
  });
  /* istanbul ignore next */
  cov_v4zlebj95().s[8]++;
  res.json(healthCheck);
});

// Detailed system status (admin only)
/* istanbul ignore next */
cov_v4zlebj95().s[9]++;
router.get('/status', requireAdmin, async (req, res) => {
  /* istanbul ignore next */
  cov_v4zlebj95().f[1]++;
  cov_v4zlebj95().s[10]++;
  try {
    const status =
    /* istanbul ignore next */
    (cov_v4zlebj95().s[11]++, {
      timestamp: new Date().toISOString(),
      environment:
      /* istanbul ignore next */
      (cov_v4zlebj95().b[1][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_v4zlebj95().b[1][1]++, 'development'),
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      database: await getDatabaseStatus(),
      circuitBreakers: getCircuitBreakerStatus(),
      services: await getServicesStatus()
    });
    /* istanbul ignore next */
    cov_v4zlebj95().s[12]++;
    logger.info('System status requested', {
      requestedBy: req.user.email,
      timestamp: status.timestamp
    });
    /* istanbul ignore next */
    cov_v4zlebj95().s[13]++;
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_v4zlebj95().s[14]++;
    logger.error('Error getting system status:', {
      error: error.message,
      requestedBy: req.user.email
    });
    /* istanbul ignore next */
    cov_v4zlebj95().s[15]++;
    res.status(500).json({
      success: false,
      error: {
        code: 'STATUS_ERROR',
        message: 'Unable to retrieve system status'
      }
    });
  }
});

// Database health check
async function getDatabaseStatus() {
  /* istanbul ignore next */
  cov_v4zlebj95().f[2]++;
  cov_v4zlebj95().s[16]++;
  try {
    const dbState =
    /* istanbul ignore next */
    (cov_v4zlebj95().s[17]++, mongoose.connection.readyState);
    const states =
    /* istanbul ignore next */
    (cov_v4zlebj95().s[18]++, {
      0: 'disconnected',
      1: 'connected',
      2: 'connecting',
      3: 'disconnecting'
    });
    const status =
    /* istanbul ignore next */
    (cov_v4zlebj95().s[19]++, {
      state: states[dbState],
      host: mongoose.connection.host,
      port: mongoose.connection.port,
      name: mongoose.connection.name
    });

    // Test database connectivity
    /* istanbul ignore next */
    cov_v4zlebj95().s[20]++;
    if (dbState === 1) {
      /* istanbul ignore next */
      cov_v4zlebj95().b[2][0]++;
      cov_v4zlebj95().s[21]++;
      await mongoose.connection.db.admin().ping();
      /* istanbul ignore next */
      cov_v4zlebj95().s[22]++;
      status.ping = 'success';
    } else
    /* istanbul ignore next */
    {
      cov_v4zlebj95().b[2][1]++;
    }
    cov_v4zlebj95().s[23]++;
    return status;
  } catch (error) {
    /* istanbul ignore next */
    cov_v4zlebj95().s[24]++;
    return {
      state: 'error',
      error: error.message
    };
  }
}

// Services health check
async function getServicesStatus() {
  /* istanbul ignore next */
  cov_v4zlebj95().f[3]++;
  const services =
  /* istanbul ignore next */
  (cov_v4zlebj95().s[25]++, {});

  // Check payment service (Mollie)
  /* istanbul ignore next */
  cov_v4zlebj95().s[26]++;
  try {
    /* istanbul ignore next */
    cov_v4zlebj95().s[27]++;
    // In a real implementation, you might ping Mollie's API
    services.payment = {
      status: 'available',
      provider: 'mollie'
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_v4zlebj95().s[28]++;
    services.payment = {
      status: 'unavailable',
      error: error.message
    };
  }

  // Check email service
  /* istanbul ignore next */
  cov_v4zlebj95().s[29]++;
  try {
    /* istanbul ignore next */
    cov_v4zlebj95().s[30]++;
    // In a real implementation, you might test SMTP connection
    services.email = {
      status: 'available',
      provider: 'nodemailer'
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_v4zlebj95().s[31]++;
    services.email = {
      status: 'unavailable',
      error: error.message
    };
  }
  /* istanbul ignore next */
  cov_v4zlebj95().s[32]++;
  return services;
}

// Metrics endpoint (admin only)
/* istanbul ignore next */
cov_v4zlebj95().s[33]++;
router.get('/metrics', requireAdmin, async (req, res) => {
  /* istanbul ignore next */
  cov_v4zlebj95().f[4]++;
  cov_v4zlebj95().s[34]++;
  try {
    const metrics =
    /* istanbul ignore next */
    (cov_v4zlebj95().s[35]++, {
      timestamp: new Date().toISOString(),
      system: {
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        cpu: process.cpuUsage()
      },
      database: {
        connections: mongoose.connection.readyState,
        collections: await getCollectionStats()
      },
      errors: await getErrorMetrics()
    });
    /* istanbul ignore next */
    cov_v4zlebj95().s[36]++;
    res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_v4zlebj95().s[37]++;
    logger.error('Error getting metrics:', {
      error: error.message,
      requestedBy: req.user.email
    });
    /* istanbul ignore next */
    cov_v4zlebj95().s[38]++;
    res.status(500).json({
      success: false,
      error: {
        code: 'METRICS_ERROR',
        message: 'Unable to retrieve metrics'
      }
    });
  }
});

// Get collection statistics
async function getCollectionStats() {
  /* istanbul ignore next */
  cov_v4zlebj95().f[5]++;
  cov_v4zlebj95().s[39]++;
  try {
    const collections =
    /* istanbul ignore next */
    (cov_v4zlebj95().s[40]++, await mongoose.connection.db.listCollections().toArray());
    const stats =
    /* istanbul ignore next */
    (cov_v4zlebj95().s[41]++, {});
    /* istanbul ignore next */
    cov_v4zlebj95().s[42]++;
    for (const collection of collections) {
      /* istanbul ignore next */
      cov_v4zlebj95().s[43]++;
      try {
        const collectionStats =
        /* istanbul ignore next */
        (cov_v4zlebj95().s[44]++, await mongoose.connection.db.collection(collection.name).stats());
        /* istanbul ignore next */
        cov_v4zlebj95().s[45]++;
        stats[collection.name] = {
          count: collectionStats.count,
          size: collectionStats.size,
          avgObjSize: collectionStats.avgObjSize
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_v4zlebj95().s[46]++;
        stats[collection.name] = {
          error: error.message
        };
      }
    }
    /* istanbul ignore next */
    cov_v4zlebj95().s[47]++;
    return stats;
  } catch (error) {
    /* istanbul ignore next */
    cov_v4zlebj95().s[48]++;
    return {
      error: error.message
    };
  }
}

// Get error metrics (simplified - in production you'd use proper metrics storage)
async function getErrorMetrics() {
  /* istanbul ignore next */
  cov_v4zlebj95().f[6]++;
  cov_v4zlebj95().s[49]++;
  // This is a simplified implementation
  // In production, you'd use proper metrics collection like Prometheus
  return {
    note: 'Error metrics would be collected from logs or metrics store',
    last24Hours: {
      total: 0,
      byType: {},
      byEndpoint: {}
    }
  };
}

// Logs endpoint (admin only) - recent logs
/* istanbul ignore next */
cov_v4zlebj95().s[50]++;
router.get('/logs', requireAdmin, (req, res) => {
  /* istanbul ignore next */
  cov_v4zlebj95().f[7]++;
  cov_v4zlebj95().s[51]++;
  try {
    const {
      level =
      /* istanbul ignore next */
      (cov_v4zlebj95().b[3][0]++, 'info'),
      limit =
      /* istanbul ignore next */
      (cov_v4zlebj95().b[4][0]++, 100)
    } =
    /* istanbul ignore next */
    (cov_v4zlebj95().s[52]++, req.query);

    // In a real implementation, you'd read from log files or log aggregation service
    /* istanbul ignore next */
    cov_v4zlebj95().s[53]++;
    res.json({
      success: true,
      data: {
        message: 'Log retrieval endpoint - would return recent logs',
        level,
        limit,
        note: 'In production, this would read from log files or log aggregation service'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_v4zlebj95().s[54]++;
    logger.error('Error retrieving logs:', {
      error: error.message,
      requestedBy: req.user.email
    });
    /* istanbul ignore next */
    cov_v4zlebj95().s[55]++;
    res.status(500).json({
      success: false,
      error: {
        code: 'LOGS_ERROR',
        message: 'Unable to retrieve logs'
      }
    });
  }
});
/* istanbul ignore next */
cov_v4zlebj95().s[56]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,