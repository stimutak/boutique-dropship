{"version":3,"names":["cov_v4zlebj95","actualCoverage","express","s","require","mongoose","logger","getCircuitBreakerStatus","requireAdmin","router","Router","get","req","res","f","healthCheck","status","timestamp","Date","toISOString","uptime","process","environment","b","env","NODE_ENV","json","memory","memoryUsage","database","getDatabaseStatus","circuitBreakers","services","getServicesStatus","info","requestedBy","user","email","success","data","error","message","code","dbState","connection","readyState","states","state","host","port","name","db","admin","ping","payment","provider","metrics","system","cpu","cpuUsage","connections","collections","getCollectionStats","errors","getErrorMetrics","listCollections","toArray","stats","collection","collectionStats","count","size","avgObjSize","note","last24Hours","total","byType","byEndpoint","level","limit","query","module","exports"],"sources":["monitoring.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst { logger } = require('../utils/logger');\nconst { getCircuitBreakerStatus } = require('../utils/errorRecovery');\nconst { requireAdmin } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Basic health check\nrouter.get('/health', (req, res) => {\n  const healthCheck = {\n    status: 'OK',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV || 'development'\n  };\n\n  res.json(healthCheck);\n});\n\n// Detailed system status (admin only)\nrouter.get('/status', requireAdmin, async (req, res) => {\n  try {\n    const status = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development',\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      database: await getDatabaseStatus(),\n      circuitBreakers: getCircuitBreakerStatus(),\n      services: await getServicesStatus()\n    };\n\n    logger.info('System status requested', {\n      requestedBy: req.user.email,\n      timestamp: status.timestamp\n    });\n\n    res.json({\n      success: true,\n      data: status\n    });\n  } catch (error) {\n    logger.error('Error getting system status:', {\n      error: error.message,\n      requestedBy: req.user.email\n    });\n\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'STATUS_ERROR',\n        message: 'Unable to retrieve system status'\n      }\n    });\n  }\n});\n\n// Database health check\nasync function getDatabaseStatus() {\n  try {\n    const dbState = mongoose.connection.readyState;\n    const states = {\n      0: 'disconnected',\n      1: 'connected',\n      2: 'connecting',\n      3: 'disconnecting'\n    };\n\n    const status = {\n      state: states[dbState],\n      host: mongoose.connection.host,\n      port: mongoose.connection.port,\n      name: mongoose.connection.name\n    };\n\n    // Test database connectivity\n    if (dbState === 1) {\n      await mongoose.connection.db.admin().ping();\n      status.ping = 'success';\n    }\n\n    return status;\n  } catch (error) {\n    return {\n      state: 'error',\n      error: error.message\n    };\n  }\n}\n\n// Services health check\nasync function getServicesStatus() {\n  const services = {};\n\n  // Check payment service (Mollie)\n  try {\n    // In a real implementation, you might ping Mollie's API\n    services.payment = {\n      status: 'available',\n      provider: 'mollie'\n    };\n  } catch (error) {\n    services.payment = {\n      status: 'unavailable',\n      error: error.message\n    };\n  }\n\n  // Check email service\n  try {\n    // In a real implementation, you might test SMTP connection\n    services.email = {\n      status: 'available',\n      provider: 'nodemailer'\n    };\n  } catch (error) {\n    services.email = {\n      status: 'unavailable',\n      error: error.message\n    };\n  }\n\n  return services;\n}\n\n// Metrics endpoint (admin only)\nrouter.get('/metrics', requireAdmin, async (req, res) => {\n  try {\n    const metrics = {\n      timestamp: new Date().toISOString(),\n      system: {\n        uptime: process.uptime(),\n        memory: process.memoryUsage(),\n        cpu: process.cpuUsage()\n      },\n      database: {\n        connections: mongoose.connection.readyState,\n        collections: await getCollectionStats()\n      },\n      errors: await getErrorMetrics()\n    };\n\n    res.json({\n      success: true,\n      data: metrics\n    });\n  } catch (error) {\n    logger.error('Error getting metrics:', {\n      error: error.message,\n      requestedBy: req.user.email\n    });\n\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'METRICS_ERROR',\n        message: 'Unable to retrieve metrics'\n      }\n    });\n  }\n});\n\n// Get collection statistics\nasync function getCollectionStats() {\n  try {\n    const collections = await mongoose.connection.db.listCollections().toArray();\n    const stats = {};\n\n    for (const collection of collections) {\n      try {\n        const collectionStats = await mongoose.connection.db.collection(collection.name).stats();\n        stats[collection.name] = {\n          count: collectionStats.count,\n          size: collectionStats.size,\n          avgObjSize: collectionStats.avgObjSize\n        };\n      } catch (error) {\n        stats[collection.name] = { error: error.message };\n      }\n    }\n\n    return stats;\n  } catch (error) {\n    return { error: error.message };\n  }\n}\n\n// Get error metrics (simplified - in production you'd use proper metrics storage)\nasync function getErrorMetrics() {\n  // This is a simplified implementation\n  // In production, you'd use proper metrics collection like Prometheus\n  return {\n    note: 'Error metrics would be collected from logs or metrics store',\n    last24Hours: {\n      total: 0,\n      byType: {},\n      byEndpoint: {}\n    }\n  };\n}\n\n// Logs endpoint (admin only) - recent logs\nrouter.get('/logs', requireAdmin, (req, res) => {\n  try {\n    const { level = 'info', limit = 100 } = req.query;\n    \n    // In a real implementation, you'd read from log files or log aggregation service\n    res.json({\n      success: true,\n      data: {\n        message: 'Log retrieval endpoint - would return recent logs',\n        level,\n        limit,\n        note: 'In production, this would read from log files or log aggregation service'\n      }\n    });\n  } catch (error) {\n    logger.error('Error retrieving logs:', {\n      error: error.message,\n      requestedBy: req.user.email\n    });\n\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGS_ERROR',\n        message: 'Unable to retrieve logs'\n      }\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}