{"version":3,"names":["request","require","express","session","mongoose","Order","Product","User","orderRoutes","createTestApp","app","use","secret","resave","saveUninitialized","cookie","secure","json","describe","testProduct","testUser","validGuestOrderData","guestInfo","email","firstName","lastName","phone","shippingAddress","street","city","state","zipCode","country","billingAddress","items","notes","referralSource","beforeAll","connect","process","env","MONGODB_TEST_URI","useNewUrlParser","useUnifiedTopology","beforeEach","deleteMany","create","name","slug","description","price","category","isActive","properties","chakra","element","healing","wholesaler","productCode","cost","password","addresses","type","isDefault","productId","_id","quantity","afterAll","connection","close","it","response","post","send","expect","body","success","toBe","message","order","toHaveProperty","status","savedOrder","findById","toBeTruthy","toHaveLength","notified","subtotal","tax","shipping","total","smallOrderData","invalidOrderData","Types","ObjectId","error","code","save","details","toEqual","arrayContaining","objectContaining","msg","orderWithReferral","createResponse","orderId","get","notifiedAt","fakeId","put","updatedOrder"],"sources":["orders.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst session = require('express-session');\nconst mongoose = require('mongoose');\nconst Order = require('../../models/Order');\nconst Product = require('../../models/Product');\nconst User = require('../../models/User');\nconst orderRoutes = require('../../routes/orders');\n\n// Create test app\nconst createTestApp = () => {\n  const app = express();\n  \n  app.use(session({\n    secret: 'test-secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { secure: false }\n  }));\n  \n  app.use(express.json());\n  app.use('/api/orders', orderRoutes);\n  \n  return app;\n};\n\ndescribe('Order Routes', () => {\n  let app;\n  let testProduct;\n  let testUser;\n  \n  const validGuestOrderData = {\n    guestInfo: {\n      email: 'guest@example.com',\n      firstName: 'Jane',\n      lastName: 'Doe',\n      phone: '555-123-4567'\n    },\n    shippingAddress: {\n      firstName: 'Jane',\n      lastName: 'Doe',\n      street: '123 Main St',\n      city: 'Anytown',\n      state: 'CA',\n      zipCode: '12345',\n      country: 'US',\n      phone: '555-123-4567'\n    },\n    billingAddress: {\n      firstName: 'Jane',\n      lastName: 'Doe',\n      street: '123 Main St',\n      city: 'Anytown',\n      state: 'CA',\n      zipCode: '12345',\n      country: 'US'\n    },\n    items: [],\n    notes: 'Please handle with care',\n    referralSource: 'sister-site'\n  };\n  \n  beforeAll(async () => {\n    await mongoose.connect(process.env.MONGODB_TEST_URI || 'mongodb://localhost:27017/holistic-store-test', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    \n    app = createTestApp();\n  });\n  \n  beforeEach(async () => {\n    // Clear database\n    await Order.deleteMany({});\n    await Product.deleteMany({});\n    await User.deleteMany({});\n    \n    // Create test product\n    testProduct = await Product.create({\n      name: 'Test Crystal',\n      slug: 'test-crystal',\n      description: 'A test crystal for unit testing',\n      price: 29.99,\n      category: 'crystals',\n      isActive: true,\n      properties: {\n        chakra: ['crown'],\n        element: ['air'],\n        healing: ['test']\n      },\n      wholesaler: {\n        name: 'Test Wholesaler',\n        email: 'test@wholesaler.com',\n        productCode: 'TEST-001',\n        cost: 15.00\n      }\n    });\n    \n    // Create test user\n    testUser = await User.create({\n      email: 'test@example.com',\n      password: 'password123',\n      firstName: 'John',\n      lastName: 'Smith',\n      addresses: [{\n        type: 'shipping',\n        firstName: 'John',\n        lastName: 'Smith',\n        street: '456 Oak Ave',\n        city: 'Testville',\n        state: 'NY',\n        zipCode: '67890',\n        country: 'US',\n        isDefault: true\n      }, {\n        type: 'billing',\n        firstName: 'John',\n        lastName: 'Smith',\n        street: '456 Oak Ave',\n        city: 'Testville',\n        state: 'NY',\n        zipCode: '67890',\n        country: 'US',\n        isDefault: true\n      }]\n    });\n    \n    // Add product to order data\n    validGuestOrderData.items = [{\n      productId: testProduct._id,\n      quantity: 2\n    }];\n  });\n  \n  afterAll(async () => {\n    await mongoose.connection.close();\n  });\n  \n  describe('POST /api/orders (Guest Checkout)', () => {\n    it('should create order for guest user', async () => {\n      const response = await request(app)\n        .post('/api/orders')\n        .send(validGuestOrderData)\n        .expect(201);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toBe('Order created successfully');\n      expect(response.body.order).toHaveProperty('orderNumber');\n      expect(response.body.order).toHaveProperty('total');\n      expect(response.body.order.status).toBe('pending');\n      \n      // Verify order was saved to database\n      const savedOrder = await Order.findById(response.body.order._id);\n      expect(savedOrder).toBeTruthy();\n      expect(savedOrder.guestInfo.email).toBe('guest@example.com');\n      expect(savedOrder.items).toHaveLength(1);\n      expect(savedOrder.items[0].quantity).toBe(2);\n      expect(savedOrder.items[0].price).toBe(29.99);\n      \n      // Verify wholesaler info is included for processing\n      expect(savedOrder.items[0].wholesaler.name).toBe('Test Wholesaler');\n      expect(savedOrder.items[0].wholesaler.email).toBe('test@wholesaler.com');\n      expect(savedOrder.items[0].wholesaler.notified).toBe(false);\n    });\n    \n    it('should calculate totals correctly', async () => {\n      const response = await request(app)\n        .post('/api/orders')\n        .send(validGuestOrderData)\n        .expect(201);\n      \n      const savedOrder = await Order.findById(response.body.order._id);\n      \n      // 2 items Ã— $29.99 = $59.98 subtotal\n      expect(savedOrder.subtotal).toBe(59.98);\n      \n      // 8% tax on subtotal = $4.80\n      expect(savedOrder.tax).toBe(4.80);\n      \n      // Shipping should be free (over $50)\n      expect(savedOrder.shipping).toBe(0);\n      \n      // Total = $59.98 + $4.80 + $0 = $64.78\n      expect(savedOrder.total).toBe(64.78);\n    });\n    \n    it('should apply shipping charge for orders under $50', async () => {\n      // Create order with single item (under $50)\n      const smallOrderData = {\n        ...validGuestOrderData,\n        items: [{\n          productId: testProduct._id,\n          quantity: 1\n        }]\n      };\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(smallOrderData)\n        .expect(201);\n      \n      const savedOrder = await Order.findById(response.body.order._id);\n      \n      expect(savedOrder.subtotal).toBe(29.99);\n      expect(savedOrder.shipping).toBe(5.99); // Shipping charge applied\n    });\n    \n    it('should reject order with invalid product', async () => {\n      const invalidOrderData = {\n        ...validGuestOrderData,\n        items: [{\n          productId: new mongoose.Types.ObjectId(),\n          quantity: 1\n        }]\n      };\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(invalidOrderData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('INVALID_PRODUCT');\n    });\n    \n    it('should reject order with inactive product', async () => {\n      testProduct.isActive = false;\n      await testProduct.save();\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(validGuestOrderData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('INVALID_PRODUCT');\n    });\n    \n    it('should validate required guest information', async () => {\n      const invalidOrderData = {\n        ...validGuestOrderData,\n        guestInfo: {\n          email: 'invalid-email',\n          firstName: '',\n          lastName: 'Doe'\n        }\n      };\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(invalidOrderData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('VALIDATION_ERROR');\n      expect(response.body.error.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({ msg: 'Valid email is required' }),\n          expect.objectContaining({ msg: 'First name is required and must be less than 50 characters' })\n        ])\n      );\n    });\n    \n    it('should validate shipping address', async () => {\n      const invalidOrderData = {\n        ...validGuestOrderData,\n        shippingAddress: {\n          firstName: 'Jane',\n          lastName: 'Doe',\n          street: '',\n          city: 'Anytown',\n          state: 'C', // Too short\n          zipCode: '123', // Too short\n          country: 'USA' // Too long\n        }\n      };\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(invalidOrderData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('VALIDATION_ERROR');\n    });\n    \n    it('should validate billing address', async () => {\n      const invalidOrderData = {\n        ...validGuestOrderData,\n        billingAddress: {\n          firstName: '',\n          lastName: 'Doe',\n          street: '123 Main St',\n          city: '',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        }\n      };\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(invalidOrderData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('VALIDATION_ERROR');\n    });\n    \n    it('should require at least one item', async () => {\n      const invalidOrderData = {\n        ...validGuestOrderData,\n        items: []\n      };\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(invalidOrderData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('VALIDATION_ERROR');\n    });\n    \n    it('should validate item quantities', async () => {\n      const invalidOrderData = {\n        ...validGuestOrderData,\n        items: [{\n          productId: testProduct._id,\n          quantity: 0 // Invalid quantity\n        }]\n      };\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(invalidOrderData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('VALIDATION_ERROR');\n    });\n    \n    it('should handle referral source tracking', async () => {\n      const orderWithReferral = {\n        ...validGuestOrderData,\n        referralSource: 'holistic-school'\n      };\n      \n      const response = await request(app)\n        .post('/api/orders')\n        .send(orderWithReferral)\n        .expect(201);\n      \n      const savedOrder = await Order.findById(response.body.order._id);\n      expect(savedOrder.referralSource).toBe('holistic-school');\n    });\n  });\n  \n  describe('GET /api/orders/:id', () => {\n    it('should return order details', async () => {\n      // Create order first\n      const createResponse = await request(app)\n        .post('/api/orders')\n        .send(validGuestOrderData)\n        .expect(201);\n      \n      const orderId = createResponse.body.order._id;\n      \n      // Get order details\n      const response = await request(app)\n        .get(`/api/orders/${orderId}`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.order).toHaveProperty('orderNumber');\n      expect(response.body.order).toHaveProperty('guestInfo');\n      expect(response.body.order).toHaveProperty('items');\n      expect(response.body.order).toHaveProperty('shippingAddress');\n      expect(response.body.order).toHaveProperty('total');\n      \n      // Ensure wholesaler info is not exposed in public API\n      expect(response.body.order.items[0].wholesaler).toEqual({\n        notified: false,\n        notifiedAt: null\n      });\n    });\n    \n    it('should return 404 for non-existent order', async () => {\n      const fakeId = new mongoose.Types.ObjectId();\n      \n      const response = await request(app)\n        .get(`/api/orders/${fakeId}`)\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('ORDER_NOT_FOUND');\n    });\n  });\n  \n  describe('PUT /api/orders/:id/status', () => {\n    it('should update order status', async () => {\n      // Create order first\n      const createResponse = await request(app)\n        .post('/api/orders')\n        .send(validGuestOrderData)\n        .expect(201);\n      \n      const orderId = createResponse.body.order._id;\n      \n      // Update status\n      const response = await request(app)\n        .put(`/api/orders/${orderId}/status`)\n        .send({ status: 'processing' })\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toBe('Order status updated');\n      expect(response.body.order.status).toBe('processing');\n      \n      // Verify in database\n      const updatedOrder = await Order.findById(orderId);\n      expect(updatedOrder.status).toBe('processing');\n    });\n    \n    it('should reject invalid status', async () => {\n      const createResponse = await request(app)\n        .post('/api/orders')\n        .send(validGuestOrderData)\n        .expect(201);\n      \n      const orderId = createResponse.body.order._id;\n      \n      const response = await request(app)\n        .put(`/api/orders/${orderId}/status`)\n        .send({ status: 'invalid-status' })\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('INVALID_STATUS');\n    });\n    \n    it('should return 404 for non-existent order', async () => {\n      const fakeId = new mongoose.Types.ObjectId();\n      \n      const response = await request(app)\n        .put(`/api/orders/${fakeId}/status`)\n        .send({ status: 'processing' })\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('ORDER_NOT_FOUND');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}