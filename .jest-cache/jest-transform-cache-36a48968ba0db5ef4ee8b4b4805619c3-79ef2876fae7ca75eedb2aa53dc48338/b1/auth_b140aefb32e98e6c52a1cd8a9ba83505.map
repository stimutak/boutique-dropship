{"version":3,"names":["express","require","router","Router","jwt","crypto","body","validationResult","User","requireAuth","authenticateToken","validateCSRFToken","generateToken","userId","sign","process","env","JWT_SECRET","expiresIn","validateRegistration","isEmail","normalizeEmail","withMessage","isLength","min","trim","max","optional","isString","validateLogin","notEmpty","validateForgotPassword","validateResetPassword","post","req","res","errors","isEmpty","status","json","success","error","code","message","details","array","email","password","firstName","lastName","phone","preferences","existingUser","findOne","userData","user","create","token","_id","lastLogin","Date","save","wantsEmail","sendWelcomeEmail","welcomeData","emailResult","console","emailError","cookie","httpOnly","secure","NODE_ENV","sameSite","maxAge","path","data","toPublicJSON","guestCartItems","isMatch","comparePassword","isActive","cartInfo","itemCount","mergedItems","cart","resetToken","resetTokenHash","randomBytes","toString","createHash","update","digest","passwordResetToken","passwordResetExpiry","now","sendPasswordResetEmail","resetUrl","FRONTEND_URL","log","Promise","resolve","setTimeout","Math","random","$gt","undefined","authToken","get","findById","select","authenticated","put","isArray","isBoolean","isObject","startTime","addresses","updateData","currentPreferences","toObject","emailPreferences","$ne","findByIdAndUpdate","new","runValidators","totalDuration","performance","duration","target","updateError","stack","currentPassword","newPassword","timestamp","session","cartId","guestId","destroy","err","clearCookie","cartCleared","isIn","addressData","type","street","city","state","zipCode","country","isDefault","forEach","addr","push","addressId","params","field","address","id","Object","assign","delete","remove","patch","decoded","verify","newToken","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\nconst { body, validationResult } = require('express-validator');\nconst User = require('../models/User');\nconst { requireAuth, authenticateToken } = require('../middleware/auth');\nconst { validateCSRFToken } = require('../middleware/sessionCSRF');\n\n// Generate JWT token\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '7d' });\n};\n\n// Validation middleware for registration\nconst validateRegistration = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long'),\n  body('firstName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('First name is required and must be less than 50 characters'),\n  body('lastName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('Last name is required and must be less than 50 characters'),\n  body('phone')\n    .optional()\n    .isString()\n    .isLength({ min: 7, max: 30 })\n    .withMessage('Phone number must be between 7 and 30 characters')\n];\n\n// Validation middleware for login\nconst validateLogin = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\n// Validation for forgot password\nconst validateForgotPassword = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required')\n];\n\n// Validation for reset password\nconst validateResetPassword = [\n  body('token')\n    .notEmpty()\n    .withMessage('Reset token is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long')\n];\n\n// Register new user\nrouter.post('/register', validateRegistration, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, firstName, lastName, phone, preferences } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(409).json({\n        success: false,\n        error: {\n          code: 'USER_EXISTS',\n          message: 'User with this email already exists'\n        }\n      });\n    }\n\n    // Create new user\n    const userData = {\n      email,\n      password,\n      firstName,\n      lastName,\n      phone,\n      preferences: preferences || {}\n    };\n\n    const user = await User.create(userData);\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Send welcome email\n    try {\n      if (user.wantsEmail('welcomeEmails')) {\n        const { sendWelcomeEmail } = require('../utils/emailService');\n        \n        const welcomeData = {\n          firstName: user.firstName,\n          email: user.email\n        };\n\n        const emailResult = await sendWelcomeEmail(user.email, welcomeData);\n        if (!emailResult.success) {\n          console.error('Failed to send welcome email:', emailResult.error);\n        }\n      }\n    } catch (emailError) {\n      console.error('Error sending welcome email:', emailError);\n    }\n\n    // Set token as httpOnly cookie for security\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      path: '/'\n    });\n\n    res.status(201).json({\n      success: true,\n      message: 'User registered successfully',\n      data: {\n        token, // Still send token for backward compatibility during migration\n        user: user.toPublicJSON()\n      }\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'REGISTRATION_ERROR',\n        message: 'Failed to register user'\n      }\n    });\n  }\n});\n\n// Login user with enhanced cart merging\nrouter.post('/login', validateLogin, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, guestCartItems } = req.body;\n\n    // Find user\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return res.status(403).json({\n        success: false,\n        error: {\n          code: 'ACCOUNT_DISABLED',\n          message: 'Your account has been disabled'\n        }\n      });\n    }\n\n    // Generate token\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Cart info (simplified after removing cartService)\n    let cartInfo = { itemCount: 0, mergedItems: 0 };\n    \n    // Guest cart merging would happen on the frontend after login\n\n    // Set token as httpOnly cookie for security\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      path: '/'\n    });\n\n    res.json({\n      success: true,\n      message: 'Login successful',\n      data: {\n        token, // Still send token for backward compatibility during migration\n        user: user.toPublicJSON(),\n        cart: cartInfo\n      }\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGIN_ERROR',\n        message: 'Failed to login'\n      }\n    });\n  }\n});\n\n// Forgot password - Fixed timing attack vulnerability\nrouter.post('/forgot-password', validateForgotPassword, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email } = req.body;\n    \n    // Always execute the same operations to prevent timing attacks\n    let user, resetToken, resetTokenHash;\n    \n    // Find user\n    user = await User.findOne({ email });\n    \n    // Always generate a token (even if user doesn't exist) to normalize timing\n    resetToken = crypto.randomBytes(32).toString('hex');\n    resetTokenHash = crypto\n      .createHash('sha256')\n      .update(resetToken)\n      .digest('hex');\n\n    // If user exists, save the reset token and send email\n    if (user) {\n      // Save reset token and expiry\n      user.passwordResetToken = resetTokenHash;\n      user.passwordResetExpiry = Date.now() + 3600000; // 1 hour\n      await user.save();\n\n      // Send reset email\n      try {\n        const { sendPasswordResetEmail } = require('../utils/emailService');\n        const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;\n        \n        const emailResult = await sendPasswordResetEmail(user.email, {\n          firstName: user.firstName,\n          resetToken,\n          resetUrl\n        });\n        \n        if (!emailResult.success) {\n          console.error('Failed to send reset email:', emailResult.error);\n        }\n        \n        // Log reset URL for development when email is not configured\n        if (emailResult.message === 'Email skipped - not configured') {\n          console.log('\\n========================================');\n          console.log('PASSWORD RESET URL (Email not configured)');\n          console.log('========================================');\n          console.log(`User: ${user.email}`);\n          console.log(`Reset URL: ${resetUrl}`);\n          console.log('========================================\\n');\n        }\n      } catch (emailError) {\n        console.error('Error sending reset email:', emailError);\n      }\n    } else {\n      // If user doesn't exist, still perform the same cryptographic operations\n      // and simulate sending an email to normalize response time\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 100 + 50));\n    }\n\n    // Always return the same response regardless of whether user exists\n    res.json({\n      success: true,\n      message: 'If an account exists with this email, a password reset link will be sent.'\n    });\n\n  } catch (error) {\n    console.error('Forgot password error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'FORGOT_PASSWORD_ERROR',\n        message: 'Failed to process password reset request'\n      }\n    });\n  }\n});\n\n// Reset password\nrouter.post('/reset-password', validateResetPassword, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { token, password } = req.body;\n    \n    // Hash the token to match stored version\n    const resetTokenHash = crypto\n      .createHash('sha256')\n      .update(token)\n      .digest('hex');\n\n    // Find user with valid reset token\n    const user = await User.findOne({\n      passwordResetToken: resetTokenHash,\n      passwordResetExpiry: { $gt: Date.now() }\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Password reset token is invalid or has expired'\n        }\n      });\n    }\n\n    // Update password\n    user.password = password;\n    user.passwordResetToken = undefined;\n    user.passwordResetExpiry = undefined;\n    await user.save();\n\n    // Generate new auth token\n    const authToken = generateToken(user._id);\n\n    res.json({\n      success: true,\n      message: 'Password has been reset successfully',\n      token: authToken,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Reset password error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'RESET_PASSWORD_ERROR',\n        message: 'Failed to reset password'\n      }\n    });\n  }\n});\n\n// Verify token from cookie (for auth persistence check)\nrouter.get('/verify', authenticateToken, async (req, res) => {\n  try {\n    // If authenticateToken middleware passed, user is authenticated\n    if (!req.user) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'NOT_AUTHENTICATED',\n          message: 'Not authenticated'\n        }\n      });\n    }\n\n    // Get fresh user data\n    const user = await User.findById(req.user._id).select('-password');\n    if (!user || !user.isActive) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'USER_NOT_FOUND',\n          message: 'User not found or inactive'\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        user: user.toPublicJSON(),\n        authenticated: true\n      }\n    });\n  } catch (error) {\n    console.error('Token verification error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'VERIFICATION_ERROR',\n        message: 'Failed to verify authentication'\n      }\n    });\n  }\n});\n\n// Get user profile\nrouter.get('/profile', requireAuth, async (req, res) => {\n  try {\n    // Fetch fresh user data to ensure all fields are populated correctly\n    const user = await User.findById(req.user._id).select('-password');\n    \n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'USER_NOT_FOUND',\n          message: 'User not found'\n        }\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        user: user.toPublicJSON()\n      }\n    });\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_FETCH_ERROR',\n        message: 'Failed to fetch user profile'\n      }\n    });\n  }\n});\n\n// Update user profile with optimistic updates and performance optimization\nrouter.put('/profile', requireAuth, validateCSRFToken, [\n  body('firstName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('First name must be 1-50 characters'),\n  body('lastName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('Last name must be 1-50 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('email').optional().isEmail().withMessage('Valid email is required'),\n  body('addresses').optional().isArray().withMessage('Addresses must be an array'),\n  body('addresses.*.street').optional().trim().isLength({ min: 1, max: 100 }).withMessage('Street must be 1-100 characters'),\n  body('addresses.*.city').optional().trim().isLength({ min: 1, max: 50 }).withMessage('City must be 1-50 characters'),\n  body('addresses.*.state').optional().trim().isLength({ min: 1, max: 50 }).withMessage('State must be 1-50 characters'),\n  body('addresses.*.zipCode').optional().trim().isLength({ min: 5, max: 10 }).withMessage('ZIP code must be 5-10 characters'),\n  body('addresses.*.country').optional().trim().isLength({ min: 2, max: 2 }).withMessage('Country must be 2-letter code'),\n  body('preferences.notifications').optional().isBoolean().withMessage('Notifications must be boolean'),\n  body('preferences.newsletter').optional().isBoolean().withMessage('Newsletter must be boolean'),\n  body('preferences.emailPreferences').optional().isObject().withMessage('Email preferences must be an object')\n], async (req, res) => {\n  const startTime = Date.now();\n  \n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      console.error('Profile update validation errors:', errors.array());\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { firstName, lastName, phone, email, addresses, preferences } = req.body;\n    \n    // Build update data object\n    const updateData = {};\n    if (firstName !== undefined) updateData.firstName = firstName;\n    if (lastName !== undefined) updateData.lastName = lastName;\n    if (phone !== undefined) updateData.phone = phone;\n    if (email !== undefined) updateData.email = email;\n    if (addresses !== undefined) updateData.addresses = addresses;\n    \n    // Handle nested preferences updates\n    if (preferences !== undefined) {\n      // Get current preferences safely\n      let currentPreferences = {};\n      if (req.user.preferences) {\n        currentPreferences = typeof req.user.preferences.toObject === 'function' \n          ? req.user.preferences.toObject() \n          : req.user.preferences;\n      }\n      \n      updateData.preferences = { \n        ...currentPreferences,\n        ...preferences\n      };\n      \n      // Handle nested emailPreferences\n      if (preferences.emailPreferences) {\n        updateData.preferences.emailPreferences = {\n          ...currentPreferences.emailPreferences || {},\n          ...preferences.emailPreferences\n        };\n      }\n    }\n\n    // Update user directly\n    try {\n      // Check if email is being changed and already exists\n      if (email && email !== req.user.email) {\n        const existingUser = await User.findOne({ email, _id: { $ne: req.user._id } });\n        if (existingUser) {\n          return res.status(409).json({\n            success: false,\n            error: {\n              code: 'EMAIL_EXISTS',\n              message: 'Email address is already in use'\n            }\n          });\n        }\n      }\n\n      // Update the user\n      const user = await User.findByIdAndUpdate(\n        req.user._id,\n        updateData,\n        { new: true, runValidators: true }\n      ).select('-password');\n\n      if (!user) {\n        return res.status(404).json({\n          success: false,\n          error: {\n            code: 'USER_NOT_FOUND',\n            message: 'User not found'\n          }\n        });\n      }\n\n      const totalDuration = Date.now() - startTime;\n\n      // Send success response\n      res.json({\n        success: true,\n        message: 'Profile updated successfully',\n        data: {\n          user: user.toPublicJSON()\n        },\n        performance: {\n          duration: totalDuration,\n          target: '200ms',\n          status: totalDuration <= 200 ? 'optimal' : 'needs_optimization'\n        }\n      });\n    } catch (updateError) {\n      console.error('Profile update error:', updateError);\n      return res.status(500).json({\n        success: false,\n        error: {\n          code: 'PROFILE_UPDATE_ERROR',\n          message: updateError.message || 'Failed to update profile'\n        }\n      });\n    }\n\n  } catch (error) {\n    console.error('Profile update error:', error);\n    console.error('Error stack:', error.stack);\n    console.error('Request body:', req.body);\n    \n    // Handle specific MongoDB errors\n    if (error.code === 11000) {\n      return res.status(409).json({\n        success: false,\n        error: {\n          code: 'DUPLICATE_EMAIL',\n          message: 'Email address is already in use'\n        }\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_UPDATE_ERROR',\n        message: 'Failed to update profile',\n        details: error.message\n      }\n    });\n  }\n});\n\n// Change password\nrouter.post('/change-password', requireAuth, [\n  body('currentPassword').notEmpty().withMessage('Current password is required'),\n  body('newPassword').isLength({ min: 6 }).withMessage('New password must be at least 6 characters long')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { currentPassword, newPassword } = req.body;\n\n    // Get user with password field\n    const user = await User.findById(req.user._id).select('+password');\n\n    // Verify current password\n    const isMatch = await user.comparePassword(currentPassword);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_PASSWORD',\n          message: 'Current password is incorrect'\n        }\n      });\n    }\n\n    // Update password\n    user.password = newPassword;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password changed successfully'\n    });\n  } catch (error) {\n    console.error('Password change error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_CHANGE_ERROR',\n        message: 'Failed to change password'\n      }\n    });\n  }\n});\n\n// Logout (optional - mainly for server-side session cleanup)\nrouter.post('/logout', requireAuth, async (req, res) => {\n  try {\n    const userId = req.user._id;\n    \n    // Log logout event\n    console.log('User logout:', {\n      userId: userId,\n      timestamp: new Date()\n    });\n\n    // Clear any server-side sessions and cleanup cart state\n    if (req.session) {\n      // Clear any cart session IDs to prevent ghost carts\n      delete req.session.cartId;\n      delete req.session.guestId;\n      \n      // Clear the session\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Session destruction error:', err);\n        }\n      });\n    }\n\n    // Clear the JWT cookie\n    res.clearCookie('token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      path: '/'\n    });\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully',\n      cartCleared: true // Signal to frontend to clear cart state\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGOUT_ERROR',\n        message: 'Failed to logout'\n      }\n    });\n  }\n});\n\n// Address management endpoints without authentication loss\n\n// Add new address\nrouter.post('/profile/addresses', requireAuth, validateCSRFToken, [\n  body('type').isIn(['shipping', 'billing']).withMessage('Address type must be shipping or billing'),\n  body('firstName').trim().isLength({ min: 1, max: 50 }).withMessage('First name is required'),\n  body('lastName').trim().isLength({ min: 1, max: 50 }).withMessage('Last name is required'),\n  body('street').trim().isLength({ min: 1, max: 100 }).withMessage('Street address is required'),\n  body('city').trim().isLength({ min: 1, max: 50 }).withMessage('City is required'),\n  body('state').trim().isLength({ min: 1, max: 50 }).withMessage('State is required'),\n  body('zipCode').trim().isLength({ min: 3, max: 20 }).withMessage('ZIP code is required'),\n  body('country').optional().trim().isLength({ min: 2, max: 3 }).withMessage('Country code must be 2-3 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('isDefault').optional().isBoolean().withMessage('isDefault must be boolean')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid address data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const addressData = {\n      type: req.body.type,\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      street: req.body.street,\n      city: req.body.city,\n      state: req.body.state,\n      zipCode: req.body.zipCode,\n      country: req.body.country || 'US',\n      phone: req.body.phone,\n      isDefault: req.body.isDefault || false\n    };\n\n    // Add address to user\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'USER_NOT_FOUND',\n          message: 'User not found'\n        }\n      });\n    }\n\n    // If this is the default address, unset other defaults\n    if (addressData.isDefault) {\n      user.addresses.forEach(addr => {\n        addr.isDefault = false;\n      });\n    }\n\n    user.addresses.push(addressData);\n    await user.save();\n\n    res.status(201).json({\n      success: true,\n      message: 'Address added successfully',\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Add address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_ADD_ERROR',\n        message: 'Failed to add address'\n      }\n    });\n  }\n});\n\n// Update existing address\nrouter.put('/profile/addresses/:addressId', requireAuth, validateCSRFToken, [\n  body('type').optional().isIn(['shipping', 'billing']).withMessage('Address type must be shipping or billing'),\n  body('firstName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('First name must be 1-50 characters'),\n  body('lastName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('Last name must be 1-50 characters'),\n  body('street').optional().trim().isLength({ min: 1, max: 100 }).withMessage('Street must be 1-100 characters'),\n  body('city').optional().trim().isLength({ min: 1, max: 50 }).withMessage('City must be 1-50 characters'),\n  body('state').optional().trim().isLength({ min: 1, max: 50 }).withMessage('State must be 1-50 characters'),\n  body('zipCode').optional().trim().isLength({ min: 3, max: 20 }).withMessage('ZIP code must be 3-20 characters'),\n  body('country').optional().trim().isLength({ min: 2, max: 3 }).withMessage('Country code must be 2-3 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('isDefault').optional().isBoolean().withMessage('isDefault must be boolean')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid address data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { addressId } = req.params;\n    const updateData = {};\n    \n    // Only include fields that are provided\n    ['type', 'firstName', 'lastName', 'street', 'city', 'state', 'zipCode', 'country', 'phone', 'isDefault']\n      .forEach(field => {\n        if (req.body[field] !== undefined) {\n          updateData[field] = req.body[field];\n        }\n      });\n\n    // Update address on user\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'USER_NOT_FOUND',\n          message: 'User not found'\n        }\n      });\n    }\n\n    const address = user.addresses.id(addressId);\n    if (!address) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_NOT_FOUND',\n          message: 'Address not found'\n        }\n      });\n    }\n\n    // If setting as default, unset other defaults\n    if (updateData.isDefault) {\n      user.addresses.forEach(addr => {\n        if (addr._id.toString() !== addressId) {\n          addr.isDefault = false;\n        }\n      });\n    }\n\n    // Update the address\n    Object.assign(address, updateData);\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Address updated successfully',\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Update address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_UPDATE_ERROR',\n        message: 'Failed to update address'\n      }\n    });\n  }\n});\n\n// Delete address\nrouter.delete('/profile/addresses/:addressId', requireAuth, validateCSRFToken, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n\n    // Delete address from user\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'USER_NOT_FOUND',\n          message: 'User not found'\n        }\n      });\n    }\n\n    const address = user.addresses.id(addressId);\n    if (!address) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_NOT_FOUND',\n          message: 'Address not found'\n        }\n      });\n    }\n\n    // Remove the address\n    address.remove();\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Address deleted successfully',\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Delete address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_DELETE_ERROR',\n        message: 'Failed to delete address'\n      }\n    });\n  }\n});\n\n// Set default address\nrouter.patch('/profile/addresses/:addressId/default', requireAuth, validateCSRFToken, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n\n    // Set default address\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'USER_NOT_FOUND',\n          message: 'User not found'\n        }\n      });\n    }\n\n    const address = user.addresses.id(addressId);\n    if (!address) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_NOT_FOUND',\n          message: 'Address not found'\n        }\n      });\n    }\n\n    // Unset all other defaults and set this one\n    user.addresses.forEach(addr => {\n      addr.isDefault = addr._id.toString() === addressId;\n    });\n    \n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Default address updated successfully',\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Set default address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_DEFAULT_ERROR',\n        message: 'Failed to set default address'\n      }\n    });\n  }\n});\n\n// Refresh token endpoint\nrouter.post('/refresh-token', async (req, res) => {\n  try {\n    const { token } = req.body;\n    \n    if (!token) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MISSING_TOKEN',\n          message: 'Token is required'\n        }\n      });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n    \n    if (!user || !user.isActive) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Invalid token'\n        }\n      });\n    }\n\n    const newToken = generateToken(user._id);\n    \n    res.json({\n      success: true,\n      token: newToken,\n      user: user.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Token refresh error:', error);\n    res.status(401).json({\n      success: false,\n      error: {\n        code: 'TOKEN_REFRESH_ERROR',\n        message: 'Failed to refresh token'\n      }\n    });\n  }\n});\n\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,GAAG,GAAGH,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAAEK,IAAI;EAAEC;AAAiB,CAAC,GAAGN,OAAO,CAAC,mBAAmB,CAAC;AAC/D,MAAMO,IAAI,GAAGP,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAM;EAAEQ,WAAW;EAAEC;AAAkB,CAAC,GAAGT,OAAO,CAAC,oBAAoB,CAAC;AACxE,MAAM;EAAEU;AAAkB,CAAC,GAAGV,OAAO,CAAC,2BAA2B,CAAC;;AAElE;AACA,MAAMW,aAAa,GAAIC,MAAM,IAAK;EAChC,OAAOT,GAAG,CAACU,IAAI,CAAC;IAAED;EAAO,CAAC,EAAEE,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;IAAEC,SAAS,EAAE;EAAK,CAAC,CAAC;AAC1E,CAAC;;AAED;AACA,MAAMC,oBAAoB,GAAG,CAC3Bb,IAAI,CAAC,OAAO,CAAC,CACVc,OAAO,CAAC,CAAC,CACTC,cAAc,CAAC,CAAC,CAChBC,WAAW,CAAC,yBAAyB,CAAC,EACzChB,IAAI,CAAC,UAAU,CAAC,CACbiB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CACpBF,WAAW,CAAC,6CAA6C,CAAC,EAC7DhB,IAAI,CAAC,WAAW,CAAC,CACdmB,IAAI,CAAC,CAAC,CACNF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAC7BJ,WAAW,CAAC,4DAA4D,CAAC,EAC5EhB,IAAI,CAAC,UAAU,CAAC,CACbmB,IAAI,CAAC,CAAC,CACNF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAC7BJ,WAAW,CAAC,2DAA2D,CAAC,EAC3EhB,IAAI,CAAC,OAAO,CAAC,CACVqB,QAAQ,CAAC,CAAC,CACVC,QAAQ,CAAC,CAAC,CACVL,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAC7BJ,WAAW,CAAC,kDAAkD,CAAC,CACnE;;AAED;AACA,MAAMO,aAAa,GAAG,CACpBvB,IAAI,CAAC,OAAO,CAAC,CACVc,OAAO,CAAC,CAAC,CACTC,cAAc,CAAC,CAAC,CAChBC,WAAW,CAAC,yBAAyB,CAAC,EACzChB,IAAI,CAAC,UAAU,CAAC,CACbwB,QAAQ,CAAC,CAAC,CACVR,WAAW,CAAC,sBAAsB,CAAC,CACvC;;AAED;AACA,MAAMS,sBAAsB,GAAG,CAC7BzB,IAAI,CAAC,OAAO,CAAC,CACVc,OAAO,CAAC,CAAC,CACTC,cAAc,CAAC,CAAC,CAChBC,WAAW,CAAC,yBAAyB,CAAC,CAC1C;;AAED;AACA,MAAMU,qBAAqB,GAAG,CAC5B1B,IAAI,CAAC,OAAO,CAAC,CACVwB,QAAQ,CAAC,CAAC,CACVR,WAAW,CAAC,yBAAyB,CAAC,EACzChB,IAAI,CAAC,UAAU,CAAC,CACbiB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CACpBF,WAAW,CAAC,6CAA6C,CAAC,CAC9D;;AAED;AACApB,MAAM,CAAC+B,IAAI,CAAC,WAAW,EAAEd,oBAAoB,EAAE,OAAOe,GAAG,EAAEC,GAAG,KAAK;EACjE,IAAI;IACF,MAAMC,MAAM,GAAG7B,gBAAgB,CAAC2B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,oBAAoB;UAC7BC,OAAO,EAAER,MAAM,CAACS,KAAK,CAAC;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEC,KAAK;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAY,CAAC,GAAGjB,GAAG,CAAC5B,IAAI;;IAE7E;IACA,MAAM8C,YAAY,GAAG,MAAM5C,IAAI,CAAC6C,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;IAClD,IAAIM,YAAY,EAAE;MAChB,OAAOjB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,aAAa;UACnBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMW,QAAQ,GAAG;MACfR,KAAK;MACLC,QAAQ;MACRC,SAAS;MACTC,QAAQ;MACRC,KAAK;MACLC,WAAW,EAAEA,WAAW,IAAI,CAAC;IAC/B,CAAC;IAED,MAAMI,IAAI,GAAG,MAAM/C,IAAI,CAACgD,MAAM,CAACF,QAAQ,CAAC;IACxC,MAAMG,KAAK,GAAG7C,aAAa,CAAC2C,IAAI,CAACG,GAAG,CAAC;;IAErC;IACAH,IAAI,CAACI,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC3B,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;;IAEjB;IACA,IAAI;MACF,IAAIN,IAAI,CAACO,UAAU,CAAC,eAAe,CAAC,EAAE;QACpC,MAAM;UAAEC;QAAiB,CAAC,GAAG9D,OAAO,CAAC,uBAAuB,CAAC;QAE7D,MAAM+D,WAAW,GAAG;UAClBhB,SAAS,EAAEO,IAAI,CAACP,SAAS;UACzBF,KAAK,EAAES,IAAI,CAACT;QACd,CAAC;QAED,MAAMmB,WAAW,GAAG,MAAMF,gBAAgB,CAACR,IAAI,CAACT,KAAK,EAAEkB,WAAW,CAAC;QACnE,IAAI,CAACC,WAAW,CAACzB,OAAO,EAAE;UACxB0B,OAAO,CAACzB,KAAK,CAAC,+BAA+B,EAAEwB,WAAW,CAACxB,KAAK,CAAC;QACnE;MACF;IACF,CAAC,CAAC,OAAO0B,UAAU,EAAE;MACnBD,OAAO,CAACzB,KAAK,CAAC,8BAA8B,EAAE0B,UAAU,CAAC;IAC3D;;IAEA;IACAhC,GAAG,CAACiC,MAAM,CAAC,OAAO,EAAEX,KAAK,EAAE;MACzBY,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAEvD,OAAO,CAACC,GAAG,CAACuD,QAAQ,KAAK,YAAY;MAC7CC,QAAQ,EAAE,QAAQ;MAClBC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MACjCC,IAAI,EAAE;IACR,CAAC,CAAC;IAEFvC,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,8BAA8B;MACvCgC,IAAI,EAAE;QACJlB,KAAK;QAAE;QACPF,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;MAC1B;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,oBAAoB;QAC1BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC+B,IAAI,CAAC,QAAQ,EAAEJ,aAAa,EAAE,OAAOK,GAAG,EAAEC,GAAG,KAAK;EACvD,IAAI;IACF,MAAMC,MAAM,GAAG7B,gBAAgB,CAAC2B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,oBAAoB;UAC7BC,OAAO,EAAER,MAAM,CAACS,KAAK,CAAC;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEC,KAAK;MAAEC,QAAQ;MAAE8B;IAAe,CAAC,GAAG3C,GAAG,CAAC5B,IAAI;;IAEpD;IACA,MAAMiD,IAAI,GAAG,MAAM/C,IAAI,CAAC6C,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;IAC1C,IAAI,CAACS,IAAI,EAAE;MACT,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,qBAAqB;UAC3BC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMmC,OAAO,GAAG,MAAMvB,IAAI,CAACwB,eAAe,CAAChC,QAAQ,CAAC;IACpD,IAAI,CAAC+B,OAAO,EAAE;MACZ,OAAO3C,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,qBAAqB;UAC3BC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,IAAI,CAACY,IAAI,CAACyB,QAAQ,EAAE;MAClB,OAAO7C,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMc,KAAK,GAAG7C,aAAa,CAAC2C,IAAI,CAACG,GAAG,CAAC;;IAErC;IACAH,IAAI,CAACI,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC3B,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;;IAEjB;IACA,IAAIoB,QAAQ,GAAG;MAAEC,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAE,CAAC;;IAE/C;;IAEA;IACAhD,GAAG,CAACiC,MAAM,CAAC,OAAO,EAAEX,KAAK,EAAE;MACzBY,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAEvD,OAAO,CAACC,GAAG,CAACuD,QAAQ,KAAK,YAAY;MAC7CC,QAAQ,EAAE,QAAQ;MAClBC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MACjCC,IAAI,EAAE;IACR,CAAC,CAAC;IAEFvC,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,kBAAkB;MAC3BgC,IAAI,EAAE;QACJlB,KAAK;QAAE;QACPF,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC,CAAC;QACzBQ,IAAI,EAAEH;MACR;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpCN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,aAAa;QACnBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC+B,IAAI,CAAC,kBAAkB,EAAEF,sBAAsB,EAAE,OAAOG,GAAG,EAAEC,GAAG,KAAK;EAC1E,IAAI;IACF,MAAMC,MAAM,GAAG7B,gBAAgB,CAAC2B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,oBAAoB;UAC7BC,OAAO,EAAER,MAAM,CAACS,KAAK,CAAC;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEC;IAAM,CAAC,GAAGZ,GAAG,CAAC5B,IAAI;;IAE1B;IACA,IAAIiD,IAAI,EAAE8B,UAAU,EAAEC,cAAc;;IAEpC;IACA/B,IAAI,GAAG,MAAM/C,IAAI,CAAC6C,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;;IAEpC;IACAuC,UAAU,GAAGhF,MAAM,CAACkF,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;IACnDF,cAAc,GAAGjF,MAAM,CACpBoF,UAAU,CAAC,QAAQ,CAAC,CACpBC,MAAM,CAACL,UAAU,CAAC,CAClBM,MAAM,CAAC,KAAK,CAAC;;IAEhB;IACA,IAAIpC,IAAI,EAAE;MACR;MACAA,IAAI,CAACqC,kBAAkB,GAAGN,cAAc;MACxC/B,IAAI,CAACsC,mBAAmB,GAAGjC,IAAI,CAACkC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;MACjD,MAAMvC,IAAI,CAACM,IAAI,CAAC,CAAC;;MAEjB;MACA,IAAI;QACF,MAAM;UAAEkC;QAAuB,CAAC,GAAG9F,OAAO,CAAC,uBAAuB,CAAC;QACnE,MAAM+F,QAAQ,GAAG,GAAGjF,OAAO,CAACC,GAAG,CAACiF,YAAY,IAAI,uBAAuB,yBAAyBZ,UAAU,EAAE;QAE5G,MAAMpB,WAAW,GAAG,MAAM8B,sBAAsB,CAACxC,IAAI,CAACT,KAAK,EAAE;UAC3DE,SAAS,EAAEO,IAAI,CAACP,SAAS;UACzBqC,UAAU;UACVW;QACF,CAAC,CAAC;QAEF,IAAI,CAAC/B,WAAW,CAACzB,OAAO,EAAE;UACxB0B,OAAO,CAACzB,KAAK,CAAC,6BAA6B,EAAEwB,WAAW,CAACxB,KAAK,CAAC;QACjE;;QAEA;QACA,IAAIwB,WAAW,CAACtB,OAAO,KAAK,gCAAgC,EAAE;UAC5DuB,OAAO,CAACgC,GAAG,CAAC,4CAA4C,CAAC;UACzDhC,OAAO,CAACgC,GAAG,CAAC,2CAA2C,CAAC;UACxDhC,OAAO,CAACgC,GAAG,CAAC,0CAA0C,CAAC;UACvDhC,OAAO,CAACgC,GAAG,CAAC,SAAS3C,IAAI,CAACT,KAAK,EAAE,CAAC;UAClCoB,OAAO,CAACgC,GAAG,CAAC,cAAcF,QAAQ,EAAE,CAAC;UACrC9B,OAAO,CAACgC,GAAG,CAAC,4CAA4C,CAAC;QAC3D;MACF,CAAC,CAAC,OAAO/B,UAAU,EAAE;QACnBD,OAAO,CAACzB,KAAK,CAAC,4BAA4B,EAAE0B,UAAU,CAAC;MACzD;IACF,CAAC,MAAM;MACL;MACA;MACA,MAAM,IAAIgC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAC7E;;IAEA;IACApE,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE;IACX,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,uBAAuB;QAC7BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC+B,IAAI,CAAC,iBAAiB,EAAED,qBAAqB,EAAE,OAAOE,GAAG,EAAEC,GAAG,KAAK;EACxE,IAAI;IACF,MAAMC,MAAM,GAAG7B,gBAAgB,CAAC2B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,oBAAoB;UAC7BC,OAAO,EAAER,MAAM,CAACS,KAAK,CAAC;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEY,KAAK;MAAEV;IAAS,CAAC,GAAGb,GAAG,CAAC5B,IAAI;;IAEpC;IACA,MAAMgF,cAAc,GAAGjF,MAAM,CAC1BoF,UAAU,CAAC,QAAQ,CAAC,CACpBC,MAAM,CAACjC,KAAK,CAAC,CACbkC,MAAM,CAAC,KAAK,CAAC;;IAEhB;IACA,MAAMpC,IAAI,GAAG,MAAM/C,IAAI,CAAC6C,OAAO,CAAC;MAC9BuC,kBAAkB,EAAEN,cAAc;MAClCO,mBAAmB,EAAE;QAAEW,GAAG,EAAE5C,IAAI,CAACkC,GAAG,CAAC;MAAE;IACzC,CAAC,CAAC;IAEF,IAAI,CAACvC,IAAI,EAAE;MACT,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,eAAe;UACrBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACAY,IAAI,CAACR,QAAQ,GAAGA,QAAQ;IACxBQ,IAAI,CAACqC,kBAAkB,GAAGa,SAAS;IACnClD,IAAI,CAACsC,mBAAmB,GAAGY,SAAS;IACpC,MAAMlD,IAAI,CAACM,IAAI,CAAC,CAAC;;IAEjB;IACA,MAAM6C,SAAS,GAAG9F,aAAa,CAAC2C,IAAI,CAACG,GAAG,CAAC;IAEzCvB,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,sCAAsC;MAC/Cc,KAAK,EAAEiD,SAAS;MAChBnD,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,sBAAsB;QAC5BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAACyG,GAAG,CAAC,SAAS,EAAEjG,iBAAiB,EAAE,OAAOwB,GAAG,EAAEC,GAAG,KAAK;EAC3D,IAAI;IACF;IACA,IAAI,CAACD,GAAG,CAACqB,IAAI,EAAE;MACb,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,mBAAmB;UACzBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMY,IAAI,GAAG,MAAM/C,IAAI,CAACoG,QAAQ,CAAC1E,GAAG,CAACqB,IAAI,CAACG,GAAG,CAAC,CAACmD,MAAM,CAAC,WAAW,CAAC;IAClE,IAAI,CAACtD,IAAI,IAAI,CAACA,IAAI,CAACyB,QAAQ,EAAE;MAC3B,OAAO7C,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,gBAAgB;UACtBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEAR,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbmC,IAAI,EAAE;QACJpB,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC,CAAC;QACzBkC,aAAa,EAAE;MACjB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOrE,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,oBAAoB;QAC1BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAACyG,GAAG,CAAC,UAAU,EAAElG,WAAW,EAAE,OAAOyB,GAAG,EAAEC,GAAG,KAAK;EACtD,IAAI;IACF;IACA,MAAMoB,IAAI,GAAG,MAAM/C,IAAI,CAACoG,QAAQ,CAAC1E,GAAG,CAACqB,IAAI,CAACG,GAAG,CAAC,CAACmD,MAAM,CAAC,WAAW,CAAC;IAElE,IAAI,CAACtD,IAAI,EAAE;MACT,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,gBAAgB;UACtBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEAR,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbmC,IAAI,EAAE;QACJpB,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;MAC1B;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,qBAAqB;QAC3BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC6G,GAAG,CAAC,UAAU,EAAEtG,WAAW,EAAEE,iBAAiB,EAAE,CACrDL,IAAI,CAAC,WAAW,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,oCAAoC,CAAC,EACnHhB,IAAI,CAAC,UAAU,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,mCAAmC,CAAC,EACjHhB,IAAI,CAAC,OAAO,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACL,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EAC9GhB,IAAI,CAAC,OAAO,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACP,OAAO,CAAC,CAAC,CAACE,WAAW,CAAC,yBAAyB,CAAC,EACzEhB,IAAI,CAAC,WAAW,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACqF,OAAO,CAAC,CAAC,CAAC1F,WAAW,CAAC,4BAA4B,CAAC,EAChFhB,IAAI,CAAC,oBAAoB,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAI,CAAC,CAAC,CAACJ,WAAW,CAAC,iCAAiC,CAAC,EAC1HhB,IAAI,CAAC,kBAAkB,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,8BAA8B,CAAC,EACpHhB,IAAI,CAAC,mBAAmB,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EACtHhB,IAAI,CAAC,qBAAqB,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,kCAAkC,CAAC,EAC3HhB,IAAI,CAAC,qBAAqB,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAE,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EACvHhB,IAAI,CAAC,2BAA2B,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACsF,SAAS,CAAC,CAAC,CAAC3F,WAAW,CAAC,+BAA+B,CAAC,EACrGhB,IAAI,CAAC,wBAAwB,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACsF,SAAS,CAAC,CAAC,CAAC3F,WAAW,CAAC,4BAA4B,CAAC,EAC/FhB,IAAI,CAAC,8BAA8B,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACuF,QAAQ,CAAC,CAAC,CAAC5F,WAAW,CAAC,qCAAqC,CAAC,CAC9G,EAAE,OAAOY,GAAG,EAAEC,GAAG,KAAK;EACrB,MAAMgF,SAAS,GAAGvD,IAAI,CAACkC,GAAG,CAAC,CAAC;EAE5B,IAAI;IACF,MAAM1D,MAAM,GAAG7B,gBAAgB,CAAC2B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB6B,OAAO,CAACzB,KAAK,CAAC,mCAAmC,EAAEL,MAAM,CAACS,KAAK,CAAC,CAAC,CAAC;MAClE,OAAOV,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,oBAAoB;UAC7BC,OAAO,EAAER,MAAM,CAACS,KAAK,CAAC;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEG,SAAS;MAAEC,QAAQ;MAAEC,KAAK;MAAEJ,KAAK;MAAEsE,SAAS;MAAEjE;IAAY,CAAC,GAAGjB,GAAG,CAAC5B,IAAI;;IAE9E;IACA,MAAM+G,UAAU,GAAG,CAAC,CAAC;IACrB,IAAIrE,SAAS,KAAKyD,SAAS,EAAEY,UAAU,CAACrE,SAAS,GAAGA,SAAS;IAC7D,IAAIC,QAAQ,KAAKwD,SAAS,EAAEY,UAAU,CAACpE,QAAQ,GAAGA,QAAQ;IAC1D,IAAIC,KAAK,KAAKuD,SAAS,EAAEY,UAAU,CAACnE,KAAK,GAAGA,KAAK;IACjD,IAAIJ,KAAK,KAAK2D,SAAS,EAAEY,UAAU,CAACvE,KAAK,GAAGA,KAAK;IACjD,IAAIsE,SAAS,KAAKX,SAAS,EAAEY,UAAU,CAACD,SAAS,GAAGA,SAAS;;IAE7D;IACA,IAAIjE,WAAW,KAAKsD,SAAS,EAAE;MAC7B;MACA,IAAIa,kBAAkB,GAAG,CAAC,CAAC;MAC3B,IAAIpF,GAAG,CAACqB,IAAI,CAACJ,WAAW,EAAE;QACxBmE,kBAAkB,GAAG,OAAOpF,GAAG,CAACqB,IAAI,CAACJ,WAAW,CAACoE,QAAQ,KAAK,UAAU,GACpErF,GAAG,CAACqB,IAAI,CAACJ,WAAW,CAACoE,QAAQ,CAAC,CAAC,GAC/BrF,GAAG,CAACqB,IAAI,CAACJ,WAAW;MAC1B;MAEAkE,UAAU,CAAClE,WAAW,GAAG;QACvB,GAAGmE,kBAAkB;QACrB,GAAGnE;MACL,CAAC;;MAED;MACA,IAAIA,WAAW,CAACqE,gBAAgB,EAAE;QAChCH,UAAU,CAAClE,WAAW,CAACqE,gBAAgB,GAAG;UACxC,IAAGF,kBAAkB,CAACE,gBAAgB,IAAI,CAAC,CAAC;UAC5C,GAAGrE,WAAW,CAACqE;QACjB,CAAC;MACH;IACF;;IAEA;IACA,IAAI;MACF;MACA,IAAI1E,KAAK,IAAIA,KAAK,KAAKZ,GAAG,CAACqB,IAAI,CAACT,KAAK,EAAE;QACrC,MAAMM,YAAY,GAAG,MAAM5C,IAAI,CAAC6C,OAAO,CAAC;UAAEP,KAAK;UAAEY,GAAG,EAAE;YAAE+D,GAAG,EAAEvF,GAAG,CAACqB,IAAI,CAACG;UAAI;QAAE,CAAC,CAAC;QAC9E,IAAIN,YAAY,EAAE;UAChB,OAAOjB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAC1BC,OAAO,EAAE,KAAK;YACdC,KAAK,EAAE;cACLC,IAAI,EAAE,cAAc;cACpBC,OAAO,EAAE;YACX;UACF,CAAC,CAAC;QACJ;MACF;;MAEA;MACA,MAAMY,IAAI,GAAG,MAAM/C,IAAI,CAACkH,iBAAiB,CACvCxF,GAAG,CAACqB,IAAI,CAACG,GAAG,EACZ2D,UAAU,EACV;QAAEM,GAAG,EAAE,IAAI;QAAEC,aAAa,EAAE;MAAK,CACnC,CAAC,CAACf,MAAM,CAAC,WAAW,CAAC;MAErB,IAAI,CAACtD,IAAI,EAAE;QACT,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;YACLC,IAAI,EAAE,gBAAgB;YACtBC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;MACJ;MAEA,MAAMkF,aAAa,GAAGjE,IAAI,CAACkC,GAAG,CAAC,CAAC,GAAGqB,SAAS;;MAE5C;MACAhF,GAAG,CAACI,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbG,OAAO,EAAE,8BAA8B;QACvCgC,IAAI,EAAE;UACJpB,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;QAC1B,CAAC;QACDkD,WAAW,EAAE;UACXC,QAAQ,EAAEF,aAAa;UACvBG,MAAM,EAAE,OAAO;UACf1F,MAAM,EAAEuF,aAAa,IAAI,GAAG,GAAG,SAAS,GAAG;QAC7C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOI,WAAW,EAAE;MACpB/D,OAAO,CAACzB,KAAK,CAAC,uBAAuB,EAAEwF,WAAW,CAAC;MACnD,OAAO9F,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,sBAAsB;UAC5BC,OAAO,EAAEsF,WAAW,CAACtF,OAAO,IAAI;QAClC;MACF,CAAC,CAAC;IACJ;EAEF,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CyB,OAAO,CAACzB,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACyF,KAAK,CAAC;IAC1ChE,OAAO,CAACzB,KAAK,CAAC,eAAe,EAAEP,GAAG,CAAC5B,IAAI,CAAC;;IAExC;IACA,IAAImC,KAAK,CAACC,IAAI,KAAK,KAAK,EAAE;MACxB,OAAOP,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,iBAAiB;UACvBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEAR,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,sBAAsB;QAC5BC,OAAO,EAAE,0BAA0B;QACnCC,OAAO,EAAEH,KAAK,CAACE;MACjB;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC+B,IAAI,CAAC,kBAAkB,EAAExB,WAAW,EAAE,CAC3CH,IAAI,CAAC,iBAAiB,CAAC,CAACwB,QAAQ,CAAC,CAAC,CAACR,WAAW,CAAC,8BAA8B,CAAC,EAC9EhB,IAAI,CAAC,aAAa,CAAC,CAACiB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CAACF,WAAW,CAAC,iDAAiD,CAAC,CACxG,EAAE,OAAOY,GAAG,EAAEC,GAAG,KAAK;EACrB,IAAI;IACF,MAAMC,MAAM,GAAG7B,gBAAgB,CAAC2B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,oBAAoB;UAC7BC,OAAO,EAAER,MAAM,CAACS,KAAK,CAAC;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEsF,eAAe;MAAEC;IAAY,CAAC,GAAGlG,GAAG,CAAC5B,IAAI;;IAEjD;IACA,MAAMiD,IAAI,GAAG,MAAM/C,IAAI,CAACoG,QAAQ,CAAC1E,GAAG,CAACqB,IAAI,CAACG,GAAG,CAAC,CAACmD,MAAM,CAAC,WAAW,CAAC;;IAElE;IACA,MAAM/B,OAAO,GAAG,MAAMvB,IAAI,CAACwB,eAAe,CAACoD,eAAe,CAAC;IAC3D,IAAI,CAACrD,OAAO,EAAE;MACZ,OAAO3C,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACAY,IAAI,CAACR,QAAQ,GAAGqF,WAAW;IAC3B,MAAM7E,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjB1B,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,uBAAuB;QAC7BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC+B,IAAI,CAAC,SAAS,EAAExB,WAAW,EAAE,OAAOyB,GAAG,EAAEC,GAAG,KAAK;EACtD,IAAI;IACF,MAAMtB,MAAM,GAAGqB,GAAG,CAACqB,IAAI,CAACG,GAAG;;IAE3B;IACAQ,OAAO,CAACgC,GAAG,CAAC,cAAc,EAAE;MAC1BrF,MAAM,EAAEA,MAAM;MACdwH,SAAS,EAAE,IAAIzE,IAAI,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA,IAAI1B,GAAG,CAACoG,OAAO,EAAE;MACf;MACA,OAAOpG,GAAG,CAACoG,OAAO,CAACC,MAAM;MACzB,OAAOrG,GAAG,CAACoG,OAAO,CAACE,OAAO;;MAE1B;MACAtG,GAAG,CAACoG,OAAO,CAACG,OAAO,CAAEC,GAAG,IAAK;QAC3B,IAAIA,GAAG,EAAE;UACPxE,OAAO,CAACzB,KAAK,CAAC,4BAA4B,EAAEiG,GAAG,CAAC;QAClD;MACF,CAAC,CAAC;IACJ;;IAEA;IACAvG,GAAG,CAACwG,WAAW,CAAC,OAAO,EAAE;MACvBtE,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAEvD,OAAO,CAACC,GAAG,CAACuD,QAAQ,KAAK,YAAY;MAC7CC,QAAQ,EAAE,QAAQ;MAClBE,IAAI,EAAE;IACR,CAAC,CAAC;IAEFvC,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,yBAAyB;MAClCiG,WAAW,EAAE,IAAI,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOnG,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrCN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,cAAc;QACpBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;;AAEA;AACAzC,MAAM,CAAC+B,IAAI,CAAC,oBAAoB,EAAExB,WAAW,EAAEE,iBAAiB,EAAE,CAChEL,IAAI,CAAC,MAAM,CAAC,CAACuI,IAAI,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAACvH,WAAW,CAAC,0CAA0C,CAAC,EAClGhB,IAAI,CAAC,WAAW,CAAC,CAACmB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,wBAAwB,CAAC,EAC5FhB,IAAI,CAAC,UAAU,CAAC,CAACmB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,uBAAuB,CAAC,EAC1FhB,IAAI,CAAC,QAAQ,CAAC,CAACmB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAI,CAAC,CAAC,CAACJ,WAAW,CAAC,4BAA4B,CAAC,EAC9FhB,IAAI,CAAC,MAAM,CAAC,CAACmB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,kBAAkB,CAAC,EACjFhB,IAAI,CAAC,OAAO,CAAC,CAACmB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,mBAAmB,CAAC,EACnFhB,IAAI,CAAC,SAAS,CAAC,CAACmB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,sBAAsB,CAAC,EACxFhB,IAAI,CAAC,SAAS,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAE,CAAC,CAAC,CAACJ,WAAW,CAAC,qCAAqC,CAAC,EACjHhB,IAAI,CAAC,OAAO,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACL,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EAC9GhB,IAAI,CAAC,WAAW,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACsF,SAAS,CAAC,CAAC,CAAC3F,WAAW,CAAC,2BAA2B,CAAC,CAClF,EAAE,OAAOY,GAAG,EAAEC,GAAG,KAAK;EACrB,IAAI;IACF,MAAMC,MAAM,GAAG7B,gBAAgB,CAAC2B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,sBAAsB;UAC/BC,OAAO,EAAER,MAAM,CAACS,KAAK,CAAC;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,MAAMiG,WAAW,GAAG;MAClBC,IAAI,EAAE7G,GAAG,CAAC5B,IAAI,CAACyI,IAAI;MACnB/F,SAAS,EAAEd,GAAG,CAAC5B,IAAI,CAAC0C,SAAS;MAC7BC,QAAQ,EAAEf,GAAG,CAAC5B,IAAI,CAAC2C,QAAQ;MAC3B+F,MAAM,EAAE9G,GAAG,CAAC5B,IAAI,CAAC0I,MAAM;MACvBC,IAAI,EAAE/G,GAAG,CAAC5B,IAAI,CAAC2I,IAAI;MACnBC,KAAK,EAAEhH,GAAG,CAAC5B,IAAI,CAAC4I,KAAK;MACrBC,OAAO,EAAEjH,GAAG,CAAC5B,IAAI,CAAC6I,OAAO;MACzBC,OAAO,EAAElH,GAAG,CAAC5B,IAAI,CAAC8I,OAAO,IAAI,IAAI;MACjClG,KAAK,EAAEhB,GAAG,CAAC5B,IAAI,CAAC4C,KAAK;MACrBmG,SAAS,EAAEnH,GAAG,CAAC5B,IAAI,CAAC+I,SAAS,IAAI;IACnC,CAAC;;IAED;IACA,MAAM9F,IAAI,GAAG,MAAM/C,IAAI,CAACoG,QAAQ,CAAC1E,GAAG,CAACqB,IAAI,CAACG,GAAG,CAAC;IAC9C,IAAI,CAACH,IAAI,EAAE;MACT,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,gBAAgB;UACtBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,IAAImG,WAAW,CAACO,SAAS,EAAE;MACzB9F,IAAI,CAAC6D,SAAS,CAACkC,OAAO,CAACC,IAAI,IAAI;QAC7BA,IAAI,CAACF,SAAS,GAAG,KAAK;MACxB,CAAC,CAAC;IACJ;IAEA9F,IAAI,CAAC6D,SAAS,CAACoC,IAAI,CAACV,WAAW,CAAC;IAChC,MAAMvF,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjB1B,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,4BAA4B;MACrCY,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,mBAAmB;QACzBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC6G,GAAG,CAAC,+BAA+B,EAAEtG,WAAW,EAAEE,iBAAiB,EAAE,CAC1EL,IAAI,CAAC,MAAM,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACkH,IAAI,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAACvH,WAAW,CAAC,0CAA0C,CAAC,EAC7GhB,IAAI,CAAC,WAAW,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,oCAAoC,CAAC,EACnHhB,IAAI,CAAC,UAAU,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,mCAAmC,CAAC,EACjHhB,IAAI,CAAC,QAAQ,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAI,CAAC,CAAC,CAACJ,WAAW,CAAC,iCAAiC,CAAC,EAC9GhB,IAAI,CAAC,MAAM,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,8BAA8B,CAAC,EACxGhB,IAAI,CAAC,OAAO,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EAC1GhB,IAAI,CAAC,SAAS,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,kCAAkC,CAAC,EAC/GhB,IAAI,CAAC,SAAS,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAE,CAAC,CAAC,CAACJ,WAAW,CAAC,qCAAqC,CAAC,EACjHhB,IAAI,CAAC,OAAO,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACL,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EAC9GhB,IAAI,CAAC,WAAW,CAAC,CAACqB,QAAQ,CAAC,CAAC,CAACsF,SAAS,CAAC,CAAC,CAAC3F,WAAW,CAAC,2BAA2B,CAAC,CAClF,EAAE,OAAOY,GAAG,EAAEC,GAAG,KAAK;EACrB,IAAI;IACF,MAAMC,MAAM,GAAG7B,gBAAgB,CAAC2B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,kBAAkB;UACxBC,OAAO,EAAE,sBAAsB;UAC/BC,OAAO,EAAER,MAAM,CAACS,KAAK,CAAC;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,MAAM;MAAE4G;IAAU,CAAC,GAAGvH,GAAG,CAACwH,MAAM;IAChC,MAAMrC,UAAU,GAAG,CAAC,CAAC;;IAErB;IACA,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC,CACrGiC,OAAO,CAACK,KAAK,IAAI;MAChB,IAAIzH,GAAG,CAAC5B,IAAI,CAACqJ,KAAK,CAAC,KAAKlD,SAAS,EAAE;QACjCY,UAAU,CAACsC,KAAK,CAAC,GAAGzH,GAAG,CAAC5B,IAAI,CAACqJ,KAAK,CAAC;MACrC;IACF,CAAC,CAAC;;IAEJ;IACA,MAAMpG,IAAI,GAAG,MAAM/C,IAAI,CAACoG,QAAQ,CAAC1E,GAAG,CAACqB,IAAI,CAACG,GAAG,CAAC;IAC9C,IAAI,CAACH,IAAI,EAAE;MACT,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,gBAAgB;UACtBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEA,MAAMiH,OAAO,GAAGrG,IAAI,CAAC6D,SAAS,CAACyC,EAAE,CAACJ,SAAS,CAAC;IAC5C,IAAI,CAACG,OAAO,EAAE;MACZ,OAAOzH,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,mBAAmB;UACzBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,IAAI0E,UAAU,CAACgC,SAAS,EAAE;MACxB9F,IAAI,CAAC6D,SAAS,CAACkC,OAAO,CAACC,IAAI,IAAI;QAC7B,IAAIA,IAAI,CAAC7F,GAAG,CAAC8B,QAAQ,CAAC,CAAC,KAAKiE,SAAS,EAAE;UACrCF,IAAI,CAACF,SAAS,GAAG,KAAK;QACxB;MACF,CAAC,CAAC;IACJ;;IAEA;IACAS,MAAM,CAACC,MAAM,CAACH,OAAO,EAAEvC,UAAU,CAAC;IAClC,MAAM9D,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjB1B,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,8BAA8B;MACvCY,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,sBAAsB;QAC5BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC8J,MAAM,CAAC,+BAA+B,EAAEvJ,WAAW,EAAEE,iBAAiB,EAAE,OAAOuB,GAAG,EAAEC,GAAG,KAAK;EACjG,IAAI;IACF,MAAM;MAAEsH;IAAU,CAAC,GAAGvH,GAAG,CAACwH,MAAM;;IAEhC;IACA,MAAMnG,IAAI,GAAG,MAAM/C,IAAI,CAACoG,QAAQ,CAAC1E,GAAG,CAACqB,IAAI,CAACG,GAAG,CAAC;IAC9C,IAAI,CAACH,IAAI,EAAE;MACT,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,gBAAgB;UACtBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEA,MAAMiH,OAAO,GAAGrG,IAAI,CAAC6D,SAAS,CAACyC,EAAE,CAACJ,SAAS,CAAC;IAC5C,IAAI,CAACG,OAAO,EAAE;MACZ,OAAOzH,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,mBAAmB;UACzBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACAiH,OAAO,CAACK,MAAM,CAAC,CAAC;IAChB,MAAM1G,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjB1B,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,8BAA8B;MACvCY,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,sBAAsB;QAC5BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAACgK,KAAK,CAAC,uCAAuC,EAAEzJ,WAAW,EAAEE,iBAAiB,EAAE,OAAOuB,GAAG,EAAEC,GAAG,KAAK;EACxG,IAAI;IACF,MAAM;MAAEsH;IAAU,CAAC,GAAGvH,GAAG,CAACwH,MAAM;;IAEhC;IACA,MAAMnG,IAAI,GAAG,MAAM/C,IAAI,CAACoG,QAAQ,CAAC1E,GAAG,CAACqB,IAAI,CAACG,GAAG,CAAC;IAC9C,IAAI,CAACH,IAAI,EAAE;MACT,OAAOpB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,gBAAgB;UACtBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEA,MAAMiH,OAAO,GAAGrG,IAAI,CAAC6D,SAAS,CAACyC,EAAE,CAACJ,SAAS,CAAC;IAC5C,IAAI,CAACG,OAAO,EAAE;MACZ,OAAOzH,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,mBAAmB;UACzBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACAY,IAAI,CAAC6D,SAAS,CAACkC,OAAO,CAACC,IAAI,IAAI;MAC7BA,IAAI,CAACF,SAAS,GAAGE,IAAI,CAAC7F,GAAG,CAAC8B,QAAQ,CAAC,CAAC,KAAKiE,SAAS;IACpD,CAAC,CAAC;IAEF,MAAMlG,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjB1B,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,sCAAsC;MAC/CY,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,uBAAuB;QAC7BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzC,MAAM,CAAC+B,IAAI,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,IAAI;IACF,MAAM;MAAEsB;IAAM,CAAC,GAAGvB,GAAG,CAAC5B,IAAI;IAE1B,IAAI,CAACmD,KAAK,EAAE;MACV,OAAOtB,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,eAAe;UACrBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEA,MAAMwH,OAAO,GAAG/J,GAAG,CAACgK,MAAM,CAAC3G,KAAK,EAAE1C,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;IACzD,MAAMsC,IAAI,GAAG,MAAM/C,IAAI,CAACoG,QAAQ,CAACuD,OAAO,CAACtJ,MAAM,CAAC;IAEhD,IAAI,CAAC0C,IAAI,IAAI,CAACA,IAAI,CAACyB,QAAQ,EAAE;MAC3B,OAAO7C,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACLC,IAAI,EAAE,eAAe;UACrBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEA,MAAM0H,QAAQ,GAAGzJ,aAAa,CAAC2C,IAAI,CAACG,GAAG,CAAC;IAExCvB,GAAG,CAACI,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbiB,KAAK,EAAE4G,QAAQ;MACf9G,IAAI,EAAEA,IAAI,CAACqB,YAAY,CAAC;IAC1B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdyB,OAAO,CAACzB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;QACLC,IAAI,EAAE,qBAAqB;QAC3BC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF2H,MAAM,CAACC,OAAO,GAAGrK,MAAM","ignoreList":[]}