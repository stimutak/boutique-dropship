2c4d26a966a58aabf2a749106db1afeb
const request = require('supertest');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../../models/User');
const {
  createTestApp
} = require('../helpers/testApp');
describe('Auth Routes', () => {
  let app;
  beforeAll(() => {
    app = createTestApp();
  });
  beforeEach(async () => {
    // Clear users before each test
    await User.deleteMany({});
  });
  describe('POST /api/auth/register', () => {
    const validUserData = {
      email: 'test@example.com',
      password: 'password123',
      firstName: 'Test',
      lastName: 'User'
    };
    it('should register a new user successfully', async () => {
      const response = await request(app).post('/api/auth/register').send(validUserData).expect(201);
      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('user');
      expect(response.body.data).toHaveProperty('token');
      expect(response.body.data.user.email).toBe(validUserData.email);
      expect(response.body.data.user).not.toHaveProperty('password');
    });
    it('should validate required fields', async () => {
      const response = await request(app).post('/api/auth/register').send({}).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should validate email format', async () => {
      const response = await request(app).post('/api/auth/register').send({
        ...validUserData,
        email: 'invalid-email'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should validate password length', async () => {
      const response = await request(app).post('/api/auth/register').send({
        ...validUserData,
        password: '123'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should prevent duplicate email registration', async () => {
      // First registration
      await request(app).post('/api/auth/register').send(validUserData).expect(201);

      // Second registration with same email
      const response = await request(app).post('/api/auth/register').send(validUserData).expect(409);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('USER_EXISTS');
    });
  });
  describe('POST /api/auth/login', () => {
    let testUser;
    beforeEach(async () => {
      // Create test user
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });
    });
    it('should login with valid credentials', async () => {
      const response = await request(app).post('/api/auth/login').send({
        email: 'test@example.com',
        password: 'password123'
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveProperty('user');
      expect(response.body.data).toHaveProperty('token');
      expect(response.body.data.user.email).toBe('test@example.com');
      expect(response.body.data.user).not.toHaveProperty('password');
    });
    it('should reject invalid email', async () => {
      const response = await request(app).post('/api/auth/login').send({
        email: 'wrong@example.com',
        password: 'password123'
      }).expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_CREDENTIALS');
    });
    it('should reject invalid password', async () => {
      const response = await request(app).post('/api/auth/login').send({
        email: 'test@example.com',
        password: 'wrongpassword'
      }).expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_CREDENTIALS');
    });
    it('should validate required fields', async () => {
      const response = await request(app).post('/api/auth/login').send({}).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
  });
  describe('GET /api/auth/profile', () => {
    let testUser;
    let authToken;
    beforeEach(async () => {
      // Create test user
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });

      // Generate auth token
      authToken = jwt.sign({
        userId: testUser._id
      }, process.env.JWT_SECRET, {
        expiresIn: '1h'
      });
    });
    it('should get user profile with valid token', async () => {
      const response = await request(app).get('/api/auth/profile').set('Authorization', `Bearer ${authToken}`).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.user.email).toBe('test@example.com');
      expect(response.body.data.user).not.toHaveProperty('password');
    });
    it('should reject request without token', async () => {
      const response = await request(app).get('/api/auth/profile').expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('NO_TOKEN');
    });
    it('should reject request with invalid token', async () => {
      const response = await request(app).get('/api/auth/profile').set('Authorization', 'Bearer invalid-token').expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_TOKEN');
    });
  });
  describe('PUT /api/auth/profile', () => {
    let testUser;
    let authToken;
    beforeEach(async () => {
      // Create test user
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });

      // Generate auth token
      authToken = jwt.sign({
        userId: testUser._id
      }, process.env.JWT_SECRET, {
        expiresIn: '1h'
      });
    });
    it('should update user profile', async () => {
      const updateData = {
        firstName: 'Updated',
        lastName: 'Name'
      };
      const response = await request(app).put('/api/auth/profile').set('Authorization', `Bearer ${authToken}`).send(updateData).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.user.firstName).toBe('Updated');
      expect(response.body.data.user.lastName).toBe('Name');
    });
    it('should validate email format when updating', async () => {
      const response = await request(app).put('/api/auth/profile').set('Authorization', `Bearer ${authToken}`).send({
        email: 'invalid-email'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should require authentication', async () => {
      const response = await request(app).put('/api/auth/profile').send({
        firstName: 'Updated'
      }).expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('NO_TOKEN');
    });
  });
  describe('POST /api/auth/change-password', () => {
    let testUser;
    let authToken;
    beforeEach(async () => {
      // Create test user
      testUser = await User.create({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      });

      // Generate auth token
      authToken = jwt.sign({
        userId: testUser._id
      }, process.env.JWT_SECRET, {
        expiresIn: '1h'
      });
    });
    it('should change password with valid current password', async () => {
      const response = await request(app).post('/api/auth/change-password').set('Authorization', `Bearer ${authToken}`).send({
        currentPassword: 'password123',
        newPassword: 'newpassword123'
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toContain('Password updated successfully');
    });
    it('should reject incorrect current password', async () => {
      const response = await request(app).post('/api/auth/change-password').set('Authorization', `Bearer ${authToken}`).send({
        currentPassword: 'wrongpassword',
        newPassword: 'newpassword123'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_CURRENT_PASSWORD');
    });
    it('should validate new password length', async () => {
      const response = await request(app).post('/api/auth/change-password').set('Authorization', `Bearer ${authToken}`).send({
        currentPassword: 'password123',
        newPassword: '123'
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('VALIDATION_ERROR');
    });
    it('should require authentication', async () => {
      const response = await request(app).post('/api/auth/change-password').send({
        currentPassword: 'password123',
        newPassword: 'newpassword123'
      }).expect(401);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('NO_TOKEN');
    });
  });
  describe('Response Format Consistency', () => {
    it('should maintain consistent success response format', async () => {
      const response = await request(app).post('/api/auth/register').send({
        email: 'test@example.com',
        password: 'password123',
        firstName: 'Test',
        lastName: 'User'
      }).expect(201);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(typeof response.body.data).toBe('object');
    });
    it('should maintain consistent error response format', async () => {
      const response = await request(app).post('/api/auth/login').send({}).expect(400);
      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('error');
      expect(response.body.error).toHaveProperty('code');
      expect(response.body.error).toHaveProperty('message');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImp3dCIsImJjcnlwdCIsIlVzZXIiLCJjcmVhdGVUZXN0QXBwIiwiZGVzY3JpYmUiLCJhcHAiLCJiZWZvcmVBbGwiLCJiZWZvcmVFYWNoIiwiZGVsZXRlTWFueSIsInZhbGlkVXNlckRhdGEiLCJlbWFpbCIsInBhc3N3b3JkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJpdCIsInJlc3BvbnNlIiwicG9zdCIsInNlbmQiLCJleHBlY3QiLCJib2R5Iiwic3VjY2VzcyIsInRvQmUiLCJkYXRhIiwidG9IYXZlUHJvcGVydHkiLCJ1c2VyIiwibm90IiwiZXJyb3IiLCJjb2RlIiwidGVzdFVzZXIiLCJjcmVhdGUiLCJhdXRoVG9rZW4iLCJzaWduIiwidXNlcklkIiwiX2lkIiwicHJvY2VzcyIsImVudiIsIkpXVF9TRUNSRVQiLCJleHBpcmVzSW4iLCJnZXQiLCJzZXQiLCJ1cGRhdGVEYXRhIiwicHV0IiwiY3VycmVudFBhc3N3b3JkIiwibmV3UGFzc3dvcmQiLCJtZXNzYWdlIiwidG9Db250YWluIl0sInNvdXJjZXMiOlsiYXV0aC1maXhlZC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcnRlc3QnKTtcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpO1xuY29uc3QgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0anMnKTtcbmNvbnN0IFVzZXIgPSByZXF1aXJlKCcuLi8uLi9tb2RlbHMvVXNlcicpO1xuY29uc3QgeyBjcmVhdGVUZXN0QXBwIH0gPSByZXF1aXJlKCcuLi9oZWxwZXJzL3Rlc3RBcHAnKTtcblxuZGVzY3JpYmUoJ0F1dGggUm91dGVzJywgKCkgPT4ge1xuICBsZXQgYXBwO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgYXBwID0gY3JlYXRlVGVzdEFwcCgpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBDbGVhciB1c2VycyBiZWZvcmUgZWFjaCB0ZXN0XG4gICAgYXdhaXQgVXNlci5kZWxldGVNYW55KHt9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BPU1QgL2FwaS9hdXRoL3JlZ2lzdGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IHZhbGlkVXNlckRhdGEgPSB7XG4gICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycsXG4gICAgICBmaXJzdE5hbWU6ICdUZXN0JyxcbiAgICAgIGxhc3ROYW1lOiAnVXNlcidcbiAgICB9O1xuXG4gICAgaXQoJ3Nob3VsZCByZWdpc3RlciBhIG5ldyB1c2VyIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2F1dGgvcmVnaXN0ZXInKVxuICAgICAgICAuc2VuZCh2YWxpZFVzZXJEYXRhKVxuICAgICAgICAuZXhwZWN0KDIwMSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhKS50b0hhdmVQcm9wZXJ0eSgndXNlcicpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG9IYXZlUHJvcGVydHkoJ3Rva2VuJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLnVzZXIuZW1haWwpLnRvQmUodmFsaWRVc2VyRGF0YS5lbWFpbCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLnVzZXIpLm5vdC50b0hhdmVQcm9wZXJ0eSgncGFzc3dvcmQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9yZWdpc3RlcicpXG4gICAgICAgIC5zZW5kKHt9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnVkFMSURBVElPTl9FUlJPUicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBlbWFpbCBmb3JtYXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQoe1xuICAgICAgICAgIC4uLnZhbGlkVXNlckRhdGEsXG4gICAgICAgICAgZW1haWw6ICdpbnZhbGlkLWVtYWlsJ1xuICAgICAgICB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnVkFMSURBVElPTl9FUlJPUicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBwYXNzd29yZCBsZW5ndGgnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQoe1xuICAgICAgICAgIC4uLnZhbGlkVXNlckRhdGEsXG4gICAgICAgICAgcGFzc3dvcmQ6ICcxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdWQUxJREFUSU9OX0VSUk9SJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByZXZlbnQgZHVwbGljYXRlIGVtYWlsIHJlZ2lzdHJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEZpcnN0IHJlZ2lzdHJhdGlvblxuICAgICAgYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2F1dGgvcmVnaXN0ZXInKVxuICAgICAgICAuc2VuZCh2YWxpZFVzZXJEYXRhKVxuICAgICAgICAuZXhwZWN0KDIwMSk7XG5cbiAgICAgIC8vIFNlY29uZCByZWdpc3RyYXRpb24gd2l0aCBzYW1lIGVtYWlsXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQodmFsaWRVc2VyRGF0YSlcbiAgICAgICAgLmV4cGVjdCg0MDkpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ1VTRVJfRVhJU1RTJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQT1NUIC9hcGkvYXV0aC9sb2dpbicsICgpID0+IHtcbiAgICBsZXQgdGVzdFVzZXI7XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENyZWF0ZSB0ZXN0IHVzZXJcbiAgICAgIHRlc3RVc2VyID0gYXdhaXQgVXNlci5jcmVhdGUoe1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnVGVzdCcsXG4gICAgICAgIGxhc3ROYW1lOiAnVXNlcidcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2dpbiB3aXRoIHZhbGlkIGNyZWRlbnRpYWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9sb2dpbicpXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvSGF2ZVByb3BlcnR5KCd1c2VyJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhKS50b0hhdmVQcm9wZXJ0eSgndG9rZW4nKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEudXNlci5lbWFpbCkudG9CZSgndGVzdEBleGFtcGxlLmNvbScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS51c2VyKS5ub3QudG9IYXZlUHJvcGVydHkoJ3Bhc3N3b3JkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIGVtYWlsJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9sb2dpbicpXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBlbWFpbDogJ3dyb25nQGV4YW1wbGUuY29tJyxcbiAgICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJ1xuICAgICAgICB9KVxuICAgICAgICAuZXhwZWN0KDQwMSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnSU5WQUxJRF9DUkVERU5USUFMUycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBwYXNzd29yZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2F1dGgvbG9naW4nKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgICBwYXNzd29yZDogJ3dyb25ncGFzc3dvcmQnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoNDAxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdJTlZBTElEX0NSRURFTlRJQUxTJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2F1dGgvbG9naW4nKVxuICAgICAgICAuc2VuZCh7fSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ1ZBTElEQVRJT05fRVJST1InKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL2F1dGgvcHJvZmlsZScsICgpID0+IHtcbiAgICBsZXQgdGVzdFVzZXI7XG4gICAgbGV0IGF1dGhUb2tlbjtcblxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIHRlc3QgdXNlclxuICAgICAgdGVzdFVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgICBmaXJzdE5hbWU6ICdUZXN0JyxcbiAgICAgICAgbGFzdE5hbWU6ICdVc2VyJ1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGF1dGggdG9rZW5cbiAgICAgIGF1dGhUb2tlbiA9IGp3dC5zaWduKFxuICAgICAgICB7IHVzZXJJZDogdGVzdFVzZXIuX2lkIH0sXG4gICAgICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQsXG4gICAgICAgIHsgZXhwaXJlc0luOiAnMWgnIH1cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdldCB1c2VyIHByb2ZpbGUgd2l0aCB2YWxpZCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvYXV0aC9wcm9maWxlJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS51c2VyLmVtYWlsKS50b0JlKCd0ZXN0QGV4YW1wbGUuY29tJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLnVzZXIpLm5vdC50b0hhdmVQcm9wZXJ0eSgncGFzc3dvcmQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHJlcXVlc3Qgd2l0aG91dCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvYXV0aC9wcm9maWxlJylcbiAgICAgICAgLmV4cGVjdCg0MDEpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ05PX1RPS0VOJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCByZXF1ZXN0IHdpdGggaW52YWxpZCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvYXV0aC9wcm9maWxlJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsICdCZWFyZXIgaW52YWxpZC10b2tlbicpXG4gICAgICAgIC5leHBlY3QoNDAxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdJTlZBTElEX1RPS0VOJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQVVQgL2FwaS9hdXRoL3Byb2ZpbGUnLCAoKSA9PiB7XG4gICAgbGV0IHRlc3RVc2VyO1xuICAgIGxldCBhdXRoVG9rZW47XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENyZWF0ZSB0ZXN0IHVzZXJcbiAgICAgIHRlc3RVc2VyID0gYXdhaXQgVXNlci5jcmVhdGUoe1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnVGVzdCcsXG4gICAgICAgIGxhc3ROYW1lOiAnVXNlcidcbiAgICAgIH0pO1xuXG4gICAgICAvLyBHZW5lcmF0ZSBhdXRoIHRva2VuXG4gICAgICBhdXRoVG9rZW4gPSBqd3Quc2lnbihcbiAgICAgICAgeyB1c2VySWQ6IHRlc3RVc2VyLl9pZCB9LFxuICAgICAgICBwcm9jZXNzLmVudi5KV1RfU0VDUkVULFxuICAgICAgICB7IGV4cGlyZXNJbjogJzFoJyB9XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgdXNlciBwcm9maWxlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHtcbiAgICAgICAgZmlyc3ROYW1lOiAnVXBkYXRlZCcsXG4gICAgICAgIGxhc3ROYW1lOiAnTmFtZSdcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wdXQoJy9hcGkvYXV0aC9wcm9maWxlJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLnNlbmQodXBkYXRlRGF0YSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS51c2VyLmZpcnN0TmFtZSkudG9CZSgnVXBkYXRlZCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS51c2VyLmxhc3ROYW1lKS50b0JlKCdOYW1lJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGVtYWlsIGZvcm1hdCB3aGVuIHVwZGF0aW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnB1dCgnL2FwaS9hdXRoL3Byb2ZpbGUnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgZW1haWw6ICdpbnZhbGlkLWVtYWlsJ1xuICAgICAgICB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnVkFMSURBVElPTl9FUlJPUicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXF1aXJlIGF1dGhlbnRpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnB1dCgnL2FwaS9hdXRoL3Byb2ZpbGUnKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgZmlyc3ROYW1lOiAnVXBkYXRlZCdcbiAgICAgICAgfSlcbiAgICAgICAgLmV4cGVjdCg0MDEpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ05PX1RPS0VOJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQT1NUIC9hcGkvYXV0aC9jaGFuZ2UtcGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgbGV0IHRlc3RVc2VyO1xuICAgIGxldCBhdXRoVG9rZW47XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENyZWF0ZSB0ZXN0IHVzZXJcbiAgICAgIHRlc3RVc2VyID0gYXdhaXQgVXNlci5jcmVhdGUoe1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnVGVzdCcsXG4gICAgICAgIGxhc3ROYW1lOiAnVXNlcidcbiAgICAgIH0pO1xuXG4gICAgICAvLyBHZW5lcmF0ZSBhdXRoIHRva2VuXG4gICAgICBhdXRoVG9rZW4gPSBqd3Quc2lnbihcbiAgICAgICAgeyB1c2VySWQ6IHRlc3RVc2VyLl9pZCB9LFxuICAgICAgICBwcm9jZXNzLmVudi5KV1RfU0VDUkVULFxuICAgICAgICB7IGV4cGlyZXNJbjogJzFoJyB9XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjaGFuZ2UgcGFzc3dvcmQgd2l0aCB2YWxpZCBjdXJyZW50IHBhc3N3b3JkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9jaGFuZ2UtcGFzc3dvcmQnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgY3VycmVudFBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgICAgIG5ld1Bhc3N3b3JkOiAnbmV3cGFzc3dvcmQxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQ29udGFpbignUGFzc3dvcmQgdXBkYXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGluY29ycmVjdCBjdXJyZW50IHBhc3N3b3JkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9jaGFuZ2UtcGFzc3dvcmQnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgY3VycmVudFBhc3N3b3JkOiAnd3JvbmdwYXNzd29yZCcsXG4gICAgICAgICAgbmV3UGFzc3dvcmQ6ICduZXdwYXNzd29yZDEyMydcbiAgICAgICAgfSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ0lOVkFMSURfQ1VSUkVOVF9QQVNTV09SRCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBuZXcgcGFzc3dvcmQgbGVuZ3RoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9jaGFuZ2UtcGFzc3dvcmQnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgY3VycmVudFBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgICAgIG5ld1Bhc3N3b3JkOiAnMTIzJ1xuICAgICAgICB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnVkFMSURBVElPTl9FUlJPUicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXF1aXJlIGF1dGhlbnRpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9jaGFuZ2UtcGFzc3dvcmQnKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgY3VycmVudFBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgICAgIG5ld1Bhc3N3b3JkOiAnbmV3cGFzc3dvcmQxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoNDAxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdOT19UT0tFTicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVzcG9uc2UgRm9ybWF0IENvbnNpc3RlbmN5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgbWFpbnRhaW4gY29uc2lzdGVudCBzdWNjZXNzIHJlc3BvbnNlIGZvcm1hdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2F1dGgvcmVnaXN0ZXInKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgICBmaXJzdE5hbWU6ICdUZXN0JyxcbiAgICAgICAgICBsYXN0TmFtZTogJ1VzZXInXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdzdWNjZXNzJywgdHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9IYXZlUHJvcGVydHkoJ2RhdGEnKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVzcG9uc2UuYm9keS5kYXRhKS50b0JlKCdvYmplY3QnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbWFpbnRhaW4gY29uc2lzdGVudCBlcnJvciByZXNwb25zZSBmb3JtYXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL2xvZ2luJylcbiAgICAgICAgLnNlbmQoe30pXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdzdWNjZXNzJywgZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcicpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvSGF2ZVByb3BlcnR5KCdjb2RlJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvcikudG9IYXZlUHJvcGVydHkoJ21lc3NhZ2UnKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNwQyxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDbkMsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2xDLE1BQU1HLElBQUksR0FBR0gsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQ3pDLE1BQU07RUFBRUk7QUFBYyxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUV2REssUUFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNO0VBQzVCLElBQUlDLEdBQUc7RUFFUEMsU0FBUyxDQUFDLE1BQU07SUFDZEQsR0FBRyxHQUFHRixhQUFhLENBQUMsQ0FBQztFQUN2QixDQUFDLENBQUM7RUFFRkksVUFBVSxDQUFDLFlBQVk7SUFDckI7SUFDQSxNQUFNTCxJQUFJLENBQUNNLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMzQixDQUFDLENBQUM7RUFFRkosUUFBUSxDQUFDLHlCQUF5QixFQUFFLE1BQU07SUFDeEMsTUFBTUssYUFBYSxHQUFHO01BQ3BCQyxLQUFLLEVBQUUsa0JBQWtCO01BQ3pCQyxRQUFRLEVBQUUsYUFBYTtNQUN2QkMsU0FBUyxFQUFFLE1BQU07TUFDakJDLFFBQVEsRUFBRTtJQUNaLENBQUM7SUFFREMsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLFlBQVk7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