a5ed977d731014ce30a0e3121ab06842
// Mock mongodb-memory-server to prevent library dependency issues
_getJestObj().mock('mongodb-memory-server', () => ({
  MongoMemoryServer: {
    create: jest.fn().mockResolvedValue({
      getUri: jest.fn().mockReturnValue('mongodb://localhost:27017/test'),
      stop: jest.fn().mockResolvedValue(true)
    })
  }
}));

// Mock mongoose before requiring models
_getJestObj().mock('mongoose', () => {
  const mockConnect = jest.fn().mockResolvedValue(true);
  const mockClose = jest.fn().mockResolvedValue(true);

  // Mock ObjectId constructor
  const MockObjectId = jest.fn();
  MockObjectId.toString = jest.fn().mockReturnValue('507f1f77bcf86cd799439011');
  const mockModel = name => {
    const MockedModel = jest.fn();

    // Create a chainable mock for select
    const createSelectableMock = returnValue => {
      const mock = jest.fn().mockResolvedValue(returnValue);
      mock.select = jest.fn().mockResolvedValue(returnValue);
      return mock;
    };

    // Static methods
    MockedModel.findById = jest.fn().mockImplementation(id => {
      const mock = jest.fn().mockResolvedValue(null);
      mock.select = jest.fn().mockResolvedValue(null);
      return mock;
    });
    MockedModel.findOne = jest.fn();
    MockedModel.find = jest.fn();
    MockedModel.create = jest.fn();
    MockedModel.deleteMany = jest.fn();
    MockedModel.deleteOne = jest.fn();
    MockedModel.findByIdAndUpdate = jest.fn();

    // Instance methods
    MockedModel.prototype.save = jest.fn().mockResolvedValue(true);
    MockedModel.prototype.toObject = jest.fn().mockReturnValue({});
    MockedModel.prototype.toPublicJSON = jest.fn().mockReturnValue({});
    return MockedModel;
  };

  // Mock Schema constructor
  const MockSchema = jest.fn().mockImplementation((definition, options) => {
    const schema = {
      index: jest.fn(),
      methods: {},
      statics: {},
      pre: jest.fn(),
      post: jest.fn(),
      plugin: jest.fn()
    };
    return schema;
  });

  // Set up Schema.Types
  MockSchema.Types = {
    ObjectId: MockObjectId,
    String: String,
    Number: Number,
    Date: Date,
    Boolean: Boolean,
    Array: Array,
    Mixed: Object
  };
  return {
    connect: mockConnect,
    connection: {
      close: mockClose,
      readyState: 1,
      collections: {}
    },
    model: mockModel,
    Schema: MockSchema
  };
});

// Import models after mocking mongoose

// Mock the auth middleware
_getJestObj().mock('../../middleware/auth', () => ({
  authenticateToken: (req, res, next) => {
    req.user = null; // Default to guest user
    next();
  }
}));

// Mock the CSRF middleware
_getJestObj().mock('../../middleware/sessionCSRF', () => ({
  validateCSRFToken: (req, res, next) => {
    next(); // Skip CSRF validation in tests
  }
}));

// Mock cart service
_getJestObj().mock('../../services/cartService', () => {
  return {
    getCartWithPerformanceOptimization: jest.fn(),
    updateCartOptimistically: jest.fn(),
    mergeCartsWithConflictResolution: jest.fn()
  };
});

// Mock auth service
_getJestObj().mock('../../services/authService', () => ({
  validateTokenSafely: jest.fn()
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment node
 */

const request = require('supertest');
const express = require('express');
const session = require('express-session');
const Product = require('../../models/Product');
const User = require('../../models/User');
const Cart = require('../../models/Cart');
const cartRoutes = require('../../routes/cart');
const cartService = require('../../services/cartService');

// Create test app
const createTestApp = () => {
  const app = express();

  // Session middleware for testing
  app.use(session({
    secret: 'test-secret',
    resave: false,
    saveUninitialized: true,
    cookie: {
      secure: false,
      httpOnly: false,
      maxAge: 1000 * 60 * 60
    }
  }));
  app.use(express.json());
  app.use('/api/cart', cartRoutes);
  return app;
};
describe('Cart Routes', () => {
  let app;
  let testProduct;
  let testCart;
  beforeAll(async () => {
    app = createTestApp();
  });
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();

    // Mock test product
    testProduct = {
      _id: '507f1f77bcf86cd799439011',
      name: 'Test Crystal',
      slug: 'test-crystal',
      description: 'A test crystal for unit testing',
      shortDescription: 'A test crystal for unit testing',
      price: 29.99,
      category: 'crystals',
      isActive: true,
      properties: {
        chakra: ['crown'],
        element: ['air'],
        healing: ['test']
      },
      wholesaler: {
        name: 'Test Wholesaler',
        email: 'test@wholesaler.com',
        productCode: 'TEST-001',
        cost: 15.00
      },
      toPublicJSON: () => ({
        _id: '507f1f77bcf86cd799439011',
        name: 'Test Crystal',
        price: 29.99,
        category: 'crystals',
        isActive: true
      })
    };

    // Mock test cart
    testCart = {
      _id: '507f1f77bcf86cd799439012',
      sessionId: 'guest_test_session',
      items: [],
      save: jest.fn().mockResolvedValue(true),
      addItem: jest.fn(),
      removeItem: jest.fn(),
      updateItem: jest.fn()
    };

    // Setup default Product model mocks
    Product.deleteMany = jest.fn().mockResolvedValue(true);
    Product.create = jest.fn().mockResolvedValue(testProduct);

    // Create a comprehensive findById mock that handles both direct calls and select chaining
    Product.findById = jest.fn().mockImplementation(id => {
      // Create a promise-like object that can be awaited directly OR has a select method
      const result = {
        // For direct await
        then: (onResolve, onReject) => Promise.resolve(testProduct).then(onResolve, onReject),
        // For select chaining
        select: jest.fn().mockResolvedValue({
          ...testProduct,
          toPublicJSON: testProduct.toPublicJSON
        })
      };
      return result;
    });

    // Setup default Cart model mocks
    Cart.findOne = jest.fn().mockResolvedValue(testCart);
    Cart.find = jest.fn().mockResolvedValue([testCart]); // Return array for cleanup logic
    Cart.prototype.save = jest.fn().mockResolvedValue(true);
    Cart.deleteOne = jest.fn().mockResolvedValue(true);
    Cart.deleteMany = jest.fn().mockResolvedValue({
      deletedCount: 1
    });
    Cart.findByIdAndUpdate = jest.fn().mockResolvedValue(testCart);
    Cart.findOneAndUpdate = jest.fn().mockResolvedValue(testCart);

    // Mock Cart constructor more completely
    Cart.mockImplementation = jest.fn().mockImplementation(data => ({
      ...testCart,
      ...data,
      save: jest.fn().mockResolvedValue(true)
    }));

    // Set up Cart as a constructor function
    global.Cart = jest.fn().mockImplementation(data => ({
      ...testCart,
      ...data,
      save: jest.fn().mockResolvedValue(true)
    }));

    // Also assign the static methods to the global Cart
    global.Cart.findOne = Cart.findOne;
    global.Cart.find = Cart.find;
    global.Cart.deleteOne = Cart.deleteOne;
    global.Cart.deleteMany = Cart.deleteMany;
    global.Cart.findByIdAndUpdate = Cart.findByIdAndUpdate;
    global.Cart.findOneAndUpdate = Cart.findOneAndUpdate;

    // Setup cart service mocks
    cartService.getCartWithPerformanceOptimization.mockImplementation(async req => ({
      type: 'guest',
      cart: testCart,
      sessionId: 'guest_test_session'
    }));
    cartService.updateCartOptimistically.mockResolvedValue({
      duration: 0,
      performance: 'test'
    });
  });
  describe('GET /api/cart', () => {
    it('should return empty cart for new session', async () => {
      // Mock empty cart
      const emptyCart = {
        ...testCart,
        items: []
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: emptyCart,
        sessionId: 'guest_test_session'
      });
      const response = await request(app).get('/api/cart').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.cart.items).toEqual([]);
      expect(response.body.data.cart.subtotal).toBe(0);
      expect(response.body.data.cart.itemCount).toBe(0);
      expect(response.body.data.cart.isEmpty).toBe(true);
    });
    it('should return cart with populated product details', async () => {
      // Mock cart with items
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 2,
          price: 29.99,
          addedAt: new Date()
        }]
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_test_session'
      });
      const response = await request(app).get('/api/cart').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.cart.items).toHaveLength(1);
      expect(response.body.data.cart.items[0].product.name).toBe('Test Crystal');
      expect(response.body.data.cart.items[0].quantity).toBe(2);
      expect(response.body.data.cart.itemCount).toBe(2);
      expect(response.body.data.cart.isEmpty).toBe(false);
    });
    it('should filter out inactive products from cart', async () => {
      // Mock inactive product
      const inactiveProduct = {
        ...testProduct,
        isActive: false
      };
      Product.findById = jest.fn().mockImplementation(id => ({
        select: jest.fn().mockResolvedValue(inactiveProduct)
      }));

      // Mock cart with items
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 1,
          price: 29.99
        }]
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_test_session'
      });
      const response = await request(app).get('/api/cart').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.cart.items).toEqual([]);
      expect(response.body.data.cart.isEmpty).toBe(true);
    });
  });
  describe('POST /api/cart/add', () => {
    it('should add new item to cart', async () => {
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item added to cart');
    });
    it('should reject invalid product ID', async () => {
      const response = await request(app).post('/api/cart/add').send({
        productId: 'invalid-id',
        quantity: 1
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_PRODUCT_ID');
    });
    it('should reject missing product ID', async () => {
      const response = await request(app).post('/api/cart/add').send({
        quantity: 1
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('MISSING_PRODUCT_ID');
    });
    it('should reject invalid quantity', async () => {
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 0
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_QUANTITY');
    });
    it('should reject quantity over maximum', async () => {
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 100
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_QUANTITY');
    });
    it('should reject inactive product', async () => {
      // Mock inactive product
      const inactiveProduct = {
        ...testProduct,
        isActive: false
      };
      Product.findById = jest.fn().mockResolvedValue(inactiveProduct);
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(404);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('PRODUCT_NOT_FOUND');
    });
    it('should reject product not found', async () => {
      Product.findById = jest.fn().mockResolvedValue(null);
      const response = await request(app).post('/api/cart/add').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(404);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('PRODUCT_NOT_FOUND');
    });
  });
  describe('PUT /api/cart/update', () => {
    it('should update item quantity', async () => {
      // Mock cart with existing item
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 1,
          price: 29.99
        }]
      };

      // Mock getOrCreateCart by overriding Cart.findOne to return cart with items
      Cart.findOne = jest.fn().mockResolvedValue(cartWithItems);
      cartService.getCartWithPerformanceOptimization.mockResolvedValueOnce({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_test_session'
      }).mockResolvedValueOnce({
        type: 'guest',
        cart: {
          ...cartWithItems,
          items: [{
            product: testProduct._id,
            quantity: 5,
            price: 29.99
          }]
        },
        sessionId: 'guest_test_session'
      });
      const response = await request(app).put('/api/cart/update').send({
        productId: testProduct._id,
        quantity: 5
      });
      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Cart updated');
    });
    it('should remove item when quantity is 0', async () => {
      // Mock cart with existing item
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 1,
          price: 29.99
        }]
      };

      // Mock getOrCreateCart by overriding Cart.findOne to return cart with items
      Cart.findOne = jest.fn().mockResolvedValue(cartWithItems);
      cartService.getCartWithPerformanceOptimization.mockResolvedValueOnce({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_test_session'
      }).mockResolvedValueOnce({
        type: 'guest',
        cart: {
          ...cartWithItems,
          items: []
        },
        sessionId: 'guest_test_session'
      });
      const response = await request(app).put('/api/cart/update').send({
        productId: testProduct._id,
        quantity: 0
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item removed from cart');
    });
    it('should reject missing product ID', async () => {
      const response = await request(app).put('/api/cart/update').send({
        quantity: 1
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('MISSING_PRODUCT_ID');
    });
    it('should reject invalid quantity', async () => {
      const response = await request(app).put('/api/cart/update').send({
        productId: testProduct._id,
        quantity: -1
      }).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('INVALID_QUANTITY');
    });
    it('should return 404 for non-existent item', async () => {
      // Mock empty cart
      Cart.findOne = jest.fn().mockResolvedValue({
        ...testCart,
        items: []
      });
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: {
          ...testCart,
          items: []
        },
        sessionId: 'guest_test_session'
      });
      const response = await request(app).put('/api/cart/update').send({
        productId: testProduct._id,
        quantity: 1
      }).expect(404);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('ITEM_NOT_FOUND');
    });
  });
  describe('DELETE /api/cart/remove', () => {
    it('should remove item from cart', async () => {
      // Mock cart with existing item
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 3,
          price: 29.99
        }]
      };

      // Mock getOrCreateCart by overriding Cart.findOne to return cart with items
      Cart.findOne = jest.fn().mockResolvedValue(cartWithItems);
      cartService.getCartWithPerformanceOptimization.mockResolvedValueOnce({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_test_session'
      }).mockResolvedValueOnce({
        type: 'guest',
        cart: {
          ...cartWithItems,
          items: []
        },
        sessionId: 'guest_test_session'
      });
      const response = await request(app).delete('/api/cart/remove').send({
        productId: testProduct._id
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item removed from cart');
    });
    it('should reject missing product ID', async () => {
      const response = await request(app).delete('/api/cart/remove').send({}).expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('MISSING_PRODUCT_ID');
    });
    it('should return 404 for non-existent item', async () => {
      // Mock empty cart
      Cart.findOne = jest.fn().mockResolvedValue({
        ...testCart,
        items: []
      });
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: {
          ...testCart,
          items: []
        },
        sessionId: 'guest_test_session'
      });
      const response = await request(app).delete('/api/cart/remove').send({
        productId: testProduct._id
      }).expect(404);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('ITEM_NOT_FOUND');
    });
  });
  describe('DELETE /api/cart/clear', () => {
    it('should clear entire cart', async () => {
      // Mock cart with items
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 2,
          price: 29.99
        }]
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_test_session'
      });
      Cart.deleteOne = jest.fn().mockResolvedValue(true);
      Cart.prototype.constructor = jest.fn().mockImplementation(() => ({
        save: jest.fn().mockResolvedValue(true)
      }));
      const response = await request(app).delete('/api/cart/clear').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Cart cleared');
      expect(response.body.cartItemCount).toBe(0);
    });
    it('should work on empty cart', async () => {
      // Mock empty cart
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: {
          ...testCart,
          items: []
        },
        sessionId: 'guest_test_session'
      });
      const response = await request(app).delete('/api/cart/clear').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.cartItemCount).toBe(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJNb25nb01lbW9yeVNlcnZlciIsImNyZWF0ZSIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZ2V0VXJpIiwibW9ja1JldHVyblZhbHVlIiwic3RvcCIsIm1vY2tDb25uZWN0IiwibW9ja0Nsb3NlIiwiTW9ja09iamVjdElkIiwidG9TdHJpbmciLCJtb2NrTW9kZWwiLCJuYW1lIiwiTW9ja2VkTW9kZWwiLCJjcmVhdGVTZWxlY3RhYmxlTW9jayIsInJldHVyblZhbHVlIiwic2VsZWN0IiwiZmluZEJ5SWQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJpZCIsImZpbmRPbmUiLCJmaW5kIiwiZGVsZXRlTWFueSIsImRlbGV0ZU9uZSIsImZpbmRCeUlkQW5kVXBkYXRlIiwicHJvdG90eXBlIiwic2F2ZSIsInRvT2JqZWN0IiwidG9QdWJsaWNKU09OIiwiTW9ja1NjaGVtYSIsImRlZmluaXRpb24iLCJvcHRpb25zIiwic2NoZW1hIiwiaW5kZXgiLCJtZXRob2RzIiwic3RhdGljcyIsInByZSIsInBvc3QiLCJwbHVnaW4iLCJUeXBlcyIsIk9iamVjdElkIiwiU3RyaW5nIiwiTnVtYmVyIiwiRGF0ZSIsIkJvb2xlYW4iLCJBcnJheSIsIk1peGVkIiwiT2JqZWN0IiwiY29ubmVjdCIsImNvbm5lY3Rpb24iLCJjbG9zZSIsInJlYWR5U3RhdGUiLCJjb2xsZWN0aW9ucyIsIm1vZGVsIiwiU2NoZW1hIiwiYXV0aGVudGljYXRlVG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0IiwidXNlciIsInZhbGlkYXRlQ1NSRlRva2VuIiwiZ2V0Q2FydFdpdGhQZXJmb3JtYW5jZU9wdGltaXphdGlvbiIsInVwZGF0ZUNhcnRPcHRpbWlzdGljYWxseSIsIm1lcmdlQ2FydHNXaXRoQ29uZmxpY3RSZXNvbHV0aW9uIiwidmFsaWRhdGVUb2tlblNhZmVseSIsInJlcXVpcmUiLCJyZXF1ZXN0IiwiZXhwcmVzcyIsInNlc3Npb24iLCJQcm9kdWN0IiwiVXNlciIsIkNhcnQiLCJjYXJ0Um91dGVzIiwiY2FydFNlcnZpY2UiLCJjcmVhdGVUZXN0QXBwIiwiYXBwIiwidXNlIiwic2VjcmV0IiwicmVzYXZlIiwic2F2ZVVuaW5pdGlhbGl6ZWQiLCJjb29raWUiLCJzZWN1cmUiLCJodHRwT25seSIsIm1heEFnZSIsImpzb24iLCJkZXNjcmliZSIsInRlc3RQcm9kdWN0IiwidGVzdENhcnQiLCJiZWZvcmVBbGwiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIl9pZCIsInNsdWciLCJkZXNjcmlwdGlvbiIsInNob3J0RGVzY3JpcHRpb24iLCJwcmljZSIsImNhdGVnb3J5IiwiaXNBY3RpdmUiLCJwcm9wZXJ0aWVzIiwiY2hha3JhIiwiZWxlbWVudCIsImhlYWxpbmciLCJ3aG9sZXNhbGVyIiwiZW1haWwiLCJwcm9kdWN0Q29kZSIsImNvc3QiLCJzZXNzaW9uSWQiLCJpdGVtcyIsImFkZEl0ZW0iLCJyZW1vdmVJdGVtIiwidXBkYXRlSXRlbSIsInJlc3VsdCIsInRoZW4iLCJvblJlc29sdmUiLCJvblJlamVjdCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGVsZXRlZENvdW50IiwiZmluZE9uZUFuZFVwZGF0ZSIsImRhdGEiLCJnbG9iYWwiLCJ0eXBlIiwiY2FydCIsImR1cmF0aW9uIiwicGVyZm9ybWFuY2UiLCJpdCIsImVtcHR5Q2FydCIsInJlc3BvbnNlIiwiZ2V0IiwiZXhwZWN0IiwiYm9keSIsInN1Y2Nlc3MiLCJ0b0JlIiwidG9FcXVhbCIsInN1YnRvdGFsIiwiaXRlbUNvdW50IiwiaXNFbXB0eSIsImNhcnRXaXRoSXRlbXMiLCJwcm9kdWN0IiwicXVhbnRpdHkiLCJhZGRlZEF0IiwidG9IYXZlTGVuZ3RoIiwiaW5hY3RpdmVQcm9kdWN0Iiwic2VuZCIsInByb2R1Y3RJZCIsIm1lc3NhZ2UiLCJlcnJvciIsImNvZGUiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJwdXQiLCJzdGF0dXMiLCJkZWxldGUiLCJjb25zdHJ1Y3RvciIsImNhcnRJdGVtQ291bnQiXSwic291cmNlcyI6WyJjYXJ0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBub2RlXG4gKi9cblxuY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJ3N1cGVydGVzdCcpO1xuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IHNlc3Npb24gPSByZXF1aXJlKCdleHByZXNzLXNlc3Npb24nKTtcblxuLy8gTW9jayBtb25nb2RiLW1lbW9yeS1zZXJ2ZXIgdG8gcHJldmVudCBsaWJyYXJ5IGRlcGVuZGVuY3kgaXNzdWVzXG5qZXN0Lm1vY2soJ21vbmdvZGItbWVtb3J5LXNlcnZlcicsICgpID0+ICh7XG4gIE1vbmdvTWVtb3J5U2VydmVyOiB7XG4gICAgY3JlYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgZ2V0VXJpOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L3Rlc3QnKSxcbiAgICAgIHN0b3A6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKVxuICAgIH0pXG4gIH1cbn0pKTtcblxuLy8gTW9jayBtb25nb29zZSBiZWZvcmUgcmVxdWlyaW5nIG1vZGVsc1xuamVzdC5tb2NrKCdtb25nb29zZScsICgpID0+IHtcbiAgY29uc3QgbW9ja0Nvbm5lY3QgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSk7XG4gIGNvbnN0IG1vY2tDbG9zZSA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKTtcbiAgXG4gIC8vIE1vY2sgT2JqZWN0SWQgY29uc3RydWN0b3JcbiAgY29uc3QgTW9ja09iamVjdElkID0gamVzdC5mbigpO1xuICBNb2NrT2JqZWN0SWQudG9TdHJpbmcgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCc1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEnKTtcbiAgXG4gIGNvbnN0IG1vY2tNb2RlbCA9IChuYW1lKSA9PiB7XG4gICAgY29uc3QgTW9ja2VkTW9kZWwgPSBqZXN0LmZuKCk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGEgY2hhaW5hYmxlIG1vY2sgZm9yIHNlbGVjdFxuICAgIGNvbnN0IGNyZWF0ZVNlbGVjdGFibGVNb2NrID0gKHJldHVyblZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBtb2NrID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHJldHVyblZhbHVlKTtcbiAgICAgIG1vY2suc2VsZWN0ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHJldHVyblZhbHVlKTtcbiAgICAgIHJldHVybiBtb2NrO1xuICAgIH07XG4gICAgXG4gICAgLy8gU3RhdGljIG1ldGhvZHNcbiAgICBNb2NrZWRNb2RlbC5maW5kQnlJZCA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKGlkKSA9PiB7XG4gICAgICBjb25zdCBtb2NrID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICAgICAgbW9jay5zZWxlY3QgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG4gICAgICByZXR1cm4gbW9jaztcbiAgICB9KTtcbiAgICBNb2NrZWRNb2RlbC5maW5kT25lID0gamVzdC5mbigpO1xuICAgIE1vY2tlZE1vZGVsLmZpbmQgPSBqZXN0LmZuKCk7XG4gICAgTW9ja2VkTW9kZWwuY3JlYXRlID0gamVzdC5mbigpO1xuICAgIE1vY2tlZE1vZGVsLmRlbGV0ZU1hbnkgPSBqZXN0LmZuKCk7XG4gICAgTW9ja2VkTW9kZWwuZGVsZXRlT25lID0gamVzdC5mbigpO1xuICAgIE1vY2tlZE1vZGVsLmZpbmRCeUlkQW5kVXBkYXRlID0gamVzdC5mbigpO1xuICAgIFxuICAgIC8vIEluc3RhbmNlIG1ldGhvZHNcbiAgICBNb2NrZWRNb2RlbC5wcm90b3R5cGUuc2F2ZSA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKTtcbiAgICBNb2NrZWRNb2RlbC5wcm90b3R5cGUudG9PYmplY3QgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHt9KTtcbiAgICBNb2NrZWRNb2RlbC5wcm90b3R5cGUudG9QdWJsaWNKU09OID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7fSk7XG4gICAgXG4gICAgcmV0dXJuIE1vY2tlZE1vZGVsO1xuICB9O1xuICBcbiAgLy8gTW9jayBTY2hlbWEgY29uc3RydWN0b3JcbiAgY29uc3QgTW9ja1NjaGVtYSA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKGRlZmluaXRpb24sIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICBpbmRleDogamVzdC5mbigpLFxuICAgICAgbWV0aG9kczoge30sXG4gICAgICBzdGF0aWNzOiB7fSxcbiAgICAgIHByZTogamVzdC5mbigpLFxuICAgICAgcG9zdDogamVzdC5mbigpLFxuICAgICAgcGx1Z2luOiBqZXN0LmZuKClcbiAgICB9O1xuICAgIHJldHVybiBzY2hlbWE7XG4gIH0pO1xuICBcbiAgLy8gU2V0IHVwIFNjaGVtYS5UeXBlc1xuICBNb2NrU2NoZW1hLlR5cGVzID0ge1xuICAgIE9iamVjdElkOiBNb2NrT2JqZWN0SWQsXG4gICAgU3RyaW5nOiBTdHJpbmcsXG4gICAgTnVtYmVyOiBOdW1iZXIsXG4gICAgRGF0ZTogRGF0ZSxcbiAgICBCb29sZWFuOiBCb29sZWFuLFxuICAgIEFycmF5OiBBcnJheSxcbiAgICBNaXhlZDogT2JqZWN0XG4gIH07XG4gIFxuICByZXR1cm4ge1xuICAgIGNvbm5lY3Q6IG1vY2tDb25uZWN0LFxuICAgIGNvbm5lY3Rpb246IHtcbiAgICAgIGNsb3NlOiBtb2NrQ2xvc2UsXG4gICAgICByZWFkeVN0YXRlOiAxLFxuICAgICAgY29sbGVjdGlvbnM6IHt9XG4gICAgfSxcbiAgICBtb2RlbDogbW9ja01vZGVsLFxuICAgIFNjaGVtYTogTW9ja1NjaGVtYVxuICB9O1xufSk7XG5cbi8vIEltcG9ydCBtb2RlbHMgYWZ0ZXIgbW9ja2luZyBtb25nb29zZVxuY29uc3QgUHJvZHVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZGVscy9Qcm9kdWN0Jyk7XG5jb25zdCBVc2VyID0gcmVxdWlyZSgnLi4vLi4vbW9kZWxzL1VzZXInKTtcbmNvbnN0IENhcnQgPSByZXF1aXJlKCcuLi8uLi9tb2RlbHMvQ2FydCcpO1xuY29uc3QgY2FydFJvdXRlcyA9IHJlcXVpcmUoJy4uLy4uL3JvdXRlcy9jYXJ0Jyk7XG5cbi8vIE1vY2sgdGhlIGF1dGggbWlkZGxld2FyZVxuamVzdC5tb2NrKCcuLi8uLi9taWRkbGV3YXJlL2F1dGgnLCAoKSA9PiAoe1xuICBhdXRoZW50aWNhdGVUb2tlbjogKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgcmVxLnVzZXIgPSBudWxsOyAvLyBEZWZhdWx0IHRvIGd1ZXN0IHVzZXJcbiAgICBuZXh0KCk7XG4gIH1cbn0pKTtcblxuLy8gTW9jayB0aGUgQ1NSRiBtaWRkbGV3YXJlXG5qZXN0Lm1vY2soJy4uLy4uL21pZGRsZXdhcmUvc2Vzc2lvbkNTUkYnLCAoKSA9PiAoe1xuICB2YWxpZGF0ZUNTUkZUb2tlbjogKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgbmV4dCgpOyAvLyBTa2lwIENTUkYgdmFsaWRhdGlvbiBpbiB0ZXN0c1xuICB9XG59KSk7XG5cbi8vIE1vY2sgY2FydCBzZXJ2aWNlXG5qZXN0Lm1vY2soJy4uLy4uL3NlcnZpY2VzL2NhcnRTZXJ2aWNlJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGdldENhcnRXaXRoUGVyZm9ybWFuY2VPcHRpbWl6YXRpb246IGplc3QuZm4oKSxcbiAgICB1cGRhdGVDYXJ0T3B0aW1pc3RpY2FsbHk6IGplc3QuZm4oKSxcbiAgICBtZXJnZUNhcnRzV2l0aENvbmZsaWN0UmVzb2x1dGlvbjogamVzdC5mbigpXG4gIH07XG59KTtcblxuLy8gTW9jayBhdXRoIHNlcnZpY2Vcbmplc3QubW9jaygnLi4vLi4vc2VydmljZXMvYXV0aFNlcnZpY2UnLCAoKSA9PiAoe1xuICB2YWxpZGF0ZVRva2VuU2FmZWx5OiBqZXN0LmZuKClcbn0pKTtcblxuY29uc3QgY2FydFNlcnZpY2UgPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9jYXJ0U2VydmljZScpO1xuXG4vLyBDcmVhdGUgdGVzdCBhcHBcbmNvbnN0IGNyZWF0ZVRlc3RBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbiAgXG4gIC8vIFNlc3Npb24gbWlkZGxld2FyZSBmb3IgdGVzdGluZ1xuICBhcHAudXNlKHNlc3Npb24oe1xuICAgIHNlY3JldDogJ3Rlc3Qtc2VjcmV0JyxcbiAgICByZXNhdmU6IGZhbHNlLFxuICAgIHNhdmVVbmluaXRpYWxpemVkOiB0cnVlLFxuICAgIGNvb2tpZTogeyBcbiAgICAgIHNlY3VyZTogZmFsc2UsXG4gICAgICBodHRwT25seTogZmFsc2UsXG4gICAgICBtYXhBZ2U6IDEwMDAgKiA2MCAqIDYwXG4gICAgfVxuICB9KSk7XG4gIFxuICBhcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbiAgYXBwLnVzZSgnL2FwaS9jYXJ0JywgY2FydFJvdXRlcyk7XG4gIFxuICByZXR1cm4gYXBwO1xufTtcblxuZGVzY3JpYmUoJ0NhcnQgUm91dGVzJywgKCkgPT4ge1xuICBsZXQgYXBwO1xuICBsZXQgdGVzdFByb2R1Y3Q7XG4gIGxldCB0ZXN0Q2FydDtcbiAgXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgYXBwID0gY3JlYXRlVGVzdEFwcCgpO1xuICB9KTtcbiAgXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIFJlc2V0IGFsbCBtb2Nrc1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIFxuICAgIC8vIE1vY2sgdGVzdCBwcm9kdWN0XG4gICAgdGVzdFByb2R1Y3QgPSB7XG4gICAgICBfaWQ6ICc1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEnLFxuICAgICAgbmFtZTogJ1Rlc3QgQ3J5c3RhbCcsXG4gICAgICBzbHVnOiAndGVzdC1jcnlzdGFsJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnQSB0ZXN0IGNyeXN0YWwgZm9yIHVuaXQgdGVzdGluZycsXG4gICAgICBzaG9ydERlc2NyaXB0aW9uOiAnQSB0ZXN0IGNyeXN0YWwgZm9yIHVuaXQgdGVzdGluZycsXG4gICAgICBwcmljZTogMjkuOTksXG4gICAgICBjYXRlZ29yeTogJ2NyeXN0YWxzJyxcbiAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBjaGFrcmE6IFsnY3Jvd24nXSxcbiAgICAgICAgZWxlbWVudDogWydhaXInXSxcbiAgICAgICAgaGVhbGluZzogWyd0ZXN0J11cbiAgICAgIH0sXG4gICAgICB3aG9sZXNhbGVyOiB7XG4gICAgICAgIG5hbWU6ICdUZXN0IFdob2xlc2FsZXInLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAd2hvbGVzYWxlci5jb20nLFxuICAgICAgICBwcm9kdWN0Q29kZTogJ1RFU1QtMDAxJyxcbiAgICAgICAgY29zdDogMTUuMDBcbiAgICAgIH0sXG4gICAgICB0b1B1YmxpY0pTT046ICgpID0+ICh7XG4gICAgICAgIF9pZDogJzUwN2YxZjc3YmNmODZjZDc5OTQzOTAxMScsXG4gICAgICAgIG5hbWU6ICdUZXN0IENyeXN0YWwnLFxuICAgICAgICBwcmljZTogMjkuOTksXG4gICAgICAgIGNhdGVnb3J5OiAnY3J5c3RhbHMnLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxuICAgICAgfSlcbiAgICB9O1xuICAgIFxuICAgIC8vIE1vY2sgdGVzdCBjYXJ0XG4gICAgdGVzdENhcnQgPSB7XG4gICAgICBfaWQ6ICc1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTInLFxuICAgICAgc2Vzc2lvbklkOiAnZ3Vlc3RfdGVzdF9zZXNzaW9uJyxcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICAgIHNhdmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICAgIGFkZEl0ZW06IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcbiAgICAgIHVwZGF0ZUl0ZW06IGplc3QuZm4oKVxuICAgIH07XG4gICAgXG4gICAgLy8gU2V0dXAgZGVmYXVsdCBQcm9kdWN0IG1vZGVsIG1vY2tzXG4gICAgUHJvZHVjdC5kZWxldGVNYW55ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuICAgIFByb2R1Y3QuY3JlYXRlID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRlc3RQcm9kdWN0KTtcbiAgICBcbiAgICAvLyBDcmVhdGUgYSBjb21wcmVoZW5zaXZlIGZpbmRCeUlkIG1vY2sgdGhhdCBoYW5kbGVzIGJvdGggZGlyZWN0IGNhbGxzIGFuZCBzZWxlY3QgY2hhaW5pbmdcbiAgICBQcm9kdWN0LmZpbmRCeUlkID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoaWQpID0+IHtcbiAgICAgIC8vIENyZWF0ZSBhIHByb21pc2UtbGlrZSBvYmplY3QgdGhhdCBjYW4gYmUgYXdhaXRlZCBkaXJlY3RseSBPUiBoYXMgYSBzZWxlY3QgbWV0aG9kXG4gICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIC8vIEZvciBkaXJlY3QgYXdhaXRcbiAgICAgICAgdGhlbjogKG9uUmVzb2x2ZSwgb25SZWplY3QpID0+IFByb21pc2UucmVzb2x2ZSh0ZXN0UHJvZHVjdCkudGhlbihvblJlc29sdmUsIG9uUmVqZWN0KSxcbiAgICAgICAgLy8gRm9yIHNlbGVjdCBjaGFpbmluZ1xuICAgICAgICBzZWxlY3Q6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgICAgLi4udGVzdFByb2R1Y3QsXG4gICAgICAgICAgdG9QdWJsaWNKU09OOiB0ZXN0UHJvZHVjdC50b1B1YmxpY0pTT05cbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICAgIFxuICAgIC8vIFNldHVwIGRlZmF1bHQgQ2FydCBtb2RlbCBtb2Nrc1xuICAgIENhcnQuZmluZE9uZSA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0ZXN0Q2FydCk7XG4gICAgQ2FydC5maW5kID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFt0ZXN0Q2FydF0pOyAvLyBSZXR1cm4gYXJyYXkgZm9yIGNsZWFudXAgbG9naWNcbiAgICBDYXJ0LnByb3RvdHlwZS5zYXZlID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuICAgIENhcnQuZGVsZXRlT25lID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuICAgIENhcnQuZGVsZXRlTWFueSA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRlbGV0ZWRDb3VudDogMSB9KTtcbiAgICBDYXJ0LmZpbmRCeUlkQW5kVXBkYXRlID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRlc3RDYXJ0KTtcbiAgICBDYXJ0LmZpbmRPbmVBbmRVcGRhdGUgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodGVzdENhcnQpO1xuICAgIFxuICAgIC8vIE1vY2sgQ2FydCBjb25zdHJ1Y3RvciBtb3JlIGNvbXBsZXRlbHlcbiAgICBDYXJ0Lm1vY2tJbXBsZW1lbnRhdGlvbiA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKGRhdGEpID0+ICh7XG4gICAgICAuLi50ZXN0Q2FydCxcbiAgICAgIC4uLmRhdGEsXG4gICAgICBzYXZlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSlcbiAgICB9KSk7XG4gICAgXG4gICAgLy8gU2V0IHVwIENhcnQgYXMgYSBjb25zdHJ1Y3RvciBmdW5jdGlvblxuICAgIGdsb2JhbC5DYXJ0ID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoZGF0YSkgPT4gKHtcbiAgICAgIC4uLnRlc3RDYXJ0LFxuICAgICAgLi4uZGF0YSxcbiAgICAgIHNhdmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKVxuICAgIH0pKTtcbiAgICBcbiAgICAvLyBBbHNvIGFzc2lnbiB0aGUgc3RhdGljIG1ldGhvZHMgdG8gdGhlIGdsb2JhbCBDYXJ0XG4gICAgZ2xvYmFsLkNhcnQuZmluZE9uZSA9IENhcnQuZmluZE9uZTtcbiAgICBnbG9iYWwuQ2FydC5maW5kID0gQ2FydC5maW5kO1xuICAgIGdsb2JhbC5DYXJ0LmRlbGV0ZU9uZSA9IENhcnQuZGVsZXRlT25lO1xuICAgIGdsb2JhbC5DYXJ0LmRlbGV0ZU1hbnkgPSBDYXJ0LmRlbGV0ZU1hbnk7XG4gICAgZ2xvYmFsLkNhcnQuZmluZEJ5SWRBbmRVcGRhdGUgPSBDYXJ0LmZpbmRCeUlkQW5kVXBkYXRlO1xuICAgIGdsb2JhbC5DYXJ0LmZpbmRPbmVBbmRVcGRhdGUgPSBDYXJ0LmZpbmRPbmVBbmRVcGRhdGU7XG4gICAgXG4gICAgLy8gU2V0dXAgY2FydCBzZXJ2aWNlIG1vY2tzXG4gICAgY2FydFNlcnZpY2UuZ2V0Q2FydFdpdGhQZXJmb3JtYW5jZU9wdGltaXphdGlvbi5tb2NrSW1wbGVtZW50YXRpb24oYXN5bmMgKHJlcSkgPT4gKHtcbiAgICAgIHR5cGU6ICdndWVzdCcsXG4gICAgICBjYXJ0OiB0ZXN0Q2FydCxcbiAgICAgIHNlc3Npb25JZDogJ2d1ZXN0X3Rlc3Rfc2Vzc2lvbidcbiAgICB9KSk7XG4gICAgXG4gICAgY2FydFNlcnZpY2UudXBkYXRlQ2FydE9wdGltaXN0aWNhbGx5Lm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgcGVyZm9ybWFuY2U6ICd0ZXN0J1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS9jYXJ0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGVtcHR5IGNhcnQgZm9yIG5ldyBzZXNzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBlbXB0eSBjYXJ0XG4gICAgICBjb25zdCBlbXB0eUNhcnQgPSB7IC4uLnRlc3RDYXJ0LCBpdGVtczogW10gfTtcbiAgICAgIGNhcnRTZXJ2aWNlLmdldENhcnRXaXRoUGVyZm9ybWFuY2VPcHRpbWl6YXRpb24ubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICB0eXBlOiAnZ3Vlc3QnLFxuICAgICAgICBjYXJ0OiBlbXB0eUNhcnQsXG4gICAgICAgIHNlc3Npb25JZDogJ2d1ZXN0X3Rlc3Rfc2Vzc2lvbidcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL2NhcnQnKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmNhcnQuaXRlbXMpLnRvRXF1YWwoW10pO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5jYXJ0LnN1YnRvdGFsKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5jYXJ0Lml0ZW1Db3VudCkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pc0VtcHR5KS50b0JlKHRydWUpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGNhcnQgd2l0aCBwb3B1bGF0ZWQgcHJvZHVjdCBkZXRhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBjYXJ0IHdpdGggaXRlbXNcbiAgICAgIGNvbnN0IGNhcnRXaXRoSXRlbXMgPSB7XG4gICAgICAgIC4uLnRlc3RDYXJ0LFxuICAgICAgICBpdGVtczogW3tcbiAgICAgICAgICBwcm9kdWN0OiB0ZXN0UHJvZHVjdC5faWQsXG4gICAgICAgICAgcXVhbnRpdHk6IDIsXG4gICAgICAgICAgcHJpY2U6IDI5Ljk5LFxuICAgICAgICAgIGFkZGVkQXQ6IG5ldyBEYXRlKClcbiAgICAgICAgfV1cbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNhcnRTZXJ2aWNlLmdldENhcnRXaXRoUGVyZm9ybWFuY2VPcHRpbWl6YXRpb24ubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICB0eXBlOiAnZ3Vlc3QnLFxuICAgICAgICBjYXJ0OiBjYXJ0V2l0aEl0ZW1zLFxuICAgICAgICBzZXNzaW9uSWQ6ICdndWVzdF90ZXN0X3Nlc3Npb24nXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS9jYXJ0JylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5jYXJ0Lml0ZW1zKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmNhcnQuaXRlbXNbMF0ucHJvZHVjdC5uYW1lKS50b0JlKCdUZXN0IENyeXN0YWwnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pdGVtc1swXS5xdWFudGl0eSkudG9CZSgyKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pdGVtQ291bnQpLnRvQmUoMik7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmNhcnQuaXNFbXB0eSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCBmaWx0ZXIgb3V0IGluYWN0aXZlIHByb2R1Y3RzIGZyb20gY2FydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgaW5hY3RpdmUgcHJvZHVjdFxuICAgICAgY29uc3QgaW5hY3RpdmVQcm9kdWN0ID0geyAuLi50ZXN0UHJvZHVjdCwgaXNBY3RpdmU6IGZhbHNlIH07XG4gICAgICBQcm9kdWN0LmZpbmRCeUlkID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoaWQpID0+ICh7XG4gICAgICAgIHNlbGVjdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKGluYWN0aXZlUHJvZHVjdClcbiAgICAgIH0pKTtcbiAgICAgIFxuICAgICAgLy8gTW9jayBjYXJ0IHdpdGggaXRlbXNcbiAgICAgIGNvbnN0IGNhcnRXaXRoSXRlbXMgPSB7XG4gICAgICAgIC4uLnRlc3RDYXJ0LFxuICAgICAgICBpdGVtczogW3tcbiAgICAgICAgICBwcm9kdWN0OiB0ZXN0UHJvZHVjdC5faWQsXG4gICAgICAgICAgcXVhbnRpdHk6IDEsXG4gICAgICAgICAgcHJpY2U6IDI5Ljk5XG4gICAgICAgIH1dXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjYXJ0U2VydmljZS5nZXRDYXJ0V2l0aFBlcmZvcm1hbmNlT3B0aW1pemF0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgY2FydDogY2FydFdpdGhJdGVtcyxcbiAgICAgICAgc2Vzc2lvbklkOiAnZ3Vlc3RfdGVzdF9zZXNzaW9uJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvY2FydCcpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEuY2FydC5pdGVtcykudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmNhcnQuaXNFbXB0eSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnUE9TVCAvYXBpL2NhcnQvYWRkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYWRkIG5ldyBpdGVtIHRvIGNhcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAxIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQmUoJ0l0ZW0gYWRkZWQgdG8gY2FydCcpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGludmFsaWQgcHJvZHVjdCBJRCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2NhcnQvYWRkJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6ICdpbnZhbGlkLWlkJywgcXVhbnRpdHk6IDEgfSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuICAgICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnSU5WQUxJRF9QUk9EVUNUX0lEJyk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgbWlzc2luZyBwcm9kdWN0IElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHF1YW50aXR5OiAxIH0pXG4gICAgICAgIC5leHBlY3QoNDAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdNSVNTSU5HX1BST0RVQ1RfSUQnKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIHF1YW50aXR5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMCB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnSU5WQUxJRF9RVUFOVElUWScpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHF1YW50aXR5IG92ZXIgbWF4aW11bScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2NhcnQvYWRkJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCwgcXVhbnRpdHk6IDEwMCB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnSU5WQUxJRF9RVUFOVElUWScpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGluYWN0aXZlIHByb2R1Y3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGluYWN0aXZlIHByb2R1Y3RcbiAgICAgIGNvbnN0IGluYWN0aXZlUHJvZHVjdCA9IHsgLi4udGVzdFByb2R1Y3QsIGlzQWN0aXZlOiBmYWxzZSB9O1xuICAgICAgUHJvZHVjdC5maW5kQnlJZCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShpbmFjdGl2ZVByb2R1Y3QpO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9jYXJ0L2FkZCcpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAxIH0pXG4gICAgICAgIC5leHBlY3QoNDA0KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdQUk9EVUNUX05PVF9GT1VORCcpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHByb2R1Y3Qgbm90IGZvdW5kJywgYXN5bmMgKCkgPT4ge1xuICAgICAgUHJvZHVjdC5maW5kQnlJZCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvY2FydC9hZGQnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMSB9KVxuICAgICAgICAuZXhwZWN0KDQwNCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnUFJPRFVDVF9OT1RfRk9VTkQnKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnUFVUIC9hcGkvY2FydC91cGRhdGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgaXRlbSBxdWFudGl0eScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgY2FydCB3aXRoIGV4aXN0aW5nIGl0ZW1cbiAgICAgIGNvbnN0IGNhcnRXaXRoSXRlbXMgPSB7XG4gICAgICAgIC4uLnRlc3RDYXJ0LFxuICAgICAgICBpdGVtczogW3sgcHJvZHVjdDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMSwgcHJpY2U6IDI5Ljk5IH1dXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBNb2NrIGdldE9yQ3JlYXRlQ2FydCBieSBvdmVycmlkaW5nIENhcnQuZmluZE9uZSB0byByZXR1cm4gY2FydCB3aXRoIGl0ZW1zXG4gICAgICBDYXJ0LmZpbmRPbmUgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoY2FydFdpdGhJdGVtcyk7XG4gICAgICBcbiAgICAgIGNhcnRTZXJ2aWNlLmdldENhcnRXaXRoUGVyZm9ybWFuY2VPcHRpbWl6YXRpb25cbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgICBjYXJ0OiBjYXJ0V2l0aEl0ZW1zLFxuICAgICAgICAgIHNlc3Npb25JZDogJ2d1ZXN0X3Rlc3Rfc2Vzc2lvbidcbiAgICAgICAgfSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgICBjYXJ0OiB7IC4uLmNhcnRXaXRoSXRlbXMsIGl0ZW1zOiBbeyBwcm9kdWN0OiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiA1LCBwcmljZTogMjkuOTkgfV0gfSxcbiAgICAgICAgICBzZXNzaW9uSWQ6ICdndWVzdF90ZXN0X3Nlc3Npb24nXG4gICAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucHV0KCcvYXBpL2NhcnQvdXBkYXRlJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCwgcXVhbnRpdHk6IDUgfSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0JlKCdDYXJ0IHVwZGF0ZWQnKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHJlbW92ZSBpdGVtIHdoZW4gcXVhbnRpdHkgaXMgMCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgY2FydCB3aXRoIGV4aXN0aW5nIGl0ZW1cbiAgICAgIGNvbnN0IGNhcnRXaXRoSXRlbXMgPSB7XG4gICAgICAgIC4uLnRlc3RDYXJ0LFxuICAgICAgICBpdGVtczogW3sgcHJvZHVjdDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMSwgcHJpY2U6IDI5Ljk5IH1dXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBNb2NrIGdldE9yQ3JlYXRlQ2FydCBieSBvdmVycmlkaW5nIENhcnQuZmluZE9uZSB0byByZXR1cm4gY2FydCB3aXRoIGl0ZW1zXG4gICAgICBDYXJ0LmZpbmRPbmUgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoY2FydFdpdGhJdGVtcyk7XG4gICAgICBcbiAgICAgIGNhcnRTZXJ2aWNlLmdldENhcnRXaXRoUGVyZm9ybWFuY2VPcHRpbWl6YXRpb25cbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgICBjYXJ0OiBjYXJ0V2l0aEl0ZW1zLFxuICAgICAgICAgIHNlc3Npb25JZDogJ2d1ZXN0X3Rlc3Rfc2Vzc2lvbidcbiAgICAgICAgfSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgICBjYXJ0OiB7IC4uLmNhcnRXaXRoSXRlbXMsIGl0ZW1zOiBbXSB9LFxuICAgICAgICAgIHNlc3Npb25JZDogJ2d1ZXN0X3Rlc3Rfc2Vzc2lvbidcbiAgICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wdXQoJy9hcGkvY2FydC91cGRhdGUnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMCB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0JlKCdJdGVtIHJlbW92ZWQgZnJvbSBjYXJ0Jyk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgbWlzc2luZyBwcm9kdWN0IElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnB1dCgnL2FwaS9jYXJ0L3VwZGF0ZScpXG4gICAgICAgIC5zZW5kKHsgcXVhbnRpdHk6IDEgfSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yLmNvZGUpLnRvQmUoJ01JU1NJTkdfUFJPRFVDVF9JRCcpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGludmFsaWQgcXVhbnRpdHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucHV0KCcvYXBpL2NhcnQvdXBkYXRlJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCwgcXVhbnRpdHk6IC0xIH0pXG4gICAgICAgIC5leHBlY3QoNDAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdJTlZBTElEX1FVQU5USVRZJyk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gNDA0IGZvciBub24tZXhpc3RlbnQgaXRlbScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgZW1wdHkgY2FydFxuICAgICAgQ2FydC5maW5kT25lID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgLi4udGVzdENhcnQsIGl0ZW1zOiBbXSB9KTtcbiAgICAgIFxuICAgICAgY2FydFNlcnZpY2UuZ2V0Q2FydFdpdGhQZXJmb3JtYW5jZU9wdGltaXphdGlvbi5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHR5cGU6ICdndWVzdCcsXG4gICAgICAgIGNhcnQ6IHsgLi4udGVzdENhcnQsIGl0ZW1zOiBbXSB9LFxuICAgICAgICBzZXNzaW9uSWQ6ICdndWVzdF90ZXN0X3Nlc3Npb24nXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnB1dCgnL2FwaS9jYXJ0L3VwZGF0ZScpXG4gICAgICAgIC5zZW5kKHsgcHJvZHVjdElkOiB0ZXN0UHJvZHVjdC5faWQsIHF1YW50aXR5OiAxIH0pXG4gICAgICAgIC5leHBlY3QoNDA0KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdJVEVNX05PVF9GT1VORCcpO1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIGRlc2NyaWJlKCdERUxFVEUgL2FwaS9jYXJ0L3JlbW92ZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlbW92ZSBpdGVtIGZyb20gY2FydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgY2FydCB3aXRoIGV4aXN0aW5nIGl0ZW1cbiAgICAgIGNvbnN0IGNhcnRXaXRoSXRlbXMgPSB7XG4gICAgICAgIC4uLnRlc3RDYXJ0LFxuICAgICAgICBpdGVtczogW3sgcHJvZHVjdDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMywgcHJpY2U6IDI5Ljk5IH1dXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBNb2NrIGdldE9yQ3JlYXRlQ2FydCBieSBvdmVycmlkaW5nIENhcnQuZmluZE9uZSB0byByZXR1cm4gY2FydCB3aXRoIGl0ZW1zXG4gICAgICBDYXJ0LmZpbmRPbmUgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoY2FydFdpdGhJdGVtcyk7XG4gICAgICBcbiAgICAgIGNhcnRTZXJ2aWNlLmdldENhcnRXaXRoUGVyZm9ybWFuY2VPcHRpbWl6YXRpb25cbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgICBjYXJ0OiBjYXJ0V2l0aEl0ZW1zLFxuICAgICAgICAgIHNlc3Npb25JZDogJ2d1ZXN0X3Rlc3Rfc2Vzc2lvbidcbiAgICAgICAgfSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgICBjYXJ0OiB7IC4uLmNhcnRXaXRoSXRlbXMsIGl0ZW1zOiBbXSB9LFxuICAgICAgICAgIHNlc3Npb25JZDogJ2d1ZXN0X3Rlc3Rfc2Vzc2lvbidcbiAgICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5kZWxldGUoJy9hcGkvY2FydC9yZW1vdmUnKVxuICAgICAgICAuc2VuZCh7IHByb2R1Y3RJZDogdGVzdFByb2R1Y3QuX2lkIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQmUoJ0l0ZW0gcmVtb3ZlZCBmcm9tIGNhcnQnKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHJlamVjdCBtaXNzaW5nIHByb2R1Y3QgSUQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZGVsZXRlKCcvYXBpL2NhcnQvcmVtb3ZlJylcbiAgICAgICAgLnNlbmQoe30pXG4gICAgICAgIC5leHBlY3QoNDAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvci5jb2RlKS50b0JlKCdNSVNTSU5HX1BST0RVQ1RfSUQnKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHJldHVybiA0MDQgZm9yIG5vbi1leGlzdGVudCBpdGVtJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBlbXB0eSBjYXJ0XG4gICAgICBDYXJ0LmZpbmRPbmUgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyAuLi50ZXN0Q2FydCwgaXRlbXM6IFtdIH0pO1xuICAgICAgXG4gICAgICBjYXJ0U2VydmljZS5nZXRDYXJ0V2l0aFBlcmZvcm1hbmNlT3B0aW1pemF0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgY2FydDogeyAuLi50ZXN0Q2FydCwgaXRlbXM6IFtdIH0sXG4gICAgICAgIHNlc3Npb25JZDogJ2d1ZXN0X3Rlc3Rfc2Vzc2lvbidcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZGVsZXRlKCcvYXBpL2NhcnQvcmVtb3ZlJylcbiAgICAgICAgLnNlbmQoeyBwcm9kdWN0SWQ6IHRlc3RQcm9kdWN0Ll9pZCB9KVxuICAgICAgICAuZXhwZWN0KDQwNCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IuY29kZSkudG9CZSgnSVRFTV9OT1RfRk9VTkQnKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnREVMRVRFIC9hcGkvY2FydC9jbGVhcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNsZWFyIGVudGlyZSBjYXJ0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBjYXJ0IHdpdGggaXRlbXNcbiAgICAgIGNvbnN0IGNhcnRXaXRoSXRlbXMgPSB7XG4gICAgICAgIC4uLnRlc3RDYXJ0LFxuICAgICAgICBpdGVtczogW3sgcHJvZHVjdDogdGVzdFByb2R1Y3QuX2lkLCBxdWFudGl0eTogMiwgcHJpY2U6IDI5Ljk5IH1dXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjYXJ0U2VydmljZS5nZXRDYXJ0V2l0aFBlcmZvcm1hbmNlT3B0aW1pemF0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgdHlwZTogJ2d1ZXN0JyxcbiAgICAgICAgY2FydDogY2FydFdpdGhJdGVtcyxcbiAgICAgICAgc2Vzc2lvbklkOiAnZ3Vlc3RfdGVzdF9zZXNzaW9uJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIENhcnQuZGVsZXRlT25lID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuICAgICAgQ2FydC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICAgIHNhdmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKVxuICAgICAgfSkpO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZGVsZXRlKCcvYXBpL2NhcnQvY2xlYXInKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0JlKCdDYXJ0IGNsZWFyZWQnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmNhcnRJdGVtQ291bnQpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ3Nob3VsZCB3b3JrIG9uIGVtcHR5IGNhcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGVtcHR5IGNhcnRcbiAgICAgIGNhcnRTZXJ2aWNlLmdldENhcnRXaXRoUGVyZm9ybWFuY2VPcHRpbWl6YXRpb24ubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICB0eXBlOiAnZ3Vlc3QnLFxuICAgICAgICBjYXJ0OiB7IC4uLnRlc3RDYXJ0LCBpdGVtczogW10gfSxcbiAgICAgICAgc2Vzc2lvbklkOiAnZ3Vlc3RfdGVzdF9zZXNzaW9uJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5kZWxldGUoJy9hcGkvY2FydC9jbGVhcicpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmNhcnRJdGVtQ291bnQpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFRQTtBQUNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxPQUFPO0VBQ3hDQyxpQkFBaUIsRUFBRTtJQUNqQkMsTUFBTSxFQUFFQyxJ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