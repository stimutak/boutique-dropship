{"version":3,"names":["express","require","router","Router","jwt","crypto","body","validationResult","User","requireAuth","authenticateToken","validateCSRFToken","AppError","ErrorCodes","generateToken","userId","sign","process","env","JWT_SECRET","expiresIn","validateRegistration","isEmail","normalizeEmail","withMessage","isLength","min","trim","max","optional","isString","validateLogin","notEmpty","validateForgotPassword","validateResetPassword","post","req","res","errors","isEmpty","validationError","email","password","firstName","lastName","phone","preferences","existingUser","findOne","error","USER_EXISTS","userData","user","create","token","_id","lastLogin","Date","save","wantsEmail","sendWelcomeEmail","welcomeData","emailResult","success","console","emailError","cookie","httpOnly","secure","NODE_ENV","sameSite","maxAge","path","status","json","message","data","toPublicJSON","REGISTRATION_ERROR","guestCartItems","INVALID_CREDENTIALS","isMatch","comparePassword","isActive","ACCOUNT_DISABLED","cartInfo","itemCount","mergedItems","cart","LOGIN_ERROR","resetToken","resetTokenHash","randomBytes","toString","createHash","update","digest","passwordResetToken","passwordResetExpiry","now","sendPasswordResetEmail","resetUrl","FRONTEND_URL","log","Promise","resolve","setTimeout","Math","random","FORGOT_PASSWORD_ERROR","$gt","INVALID_RESET_TOKEN","undefined","authToken","RESET_PASSWORD_ERROR","get","AUTHENTICATION_REQUIRED","findById","select","USER_NOT_FOUND","authenticated","VERIFICATION_ERROR","PROFILE_FETCH_ERROR","put","isArray","isBoolean","isObject","startTime","addresses","updateData","currentPreferences","toObject","emailPreferences","$ne","EMAIL_IN_USE","findByIdAndUpdate","new","runValidators","totalDuration","performance","duration","target","updateError","PROFILE_UPDATE_ERROR","stack","code","DUPLICATE_EMAIL","details","currentPassword","newPassword","timestamp","session","cartId","guestId","destroy","err","clearCookie","cartCleared","isIn","addressData","type","street","city","state","zipCode","country","isDefault","forEach","addr","push","addressId","params","field","address","id","Object","assign","delete","remove","patch","decoded","verify","newToken","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\nconst { body, validationResult } = require('express-validator');\nconst User = require('../models/User');\nconst { requireAuth, authenticateToken } = require('../middleware/auth');\nconst { validateCSRFToken } = require('../middleware/sessionCSRF');\nconst { AppError } = require('../middleware/errorHandler');\nconst { ErrorCodes } = require('../utils/errorHandler');\n\n// Generate JWT token\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '7d' });\n};\n\n// Validation middleware for registration\nconst validateRegistration = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long'),\n  body('firstName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('First name is required and must be less than 50 characters'),\n  body('lastName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('Last name is required and must be less than 50 characters'),\n  body('phone')\n    .optional()\n    .isString()\n    .isLength({ min: 7, max: 30 })\n    .withMessage('Phone number must be between 7 and 30 characters')\n];\n\n// Validation middleware for login\nconst validateLogin = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\n// Validation for forgot password\nconst validateForgotPassword = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required')\n];\n\n// Validation for reset password\nconst validateResetPassword = [\n  body('token')\n    .notEmpty()\n    .withMessage('Reset token is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long')\n];\n\n// Register new user\nrouter.post('/register', validateRegistration, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors);\n    }\n\n    const { email, password, firstName, lastName, phone, preferences } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.error(409, ErrorCodes.USER_EXISTS, 'User with this email already exists');\n    }\n\n    // Create new user\n    const userData = {\n      email,\n      password,\n      firstName,\n      lastName,\n      phone,\n      preferences: preferences || {}\n    };\n\n    const user = await User.create(userData);\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Send welcome email\n    try {\n      if (user.wantsEmail('welcomeEmails')) {\n        const { sendWelcomeEmail } = require('../utils/emailService');\n        \n        const welcomeData = {\n          firstName: user.firstName,\n          email: user.email\n        };\n\n        const emailResult = await sendWelcomeEmail(user.email, welcomeData);\n        if (!emailResult.success) {\n          console.error('Failed to send welcome email:', emailResult.error);\n        }\n      }\n    } catch (emailError) {\n      console.error('Error sending welcome email:', emailError);\n    }\n\n    // Set token as httpOnly cookie for security\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      path: '/'\n    });\n\n    res.status(201).json({\n      success: true,\n      message: 'User registered successfully',\n      data: {\n        token, // Still send token for backward compatibility during migration\n        user: user.toPublicJSON()\n      }\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.error(500, ErrorCodes.REGISTRATION_ERROR, 'Failed to register user');\n  }\n});\n\n// Login user with enhanced cart merging\nrouter.post('/login', validateLogin, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors);\n    }\n\n    const { email, password, guestCartItems } = req.body;\n\n    // Find user\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.error(401, ErrorCodes.INVALID_CREDENTIALS, 'Invalid email or password');\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.error(401, ErrorCodes.INVALID_CREDENTIALS, 'Invalid email or password');\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return res.error(403, ErrorCodes.ACCOUNT_DISABLED, 'Your account has been disabled');\n    }\n\n    // Generate token\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Cart info (simplified after removing cartService)\n    let cartInfo = { itemCount: 0, mergedItems: 0 };\n    \n    // Guest cart merging would happen on the frontend after login\n\n    // Set token as httpOnly cookie for security\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      path: '/'\n    });\n\n    res.json({\n      success: true,\n      message: 'Login successful',\n      data: {\n        token, // Still send token for backward compatibility during migration\n        user: user.toPublicJSON(),\n        cart: cartInfo\n      }\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.error(500, ErrorCodes.LOGIN_ERROR, 'Failed to login');\n  }\n});\n\n// Forgot password - Fixed timing attack vulnerability\nrouter.post('/forgot-password', validateForgotPassword, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors);\n    }\n\n    const { email } = req.body;\n    \n    // Always execute the same operations to prevent timing attacks\n    let user, resetToken, resetTokenHash;\n    \n    // Find user\n    user = await User.findOne({ email });\n    \n    // Always generate a token (even if user doesn't exist) to normalize timing\n    resetToken = crypto.randomBytes(32).toString('hex');\n    resetTokenHash = crypto\n      .createHash('sha256')\n      .update(resetToken)\n      .digest('hex');\n\n    // If user exists, save the reset token and send email\n    if (user) {\n      // Save reset token and expiry\n      user.passwordResetToken = resetTokenHash;\n      user.passwordResetExpiry = Date.now() + 3600000; // 1 hour\n      await user.save();\n\n      // Send reset email\n      try {\n        const { sendPasswordResetEmail } = require('../utils/emailService');\n        const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;\n        \n        const emailResult = await sendPasswordResetEmail(user.email, {\n          firstName: user.firstName,\n          resetToken,\n          resetUrl\n        });\n        \n        if (!emailResult.success) {\n          console.error('Failed to send reset email:', emailResult.error);\n        }\n        \n        // Log reset URL for development when email is not configured\n        if (emailResult.message === 'Email skipped - not configured') {\n          console.log('\\n========================================');\n          console.log('PASSWORD RESET URL (Email not configured)');\n          console.log('========================================');\n          console.log(`User: ${user.email}`);\n          console.log(`Reset URL: ${resetUrl}`);\n          console.log('========================================\\n');\n        }\n      } catch (emailError) {\n        console.error('Error sending reset email:', emailError);\n      }\n    } else {\n      // If user doesn't exist, still perform the same cryptographic operations\n      // and simulate sending an email to normalize response time\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 100 + 50));\n    }\n\n    // Always return the same response regardless of whether user exists\n    res.json({\n      success: true,\n      message: 'If an account exists with this email, a password reset link will be sent.'\n    });\n\n  } catch (error) {\n    console.error('Forgot password error:', error);\n    res.error(500, ErrorCodes.FORGOT_PASSWORD_ERROR, 'Failed to process password reset request');\n  }\n});\n\n// Reset password\nrouter.post('/reset-password', validateResetPassword, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors);\n    }\n\n    const { token, password } = req.body;\n    \n    // Hash the token to match stored version\n    const resetTokenHash = crypto\n      .createHash('sha256')\n      .update(token)\n      .digest('hex');\n\n    // Find user with valid reset token\n    const user = await User.findOne({\n      passwordResetToken: resetTokenHash,\n      passwordResetExpiry: { $gt: Date.now() }\n    });\n\n    if (!user) {\n      return res.error(400, ErrorCodes.INVALID_RESET_TOKEN, 'Password reset token is invalid or has expired');\n    }\n\n    // Update password\n    user.password = password;\n    user.passwordResetToken = undefined;\n    user.passwordResetExpiry = undefined;\n    await user.save();\n\n    // Generate new auth token\n    const authToken = generateToken(user._id);\n\n    res.json({\n      success: true,\n      message: 'Password has been reset successfully',\n      token: authToken,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Reset password error:', error);\n    res.error(500, ErrorCodes.RESET_PASSWORD_ERROR, 'Failed to reset password');\n  }\n});\n\n// Verify token from cookie (for auth persistence check)\nrouter.get('/verify', authenticateToken, async (req, res) => {\n  try {\n    // If authenticateToken middleware passed, user is authenticated\n    if (!req.user) {\n      return res.error(401, ErrorCodes.AUTHENTICATION_REQUIRED, 'Not authenticated');\n    }\n\n    // Get fresh user data\n    const user = await User.findById(req.user._id).select('-password');\n    if (!user || !user.isActive) {\n      return res.error(401, ErrorCodes.USER_NOT_FOUND, 'User not found or inactive');\n    }\n\n    res.json({\n      success: true,\n      data: {\n        user: user.toPublicJSON(),\n        authenticated: true\n      }\n    });\n  } catch (error) {\n    console.error('Token verification error:', error);\n    res.error(500, ErrorCodes.VERIFICATION_ERROR, 'Failed to verify authentication');\n  }\n});\n\n// Get user profile\nrouter.get('/profile', requireAuth, async (req, res) => {\n  try {\n    // Fetch fresh user data to ensure all fields are populated correctly\n    const user = await User.findById(req.user._id).select('-password');\n    \n    if (!user) {\n      return res.error(404, ErrorCodes.USER_NOT_FOUND, 'User not found');\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        user: user.toPublicJSON()\n      }\n    });\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    res.error(500, ErrorCodes.PROFILE_FETCH_ERROR, 'Failed to fetch user profile');\n  }\n});\n\n// Update user profile with optimistic updates and performance optimization\nrouter.put('/profile', requireAuth, validateCSRFToken, [\n  body('firstName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('First name must be 1-50 characters'),\n  body('lastName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('Last name must be 1-50 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('email').optional().isEmail().withMessage('Valid email is required'),\n  body('addresses').optional().isArray().withMessage('Addresses must be an array'),\n  body('addresses.*.street').optional().trim().isLength({ min: 1, max: 100 }).withMessage('Street must be 1-100 characters'),\n  body('addresses.*.city').optional().trim().isLength({ min: 1, max: 50 }).withMessage('City must be 1-50 characters'),\n  body('addresses.*.state').optional().trim().isLength({ min: 1, max: 50 }).withMessage('State must be 1-50 characters'),\n  body('addresses.*.zipCode').optional().trim().isLength({ min: 5, max: 10 }).withMessage('ZIP code must be 5-10 characters'),\n  body('addresses.*.country').optional().trim().isLength({ min: 2, max: 2 }).withMessage('Country must be 2-letter code'),\n  body('preferences.notifications').optional().isBoolean().withMessage('Notifications must be boolean'),\n  body('preferences.newsletter').optional().isBoolean().withMessage('Newsletter must be boolean'),\n  body('preferences.emailPreferences').optional().isObject().withMessage('Email preferences must be an object')\n], async (req, res) => {\n  const startTime = Date.now();\n  \n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors);\n    }\n\n    const { firstName, lastName, phone, email, addresses, preferences } = req.body;\n    \n    // Build update data object\n    const updateData = {};\n    if (firstName !== undefined) updateData.firstName = firstName;\n    if (lastName !== undefined) updateData.lastName = lastName;\n    if (phone !== undefined) updateData.phone = phone;\n    if (email !== undefined) updateData.email = email;\n    if (addresses !== undefined) updateData.addresses = addresses;\n    \n    // Handle nested preferences updates\n    if (preferences !== undefined) {\n      // Get current preferences safely\n      let currentPreferences = {};\n      if (req.user.preferences) {\n        currentPreferences = typeof req.user.preferences.toObject === 'function' \n          ? req.user.preferences.toObject() \n          : req.user.preferences;\n      }\n      \n      updateData.preferences = { \n        ...currentPreferences,\n        ...preferences\n      };\n      \n      // Handle nested emailPreferences\n      if (preferences.emailPreferences) {\n        updateData.preferences.emailPreferences = {\n          ...currentPreferences.emailPreferences || {},\n          ...preferences.emailPreferences\n        };\n      }\n    }\n\n    // Update user directly\n    try {\n      // Check if email is being changed and already exists\n      if (email && email !== req.user.email) {\n        const existingUser = await User.findOne({ email, _id: { $ne: req.user._id } });\n        if (existingUser) {\n          return res.error(409, ErrorCodes.EMAIL_IN_USE, 'Email address is already in use');\n        }\n      }\n\n      // Update the user\n      const user = await User.findByIdAndUpdate(\n        req.user._id,\n        updateData,\n        { new: true, runValidators: true }\n      ).select('-password');\n\n      if (!user) {\n        return res.error(404, ErrorCodes.USER_NOT_FOUND, 'User not found');\n      }\n\n      const totalDuration = Date.now() - startTime;\n\n      // Send success response\n      res.json({\n        success: true,\n        message: 'Profile updated successfully',\n        data: {\n          user: user.toPublicJSON()\n        },\n        performance: {\n          duration: totalDuration,\n          target: '200ms',\n          status: totalDuration <= 200 ? 'optimal' : 'needs_optimization'\n        }\n      });\n    } catch (updateError) {\n      console.error('Profile update error:', updateError);\n      return res.error(500, ErrorCodes.PROFILE_UPDATE_ERROR, updateError.message || 'Failed to update profile');\n    }\n\n  } catch (error) {\n    console.error('Profile update error:', error);\n    console.error('Error stack:', error.stack);\n    console.error('Request body:', req.body);\n    \n    // Handle specific MongoDB errors\n    if (error.code === 11000) {\n      return res.error(409, ErrorCodes.DUPLICATE_EMAIL, 'Email address is already in use');\n    }\n\n    res.error(500, ErrorCodes.PROFILE_UPDATE_ERROR, 'Failed to update profile', null, { details: error.message });\n  }\n});\n\n// Change password\nrouter.post('/change-password', requireAuth, [\n  body('currentPassword').notEmpty().withMessage('Current password is required'),\n  body('newPassword').isLength({ min: 6 }).withMessage('New password must be at least 6 characters long')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors);\n    }\n\n    const { currentPassword, newPassword } = req.body;\n\n    // Get user with password field\n    const user = await User.findById(req.user._id).select('+password');\n\n    // Verify current password\n    const isMatch = await user.comparePassword(currentPassword);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_PASSWORD',\n          message: 'Current password is incorrect'\n        }\n      });\n    }\n\n    // Update password\n    user.password = newPassword;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password changed successfully'\n    });\n  } catch (error) {\n    console.error('Password change error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_CHANGE_ERROR',\n        message: 'Failed to change password'\n      }\n    });\n  }\n});\n\n// Logout (optional - mainly for server-side session cleanup)\nrouter.post('/logout', requireAuth, async (req, res) => {\n  try {\n    const userId = req.user._id;\n    \n    // Log logout event\n    console.log('User logout:', {\n      userId: userId,\n      timestamp: new Date()\n    });\n\n    // Clear any server-side sessions and cleanup cart state\n    if (req.session) {\n      // Clear any cart session IDs to prevent ghost carts\n      delete req.session.cartId;\n      delete req.session.guestId;\n      \n      // Clear the session\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Session destruction error:', err);\n        }\n      });\n    }\n\n    // Clear the JWT cookie\n    res.clearCookie('token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      path: '/'\n    });\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully',\n      cartCleared: true // Signal to frontend to clear cart state\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGOUT_ERROR',\n        message: 'Failed to logout'\n      }\n    });\n  }\n});\n\n// Address management endpoints without authentication loss\n\n// Add new address\nrouter.post('/profile/addresses', requireAuth, validateCSRFToken, [\n  body('type').isIn(['shipping', 'billing']).withMessage('Address type must be shipping or billing'),\n  body('firstName').trim().isLength({ min: 1, max: 50 }).withMessage('First name is required'),\n  body('lastName').trim().isLength({ min: 1, max: 50 }).withMessage('Last name is required'),\n  body('street').trim().isLength({ min: 1, max: 100 }).withMessage('Street address is required'),\n  body('city').trim().isLength({ min: 1, max: 50 }).withMessage('City is required'),\n  body('state').trim().isLength({ min: 1, max: 50 }).withMessage('State is required'),\n  body('zipCode').trim().isLength({ min: 3, max: 20 }).withMessage('ZIP code is required'),\n  body('country').optional().trim().isLength({ min: 2, max: 3 }).withMessage('Country code must be 2-3 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('isDefault').optional().isBoolean().withMessage('isDefault must be boolean')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors);\n    }\n\n    const addressData = {\n      type: req.body.type,\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      street: req.body.street,\n      city: req.body.city,\n      state: req.body.state,\n      zipCode: req.body.zipCode,\n      country: req.body.country || 'US',\n      phone: req.body.phone,\n      isDefault: req.body.isDefault || false\n    };\n\n    // Add address to user\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      return res.error(404, ErrorCodes.USER_NOT_FOUND, 'User not found');\n    }\n\n    // If this is the default address, unset other defaults\n    if (addressData.isDefault) {\n      user.addresses.forEach(addr => {\n        addr.isDefault = false;\n      });\n    }\n\n    user.addresses.push(addressData);\n    await user.save();\n\n    res.status(201).json({\n      success: true,\n      message: 'Address added successfully',\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Add address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_ADD_ERROR',\n        message: 'Failed to add address'\n      }\n    });\n  }\n});\n\n// Update existing address\nrouter.put('/profile/addresses/:addressId', requireAuth, validateCSRFToken, [\n  body('type').optional().isIn(['shipping', 'billing']).withMessage('Address type must be shipping or billing'),\n  body('firstName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('First name must be 1-50 characters'),\n  body('lastName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('Last name must be 1-50 characters'),\n  body('street').optional().trim().isLength({ min: 1, max: 100 }).withMessage('Street must be 1-100 characters'),\n  body('city').optional().trim().isLength({ min: 1, max: 50 }).withMessage('City must be 1-50 characters'),\n  body('state').optional().trim().isLength({ min: 1, max: 50 }).withMessage('State must be 1-50 characters'),\n  body('zipCode').optional().trim().isLength({ min: 3, max: 20 }).withMessage('ZIP code must be 3-20 characters'),\n  body('country').optional().trim().isLength({ min: 2, max: 3 }).withMessage('Country code must be 2-3 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('isDefault').optional().isBoolean().withMessage('isDefault must be boolean')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors);\n    }\n\n    const { addressId } = req.params;\n    const updateData = {};\n    \n    // Only include fields that are provided\n    ['type', 'firstName', 'lastName', 'street', 'city', 'state', 'zipCode', 'country', 'phone', 'isDefault']\n      .forEach(field => {\n        if (req.body[field] !== undefined) {\n          updateData[field] = req.body[field];\n        }\n      });\n\n    // Update address on user\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      return res.error(404, ErrorCodes.USER_NOT_FOUND, 'User not found');\n    }\n\n    const address = user.addresses.id(addressId);\n    if (!address) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_NOT_FOUND',\n          message: 'Address not found'\n        }\n      });\n    }\n\n    // If setting as default, unset other defaults\n    if (updateData.isDefault) {\n      user.addresses.forEach(addr => {\n        if (addr._id.toString() !== addressId) {\n          addr.isDefault = false;\n        }\n      });\n    }\n\n    // Update the address\n    Object.assign(address, updateData);\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Address updated successfully',\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Update address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_UPDATE_ERROR',\n        message: 'Failed to update address'\n      }\n    });\n  }\n});\n\n// Delete address\nrouter.delete('/profile/addresses/:addressId', requireAuth, validateCSRFToken, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n\n    // Delete address from user\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      return res.error(404, ErrorCodes.USER_NOT_FOUND, 'User not found');\n    }\n\n    const address = user.addresses.id(addressId);\n    if (!address) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_NOT_FOUND',\n          message: 'Address not found'\n        }\n      });\n    }\n\n    // Remove the address\n    address.remove();\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Address deleted successfully',\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Delete address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_DELETE_ERROR',\n        message: 'Failed to delete address'\n      }\n    });\n  }\n});\n\n// Set default address\nrouter.patch('/profile/addresses/:addressId/default', requireAuth, validateCSRFToken, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n\n    // Set default address\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      return res.error(404, ErrorCodes.USER_NOT_FOUND, 'User not found');\n    }\n\n    const address = user.addresses.id(addressId);\n    if (!address) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_NOT_FOUND',\n          message: 'Address not found'\n        }\n      });\n    }\n\n    // Unset all other defaults and set this one\n    user.addresses.forEach(addr => {\n      addr.isDefault = addr._id.toString() === addressId;\n    });\n    \n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Default address updated successfully',\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Set default address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_DEFAULT_ERROR',\n        message: 'Failed to set default address'\n      }\n    });\n  }\n});\n\n// Refresh token endpoint\nrouter.post('/refresh-token', async (req, res) => {\n  try {\n    const { token } = req.body;\n    \n    if (!token) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MISSING_TOKEN',\n          message: 'Token is required'\n        }\n      });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n    \n    if (!user || !user.isActive) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Invalid token'\n        }\n      });\n    }\n\n    const newToken = generateToken(user._id);\n    \n    res.json({\n      success: true,\n      token: newToken,\n      user: user.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Token refresh error:', error);\n    res.status(401).json({\n      success: false,\n      error: {\n        code: 'TOKEN_REFRESH_ERROR',\n        message: 'Failed to refresh token'\n      }\n    });\n  }\n});\n\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,GAAG,GAAGH,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAAEK,IAAI;EAAEC;AAAiB,CAAC,GAAGN,OAAO,CAAC,mBAAmB,CAAC;AAC/D,MAAMO,IAAI,GAAGP,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAM;EAAEQ,WAAW;EAAEC;AAAkB,CAAC,GAAGT,OAAO,CAAC,oBAAoB,CAAC;AACxE,MAAM;EAAEU;AAAkB,CAAC,GAAGV,OAAO,CAAC,2BAA2B,CAAC;AAClE,MAAM;EAAEW;AAAS,CAAC,GAAGX,OAAO,CAAC,4BAA4B,CAAC;AAC1D,MAAM;EAAEY;AAAW,CAAC,GAAGZ,OAAO,CAAC,uBAAuB,CAAC;;AAEvD;AACA,MAAMa,aAAa,GAAIC,MAAM,IAAK;EAChC,OAAOX,GAAG,CAACY,IAAI,CAAC;IAAED;EAAO,CAAC,EAAEE,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;IAAEC,SAAS,EAAE;EAAK,CAAC,CAAC;AAC1E,CAAC;;AAED;AACA,MAAMC,oBAAoB,GAAG,CAC3Bf,IAAI,CAAC,OAAO,CAAC,CACVgB,OAAO,CAAC,CAAC,CACTC,cAAc,CAAC,CAAC,CAChBC,WAAW,CAAC,yBAAyB,CAAC,EACzClB,IAAI,CAAC,UAAU,CAAC,CACbmB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CACpBF,WAAW,CAAC,6CAA6C,CAAC,EAC7DlB,IAAI,CAAC,WAAW,CAAC,CACdqB,IAAI,CAAC,CAAC,CACNF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAC7BJ,WAAW,CAAC,4DAA4D,CAAC,EAC5ElB,IAAI,CAAC,UAAU,CAAC,CACbqB,IAAI,CAAC,CAAC,CACNF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAC7BJ,WAAW,CAAC,2DAA2D,CAAC,EAC3ElB,IAAI,CAAC,OAAO,CAAC,CACVuB,QAAQ,CAAC,CAAC,CACVC,QAAQ,CAAC,CAAC,CACVL,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAC7BJ,WAAW,CAAC,kDAAkD,CAAC,CACnE;;AAED;AACA,MAAMO,aAAa,GAAG,CACpBzB,IAAI,CAAC,OAAO,CAAC,CACVgB,OAAO,CAAC,CAAC,CACTC,cAAc,CAAC,CAAC,CAChBC,WAAW,CAAC,yBAAyB,CAAC,EACzClB,IAAI,CAAC,UAAU,CAAC,CACb0B,QAAQ,CAAC,CAAC,CACVR,WAAW,CAAC,sBAAsB,CAAC,CACvC;;AAED;AACA,MAAMS,sBAAsB,GAAG,CAC7B3B,IAAI,CAAC,OAAO,CAAC,CACVgB,OAAO,CAAC,CAAC,CACTC,cAAc,CAAC,CAAC,CAChBC,WAAW,CAAC,yBAAyB,CAAC,CAC1C;;AAED;AACA,MAAMU,qBAAqB,GAAG,CAC5B5B,IAAI,CAAC,OAAO,CAAC,CACV0B,QAAQ,CAAC,CAAC,CACVR,WAAW,CAAC,yBAAyB,CAAC,EACzClB,IAAI,CAAC,UAAU,CAAC,CACbmB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CACpBF,WAAW,CAAC,6CAA6C,CAAC,CAC9D;;AAED;AACAtB,MAAM,CAACiC,IAAI,CAAC,WAAW,EAAEd,oBAAoB,EAAE,OAAOe,GAAG,EAAEC,GAAG,KAAK;EACjE,IAAI;IACF,MAAMC,MAAM,GAAG/B,gBAAgB,CAAC6B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,eAAe,CAACF,MAAM,CAAC;IACpC;IAEA,MAAM;MAAEG,KAAK;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAY,CAAC,GAAGV,GAAG,CAAC9B,IAAI;;IAE7E;IACA,MAAMyC,YAAY,GAAG,MAAMvC,IAAI,CAACwC,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;IAClD,IAAIM,YAAY,EAAE;MAChB,OAAOV,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACqC,WAAW,EAAE,qCAAqC,CAAC;IACtF;;IAEA;IACA,MAAMC,QAAQ,GAAG;MACfV,KAAK;MACLC,QAAQ;MACRC,SAAS;MACTC,QAAQ;MACRC,KAAK;MACLC,WAAW,EAAEA,WAAW,IAAI,CAAC;IAC/B,CAAC;IAED,MAAMM,IAAI,GAAG,MAAM5C,IAAI,CAAC6C,MAAM,CAACF,QAAQ,CAAC;IACxC,MAAMG,KAAK,GAAGxC,aAAa,CAACsC,IAAI,CAACG,GAAG,CAAC;;IAErC;IACAH,IAAI,CAACI,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC3B,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;;IAEjB;IACA,IAAI;MACF,IAAIN,IAAI,CAACO,UAAU,CAAC,eAAe,CAAC,EAAE;QACpC,MAAM;UAAEC;QAAiB,CAAC,GAAG3D,OAAO,CAAC,uBAAuB,CAAC;QAE7D,MAAM4D,WAAW,GAAG;UAClBlB,SAAS,EAAES,IAAI,CAACT,SAAS;UACzBF,KAAK,EAAEW,IAAI,CAACX;QACd,CAAC;QAED,MAAMqB,WAAW,GAAG,MAAMF,gBAAgB,CAACR,IAAI,CAACX,KAAK,EAAEoB,WAAW,CAAC;QACnE,IAAI,CAACC,WAAW,CAACC,OAAO,EAAE;UACxBC,OAAO,CAACf,KAAK,CAAC,+BAA+B,EAAEa,WAAW,CAACb,KAAK,CAAC;QACnE;MACF;IACF,CAAC,CAAC,OAAOgB,UAAU,EAAE;MACnBD,OAAO,CAACf,KAAK,CAAC,8BAA8B,EAAEgB,UAAU,CAAC;IAC3D;;IAEA;IACA5B,GAAG,CAAC6B,MAAM,CAAC,OAAO,EAAEZ,KAAK,EAAE;MACzBa,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAEnD,OAAO,CAACC,GAAG,CAACmD,QAAQ,KAAK,YAAY;MAC7CC,QAAQ,EAAE,QAAQ;MAClBC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MACjCC,IAAI,EAAE;IACR,CAAC,CAAC;IAEFnC,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE,8BAA8B;MACvCC,IAAI,EAAE;QACJtB,KAAK;QAAE;QACPF,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;MAC1B;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CZ,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACiE,kBAAkB,EAAE,yBAAyB,CAAC;EAC1E;AACF,CAAC,CAAC;;AAEF;AACA5E,MAAM,CAACiC,IAAI,CAAC,QAAQ,EAAEJ,aAAa,EAAE,OAAOK,GAAG,EAAEC,GAAG,KAAK;EACvD,IAAI;IACF,MAAMC,MAAM,GAAG/B,gBAAgB,CAAC6B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,eAAe,CAACF,MAAM,CAAC;IACpC;IAEA,MAAM;MAAEG,KAAK;MAAEC,QAAQ;MAAEqC;IAAe,CAAC,GAAG3C,GAAG,CAAC9B,IAAI;;IAEpD;IACA,MAAM8C,IAAI,GAAG,MAAM5C,IAAI,CAACwC,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;IAC1C,IAAI,CAACW,IAAI,EAAE;MACT,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACmE,mBAAmB,EAAE,2BAA2B,CAAC;IACpF;;IAEA;IACA,MAAMC,OAAO,GAAG,MAAM7B,IAAI,CAAC8B,eAAe,CAACxC,QAAQ,CAAC;IACpD,IAAI,CAACuC,OAAO,EAAE;MACZ,OAAO5C,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACmE,mBAAmB,EAAE,2BAA2B,CAAC;IACpF;;IAEA;IACA,IAAI,CAAC5B,IAAI,CAAC+B,QAAQ,EAAE;MAClB,OAAO9C,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACuE,gBAAgB,EAAE,gCAAgC,CAAC;IACtF;;IAEA;IACA,MAAM9B,KAAK,GAAGxC,aAAa,CAACsC,IAAI,CAACG,GAAG,CAAC;;IAErC;IACAH,IAAI,CAACI,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC3B,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;;IAEjB;IACA,IAAI2B,QAAQ,GAAG;MAAEC,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAE,CAAC;;IAE/C;;IAEA;IACAlD,GAAG,CAAC6B,MAAM,CAAC,OAAO,EAAEZ,KAAK,EAAE;MACzBa,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAEnD,OAAO,CAACC,GAAG,CAACmD,QAAQ,KAAK,YAAY;MAC7CC,QAAQ,EAAE,QAAQ;MAClBC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MACjCC,IAAI,EAAE;IACR,CAAC,CAAC;IAEFnC,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE,kBAAkB;MAC3BC,IAAI,EAAE;QACJtB,KAAK;QAAE;QACPF,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC,CAAC;QACzBW,IAAI,EAAEH;MACR;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOpC,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpCZ,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC4E,WAAW,EAAE,iBAAiB,CAAC;EAC3D;AACF,CAAC,CAAC;;AAEF;AACAvF,MAAM,CAACiC,IAAI,CAAC,kBAAkB,EAAEF,sBAAsB,EAAE,OAAOG,GAAG,EAAEC,GAAG,KAAK;EAC1E,IAAI;IACF,MAAMC,MAAM,GAAG/B,gBAAgB,CAAC6B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,eAAe,CAACF,MAAM,CAAC;IACpC;IAEA,MAAM;MAAEG;IAAM,CAAC,GAAGL,GAAG,CAAC9B,IAAI;;IAE1B;IACA,IAAI8C,IAAI,EAAEsC,UAAU,EAAEC,cAAc;;IAEpC;IACAvC,IAAI,GAAG,MAAM5C,IAAI,CAACwC,OAAO,CAAC;MAAEP;IAAM,CAAC,CAAC;;IAEpC;IACAiD,UAAU,GAAGrF,MAAM,CAACuF,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;IACnDF,cAAc,GAAGtF,MAAM,CACpByF,UAAU,CAAC,QAAQ,CAAC,CACpBC,MAAM,CAACL,UAAU,CAAC,CAClBM,MAAM,CAAC,KAAK,CAAC;;IAEhB;IACA,IAAI5C,IAAI,EAAE;MACR;MACAA,IAAI,CAAC6C,kBAAkB,GAAGN,cAAc;MACxCvC,IAAI,CAAC8C,mBAAmB,GAAGzC,IAAI,CAAC0C,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;MACjD,MAAM/C,IAAI,CAACM,IAAI,CAAC,CAAC;;MAEjB;MACA,IAAI;QACF,MAAM;UAAE0C;QAAuB,CAAC,GAAGnG,OAAO,CAAC,uBAAuB,CAAC;QACnE,MAAMoG,QAAQ,GAAG,GAAGpF,OAAO,CAACC,GAAG,CAACoF,YAAY,IAAI,uBAAuB,yBAAyBZ,UAAU,EAAE;QAE5G,MAAM5B,WAAW,GAAG,MAAMsC,sBAAsB,CAAChD,IAAI,CAACX,KAAK,EAAE;UAC3DE,SAAS,EAAES,IAAI,CAACT,SAAS;UACzB+C,UAAU;UACVW;QACF,CAAC,CAAC;QAEF,IAAI,CAACvC,WAAW,CAACC,OAAO,EAAE;UACxBC,OAAO,CAACf,KAAK,CAAC,6BAA6B,EAAEa,WAAW,CAACb,KAAK,CAAC;QACjE;;QAEA;QACA,IAAIa,WAAW,CAACa,OAAO,KAAK,gCAAgC,EAAE;UAC5DX,OAAO,CAACuC,GAAG,CAAC,4CAA4C,CAAC;UACzDvC,OAAO,CAACuC,GAAG,CAAC,2CAA2C,CAAC;UACxDvC,OAAO,CAACuC,GAAG,CAAC,0CAA0C,CAAC;UACvDvC,OAAO,CAACuC,GAAG,CAAC,SAASnD,IAAI,CAACX,KAAK,EAAE,CAAC;UAClCuB,OAAO,CAACuC,GAAG,CAAC,cAAcF,QAAQ,EAAE,CAAC;UACrCrC,OAAO,CAACuC,GAAG,CAAC,4CAA4C,CAAC;QAC3D;MACF,CAAC,CAAC,OAAOtC,UAAU,EAAE;QACnBD,OAAO,CAACf,KAAK,CAAC,4BAA4B,EAAEgB,UAAU,CAAC;MACzD;IACF,CAAC,MAAM;MACL;MACA;MACA,MAAM,IAAIuC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAC7E;;IAEA;IACAvE,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE;IACX,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO1B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CZ,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACgG,qBAAqB,EAAE,0CAA0C,CAAC;EAC9F;AACF,CAAC,CAAC;;AAEF;AACA3G,MAAM,CAACiC,IAAI,CAAC,iBAAiB,EAAED,qBAAqB,EAAE,OAAOE,GAAG,EAAEC,GAAG,KAAK;EACxE,IAAI;IACF,MAAMC,MAAM,GAAG/B,gBAAgB,CAAC6B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,eAAe,CAACF,MAAM,CAAC;IACpC;IAEA,MAAM;MAAEgB,KAAK;MAAEZ;IAAS,CAAC,GAAGN,GAAG,CAAC9B,IAAI;;IAEpC;IACA,MAAMqF,cAAc,GAAGtF,MAAM,CAC1ByF,UAAU,CAAC,QAAQ,CAAC,CACpBC,MAAM,CAACzC,KAAK,CAAC,CACb0C,MAAM,CAAC,KAAK,CAAC;;IAEhB;IACA,MAAM5C,IAAI,GAAG,MAAM5C,IAAI,CAACwC,OAAO,CAAC;MAC9BiD,kBAAkB,EAAEN,cAAc;MAClCO,mBAAmB,EAAE;QAAEY,GAAG,EAAErD,IAAI,CAAC0C,GAAG,CAAC;MAAE;IACzC,CAAC,CAAC;IAEF,IAAI,CAAC/C,IAAI,EAAE;MACT,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACkG,mBAAmB,EAAE,gDAAgD,CAAC;IACzG;;IAEA;IACA3D,IAAI,CAACV,QAAQ,GAAGA,QAAQ;IACxBU,IAAI,CAAC6C,kBAAkB,GAAGe,SAAS;IACnC5D,IAAI,CAAC8C,mBAAmB,GAAGc,SAAS;IACpC,MAAM5D,IAAI,CAACM,IAAI,CAAC,CAAC;;IAEjB;IACA,MAAMuD,SAAS,GAAGnG,aAAa,CAACsC,IAAI,CAACG,GAAG,CAAC;IAEzClB,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE,sCAAsC;MAC/CrB,KAAK,EAAE2D,SAAS;MAChB7D,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CZ,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACqG,oBAAoB,EAAE,0BAA0B,CAAC;EAC7E;AACF,CAAC,CAAC;;AAEF;AACAhH,MAAM,CAACiH,GAAG,CAAC,SAAS,EAAEzG,iBAAiB,EAAE,OAAO0B,GAAG,EAAEC,GAAG,KAAK;EAC3D,IAAI;IACF;IACA,IAAI,CAACD,GAAG,CAACgB,IAAI,EAAE;MACb,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACuG,uBAAuB,EAAE,mBAAmB,CAAC;IAChF;;IAEA;IACA,MAAMhE,IAAI,GAAG,MAAM5C,IAAI,CAAC6G,QAAQ,CAACjF,GAAG,CAACgB,IAAI,CAACG,GAAG,CAAC,CAAC+D,MAAM,CAAC,WAAW,CAAC;IAClE,IAAI,CAAClE,IAAI,IAAI,CAACA,IAAI,CAAC+B,QAAQ,EAAE;MAC3B,OAAO9C,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC0G,cAAc,EAAE,4BAA4B,CAAC;IAChF;IAEAlF,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACba,IAAI,EAAE;QACJxB,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC,CAAC;QACzB2C,aAAa,EAAE;MACjB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOvE,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDZ,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC4G,kBAAkB,EAAE,iCAAiC,CAAC;EAClF;AACF,CAAC,CAAC;;AAEF;AACAvH,MAAM,CAACiH,GAAG,CAAC,UAAU,EAAE1G,WAAW,EAAE,OAAO2B,GAAG,EAAEC,GAAG,KAAK;EACtD,IAAI;IACF;IACA,MAAMe,IAAI,GAAG,MAAM5C,IAAI,CAAC6G,QAAQ,CAACjF,GAAG,CAACgB,IAAI,CAACG,GAAG,CAAC,CAAC+D,MAAM,CAAC,WAAW,CAAC;IAElE,IAAI,CAAClE,IAAI,EAAE;MACT,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC0G,cAAc,EAAE,gBAAgB,CAAC;IACpE;IAEAlF,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACba,IAAI,EAAE;QACJxB,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;MAC1B;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CZ,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC6G,mBAAmB,EAAE,8BAA8B,CAAC;EAChF;AACF,CAAC,CAAC;;AAEF;AACAxH,MAAM,CAACyH,GAAG,CAAC,UAAU,EAAElH,WAAW,EAAEE,iBAAiB,EAAE,CACrDL,IAAI,CAAC,WAAW,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,oCAAoC,CAAC,EACnHlB,IAAI,CAAC,UAAU,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,mCAAmC,CAAC,EACjHlB,IAAI,CAAC,OAAO,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACL,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EAC9GlB,IAAI,CAAC,OAAO,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACP,OAAO,CAAC,CAAC,CAACE,WAAW,CAAC,yBAAyB,CAAC,EACzElB,IAAI,CAAC,WAAW,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAAC+F,OAAO,CAAC,CAAC,CAACpG,WAAW,CAAC,4BAA4B,CAAC,EAChFlB,IAAI,CAAC,oBAAoB,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAI,CAAC,CAAC,CAACJ,WAAW,CAAC,iCAAiC,CAAC,EAC1HlB,IAAI,CAAC,kBAAkB,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,8BAA8B,CAAC,EACpHlB,IAAI,CAAC,mBAAmB,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EACtHlB,IAAI,CAAC,qBAAqB,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,kCAAkC,CAAC,EAC3HlB,IAAI,CAAC,qBAAqB,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAE,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EACvHlB,IAAI,CAAC,2BAA2B,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACgG,SAAS,CAAC,CAAC,CAACrG,WAAW,CAAC,+BAA+B,CAAC,EACrGlB,IAAI,CAAC,wBAAwB,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACgG,SAAS,CAAC,CAAC,CAACrG,WAAW,CAAC,4BAA4B,CAAC,EAC/FlB,IAAI,CAAC,8BAA8B,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACiG,QAAQ,CAAC,CAAC,CAACtG,WAAW,CAAC,qCAAqC,CAAC,CAC9G,EAAE,OAAOY,GAAG,EAAEC,GAAG,KAAK;EACrB,MAAM0F,SAAS,GAAGtE,IAAI,CAAC0C,GAAG,CAAC,CAAC;EAE5B,IAAI;IACF,MAAM7D,MAAM,GAAG/B,gBAAgB,CAAC6B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,eAAe,CAACF,MAAM,CAAC;IACpC;IAEA,MAAM;MAAEK,SAAS;MAAEC,QAAQ;MAAEC,KAAK;MAAEJ,KAAK;MAAEuF,SAAS;MAAElF;IAAY,CAAC,GAAGV,GAAG,CAAC9B,IAAI;;IAE9E;IACA,MAAM2H,UAAU,GAAG,CAAC,CAAC;IACrB,IAAItF,SAAS,KAAKqE,SAAS,EAAEiB,UAAU,CAACtF,SAAS,GAAGA,SAAS;IAC7D,IAAIC,QAAQ,KAAKoE,SAAS,EAAEiB,UAAU,CAACrF,QAAQ,GAAGA,QAAQ;IAC1D,IAAIC,KAAK,KAAKmE,SAAS,EAAEiB,UAAU,CAACpF,KAAK,GAAGA,KAAK;IACjD,IAAIJ,KAAK,KAAKuE,SAAS,EAAEiB,UAAU,CAACxF,KAAK,GAAGA,KAAK;IACjD,IAAIuF,SAAS,KAAKhB,SAAS,EAAEiB,UAAU,CAACD,SAAS,GAAGA,SAAS;;IAE7D;IACA,IAAIlF,WAAW,KAAKkE,SAAS,EAAE;MAC7B;MACA,IAAIkB,kBAAkB,GAAG,CAAC,CAAC;MAC3B,IAAI9F,GAAG,CAACgB,IAAI,CAACN,WAAW,EAAE;QACxBoF,kBAAkB,GAAG,OAAO9F,GAAG,CAACgB,IAAI,CAACN,WAAW,CAACqF,QAAQ,KAAK,UAAU,GACpE/F,GAAG,CAACgB,IAAI,CAACN,WAAW,CAACqF,QAAQ,CAAC,CAAC,GAC/B/F,GAAG,CAACgB,IAAI,CAACN,WAAW;MAC1B;MAEAmF,UAAU,CAACnF,WAAW,GAAG;QACvB,GAAGoF,kBAAkB;QACrB,GAAGpF;MACL,CAAC;;MAED;MACA,IAAIA,WAAW,CAACsF,gBAAgB,EAAE;QAChCH,UAAU,CAACnF,WAAW,CAACsF,gBAAgB,GAAG;UACxC,IAAGF,kBAAkB,CAACE,gBAAgB,IAAI,CAAC,CAAC;UAC5C,GAAGtF,WAAW,CAACsF;QACjB,CAAC;MACH;IACF;;IAEA;IACA,IAAI;MACF;MACA,IAAI3F,KAAK,IAAIA,KAAK,KAAKL,GAAG,CAACgB,IAAI,CAACX,KAAK,EAAE;QACrC,MAAMM,YAAY,GAAG,MAAMvC,IAAI,CAACwC,OAAO,CAAC;UAAEP,KAAK;UAAEc,GAAG,EAAE;YAAE8E,GAAG,EAAEjG,GAAG,CAACgB,IAAI,CAACG;UAAI;QAAE,CAAC,CAAC;QAC9E,IAAIR,YAAY,EAAE;UAChB,OAAOV,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACyH,YAAY,EAAE,iCAAiC,CAAC;QACnF;MACF;;MAEA;MACA,MAAMlF,IAAI,GAAG,MAAM5C,IAAI,CAAC+H,iBAAiB,CACvCnG,GAAG,CAACgB,IAAI,CAACG,GAAG,EACZ0E,UAAU,EACV;QAAEO,GAAG,EAAE,IAAI;QAAEC,aAAa,EAAE;MAAK,CACnC,CAAC,CAACnB,MAAM,CAAC,WAAW,CAAC;MAErB,IAAI,CAAClE,IAAI,EAAE;QACT,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC0G,cAAc,EAAE,gBAAgB,CAAC;MACpE;MAEA,MAAMmB,aAAa,GAAGjF,IAAI,CAAC0C,GAAG,CAAC,CAAC,GAAG4B,SAAS;;MAE5C;MACA1F,GAAG,CAACqC,IAAI,CAAC;QACPX,OAAO,EAAE,IAAI;QACbY,OAAO,EAAE,8BAA8B;QACvCC,IAAI,EAAE;UACJxB,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;QAC1B,CAAC;QACD8D,WAAW,EAAE;UACXC,QAAQ,EAAEF,aAAa;UACvBG,MAAM,EAAE,OAAO;UACfpE,MAAM,EAAEiE,aAAa,IAAI,GAAG,GAAG,SAAS,GAAG;QAC7C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOI,WAAW,EAAE;MACpB9E,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAE6F,WAAW,CAAC;MACnD,OAAOzG,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACkI,oBAAoB,EAAED,WAAW,CAACnE,OAAO,IAAI,0BAA0B,CAAC;IAC3G;EAEF,CAAC,CAAC,OAAO1B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7Ce,OAAO,CAACf,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC+F,KAAK,CAAC;IAC1ChF,OAAO,CAACf,KAAK,CAAC,eAAe,EAAEb,GAAG,CAAC9B,IAAI,CAAC;;IAExC;IACA,IAAI2C,KAAK,CAACgG,IAAI,KAAK,KAAK,EAAE;MACxB,OAAO5G,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACqI,eAAe,EAAE,iCAAiC,CAAC;IACtF;IAEA7G,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAACkI,oBAAoB,EAAE,0BAA0B,EAAE,IAAI,EAAE;MAAEI,OAAO,EAAElG,KAAK,CAAC0B;IAAQ,CAAC,CAAC;EAC/G;AACF,CAAC,CAAC;;AAEF;AACAzE,MAAM,CAACiC,IAAI,CAAC,kBAAkB,EAAE1B,WAAW,EAAE,CAC3CH,IAAI,CAAC,iBAAiB,CAAC,CAAC0B,QAAQ,CAAC,CAAC,CAACR,WAAW,CAAC,8BAA8B,CAAC,EAC9ElB,IAAI,CAAC,aAAa,CAAC,CAACmB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CAACF,WAAW,CAAC,iDAAiD,CAAC,CACxG,EAAE,OAAOY,GAAG,EAAEC,GAAG,KAAK;EACrB,IAAI;IACF,MAAMC,MAAM,GAAG/B,gBAAgB,CAAC6B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,eAAe,CAACF,MAAM,CAAC;IACpC;IAEA,MAAM;MAAE8G,eAAe;MAAEC;IAAY,CAAC,GAAGjH,GAAG,CAAC9B,IAAI;;IAEjD;IACA,MAAM8C,IAAI,GAAG,MAAM5C,IAAI,CAAC6G,QAAQ,CAACjF,GAAG,CAACgB,IAAI,CAACG,GAAG,CAAC,CAAC+D,MAAM,CAAC,WAAW,CAAC;;IAElE;IACA,MAAMrC,OAAO,GAAG,MAAM7B,IAAI,CAAC8B,eAAe,CAACkE,eAAe,CAAC;IAC3D,IAAI,CAACnE,OAAO,EAAE;MACZ,OAAO5C,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BX,OAAO,EAAE,KAAK;QACdd,KAAK,EAAE;UACLgG,IAAI,EAAE,kBAAkB;UACxBtE,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACAvB,IAAI,CAACV,QAAQ,GAAG2G,WAAW;IAC3B,MAAMjG,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjBrB,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO1B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CZ,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,KAAK;MACdd,KAAK,EAAE;QACLgG,IAAI,EAAE,uBAAuB;QAC7BtE,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzE,MAAM,CAACiC,IAAI,CAAC,SAAS,EAAE1B,WAAW,EAAE,OAAO2B,GAAG,EAAEC,GAAG,KAAK;EACtD,IAAI;IACF,MAAMtB,MAAM,GAAGqB,GAAG,CAACgB,IAAI,CAACG,GAAG;;IAE3B;IACAS,OAAO,CAACuC,GAAG,CAAC,cAAc,EAAE;MAC1BxF,MAAM,EAAEA,MAAM;MACduI,SAAS,EAAE,IAAI7F,IAAI,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA,IAAIrB,GAAG,CAACmH,OAAO,EAAE;MACf;MACA,OAAOnH,GAAG,CAACmH,OAAO,CAACC,MAAM;MACzB,OAAOpH,GAAG,CAACmH,OAAO,CAACE,OAAO;;MAE1B;MACArH,GAAG,CAACmH,OAAO,CAACG,OAAO,CAAEC,GAAG,IAAK;QAC3B,IAAIA,GAAG,EAAE;UACP3F,OAAO,CAACf,KAAK,CAAC,4BAA4B,EAAE0G,GAAG,CAAC;QAClD;MACF,CAAC,CAAC;IACJ;;IAEA;IACAtH,GAAG,CAACuH,WAAW,CAAC,OAAO,EAAE;MACvBzF,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAEnD,OAAO,CAACC,GAAG,CAACmD,QAAQ,KAAK,YAAY;MAC7CC,QAAQ,EAAE,QAAQ;MAClBE,IAAI,EAAE;IACR,CAAC,CAAC;IAEFnC,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE,yBAAyB;MAClCkF,WAAW,EAAE,IAAI,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO5G,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrCZ,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,KAAK;MACdd,KAAK,EAAE;QACLgG,IAAI,EAAE,cAAc;QACpBtE,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;;AAEA;AACAzE,MAAM,CAACiC,IAAI,CAAC,oBAAoB,EAAE1B,WAAW,EAAEE,iBAAiB,EAAE,CAChEL,IAAI,CAAC,MAAM,CAAC,CAACwJ,IAAI,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAACtI,WAAW,CAAC,0CAA0C,CAAC,EAClGlB,IAAI,CAAC,WAAW,CAAC,CAACqB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,wBAAwB,CAAC,EAC5FlB,IAAI,CAAC,UAAU,CAAC,CAACqB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,uBAAuB,CAAC,EAC1FlB,IAAI,CAAC,QAAQ,CAAC,CAACqB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAI,CAAC,CAAC,CAACJ,WAAW,CAAC,4BAA4B,CAAC,EAC9FlB,IAAI,CAAC,MAAM,CAAC,CAACqB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,kBAAkB,CAAC,EACjFlB,IAAI,CAAC,OAAO,CAAC,CAACqB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,mBAAmB,CAAC,EACnFlB,IAAI,CAAC,SAAS,CAAC,CAACqB,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,sBAAsB,CAAC,EACxFlB,IAAI,CAAC,SAAS,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAE,CAAC,CAAC,CAACJ,WAAW,CAAC,qCAAqC,CAAC,EACjHlB,IAAI,CAAC,OAAO,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACL,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EAC9GlB,IAAI,CAAC,WAAW,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACgG,SAAS,CAAC,CAAC,CAACrG,WAAW,CAAC,2BAA2B,CAAC,CAClF,EAAE,OAAOY,GAAG,EAAEC,GAAG,KAAK;EACrB,IAAI;IACF,MAAMC,MAAM,GAAG/B,gBAAgB,CAAC6B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,eAAe,CAACF,MAAM,CAAC;IACpC;IAEA,MAAMyH,WAAW,GAAG;MAClBC,IAAI,EAAE5H,GAAG,CAAC9B,IAAI,CAAC0J,IAAI;MACnBrH,SAAS,EAAEP,GAAG,CAAC9B,IAAI,CAACqC,SAAS;MAC7BC,QAAQ,EAAER,GAAG,CAAC9B,IAAI,CAACsC,QAAQ;MAC3BqH,MAAM,EAAE7H,GAAG,CAAC9B,IAAI,CAAC2J,MAAM;MACvBC,IAAI,EAAE9H,GAAG,CAAC9B,IAAI,CAAC4J,IAAI;MACnBC,KAAK,EAAE/H,GAAG,CAAC9B,IAAI,CAAC6J,KAAK;MACrBC,OAAO,EAAEhI,GAAG,CAAC9B,IAAI,CAAC8J,OAAO;MACzBC,OAAO,EAAEjI,GAAG,CAAC9B,IAAI,CAAC+J,OAAO,IAAI,IAAI;MACjCxH,KAAK,EAAET,GAAG,CAAC9B,IAAI,CAACuC,KAAK;MACrByH,SAAS,EAAElI,GAAG,CAAC9B,IAAI,CAACgK,SAAS,IAAI;IACnC,CAAC;;IAED;IACA,MAAMlH,IAAI,GAAG,MAAM5C,IAAI,CAAC6G,QAAQ,CAACjF,GAAG,CAACgB,IAAI,CAACG,GAAG,CAAC;IAC9C,IAAI,CAACH,IAAI,EAAE;MACT,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC0G,cAAc,EAAE,gBAAgB,CAAC;IACpE;;IAEA;IACA,IAAIwC,WAAW,CAACO,SAAS,EAAE;MACzBlH,IAAI,CAAC4E,SAAS,CAACuC,OAAO,CAACC,IAAI,IAAI;QAC7BA,IAAI,CAACF,SAAS,GAAG,KAAK;MACxB,CAAC,CAAC;IACJ;IAEAlH,IAAI,CAAC4E,SAAS,CAACyC,IAAI,CAACV,WAAW,CAAC;IAChC,MAAM3G,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjBrB,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE,4BAA4B;MACrCvB,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1CZ,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,KAAK;MACdd,KAAK,EAAE;QACLgG,IAAI,EAAE,mBAAmB;QACzBtE,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzE,MAAM,CAACyH,GAAG,CAAC,+BAA+B,EAAElH,WAAW,EAAEE,iBAAiB,EAAE,CAC1EL,IAAI,CAAC,MAAM,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACiI,IAAI,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAACtI,WAAW,CAAC,0CAA0C,CAAC,EAC7GlB,IAAI,CAAC,WAAW,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,oCAAoC,CAAC,EACnHlB,IAAI,CAAC,UAAU,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,mCAAmC,CAAC,EACjHlB,IAAI,CAAC,QAAQ,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAI,CAAC,CAAC,CAACJ,WAAW,CAAC,iCAAiC,CAAC,EAC9GlB,IAAI,CAAC,MAAM,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,8BAA8B,CAAC,EACxGlB,IAAI,CAAC,OAAO,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EAC1GlB,IAAI,CAAC,SAAS,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,kCAAkC,CAAC,EAC/GlB,IAAI,CAAC,SAAS,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAACF,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAE,CAAC,CAAC,CAACJ,WAAW,CAAC,qCAAqC,CAAC,EACjHlB,IAAI,CAAC,OAAO,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACL,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEE,GAAG,EAAE;AAAG,CAAC,CAAC,CAACJ,WAAW,CAAC,+BAA+B,CAAC,EAC9GlB,IAAI,CAAC,WAAW,CAAC,CAACuB,QAAQ,CAAC,CAAC,CAACgG,SAAS,CAAC,CAAC,CAACrG,WAAW,CAAC,2BAA2B,CAAC,CAClF,EAAE,OAAOY,GAAG,EAAEC,GAAG,KAAK;EACrB,IAAI;IACF,MAAMC,MAAM,GAAG/B,gBAAgB,CAAC6B,GAAG,CAAC;IACpC,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;MACrB,OAAOF,GAAG,CAACG,eAAe,CAACF,MAAM,CAAC;IACpC;IAEA,MAAM;MAAEoI;IAAU,CAAC,GAAGtI,GAAG,CAACuI,MAAM;IAChC,MAAM1C,UAAU,GAAG,CAAC,CAAC;;IAErB;IACA,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC,CACrGsC,OAAO,CAACK,KAAK,IAAI;MAChB,IAAIxI,GAAG,CAAC9B,IAAI,CAACsK,KAAK,CAAC,KAAK5D,SAAS,EAAE;QACjCiB,UAAU,CAAC2C,KAAK,CAAC,GAAGxI,GAAG,CAAC9B,IAAI,CAACsK,KAAK,CAAC;MACrC;IACF,CAAC,CAAC;;IAEJ;IACA,MAAMxH,IAAI,GAAG,MAAM5C,IAAI,CAAC6G,QAAQ,CAACjF,GAAG,CAACgB,IAAI,CAACG,GAAG,CAAC;IAC9C,IAAI,CAACH,IAAI,EAAE;MACT,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC0G,cAAc,EAAE,gBAAgB,CAAC;IACpE;IAEA,MAAMsD,OAAO,GAAGzH,IAAI,CAAC4E,SAAS,CAAC8C,EAAE,CAACJ,SAAS,CAAC;IAC5C,IAAI,CAACG,OAAO,EAAE;MACZ,OAAOxI,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BX,OAAO,EAAE,KAAK;QACdd,KAAK,EAAE;UACLgG,IAAI,EAAE,mBAAmB;UACzBtE,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIsD,UAAU,CAACqC,SAAS,EAAE;MACxBlH,IAAI,CAAC4E,SAAS,CAACuC,OAAO,CAACC,IAAI,IAAI;QAC7B,IAAIA,IAAI,CAACjH,GAAG,CAACsC,QAAQ,CAAC,CAAC,KAAK6E,SAAS,EAAE;UACrCF,IAAI,CAACF,SAAS,GAAG,KAAK;QACxB;MACF,CAAC,CAAC;IACJ;;IAEA;IACAS,MAAM,CAACC,MAAM,CAACH,OAAO,EAAE5C,UAAU,CAAC;IAClC,MAAM7E,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjBrB,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE,8BAA8B;MACvCvB,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CZ,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,KAAK;MACdd,KAAK,EAAE;QACLgG,IAAI,EAAE,sBAAsB;QAC5BtE,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzE,MAAM,CAAC+K,MAAM,CAAC,+BAA+B,EAAExK,WAAW,EAAEE,iBAAiB,EAAE,OAAOyB,GAAG,EAAEC,GAAG,KAAK;EACjG,IAAI;IACF,MAAM;MAAEqI;IAAU,CAAC,GAAGtI,GAAG,CAACuI,MAAM;;IAEhC;IACA,MAAMvH,IAAI,GAAG,MAAM5C,IAAI,CAAC6G,QAAQ,CAACjF,GAAG,CAACgB,IAAI,CAACG,GAAG,CAAC;IAC9C,IAAI,CAACH,IAAI,EAAE;MACT,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC0G,cAAc,EAAE,gBAAgB,CAAC;IACpE;IAEA,MAAMsD,OAAO,GAAGzH,IAAI,CAAC4E,SAAS,CAAC8C,EAAE,CAACJ,SAAS,CAAC;IAC5C,IAAI,CAACG,OAAO,EAAE;MACZ,OAAOxI,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BX,OAAO,EAAE,KAAK;QACdd,KAAK,EAAE;UACLgG,IAAI,EAAE,mBAAmB;UACzBtE,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACAkG,OAAO,CAACK,MAAM,CAAC,CAAC;IAChB,MAAM9H,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjBrB,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE,8BAA8B;MACvCvB,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CZ,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,KAAK;MACdd,KAAK,EAAE;QACLgG,IAAI,EAAE,sBAAsB;QAC5BtE,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzE,MAAM,CAACiL,KAAK,CAAC,uCAAuC,EAAE1K,WAAW,EAAEE,iBAAiB,EAAE,OAAOyB,GAAG,EAAEC,GAAG,KAAK;EACxG,IAAI;IACF,MAAM;MAAEqI;IAAU,CAAC,GAAGtI,GAAG,CAACuI,MAAM;;IAEhC;IACA,MAAMvH,IAAI,GAAG,MAAM5C,IAAI,CAAC6G,QAAQ,CAACjF,GAAG,CAACgB,IAAI,CAACG,GAAG,CAAC;IAC9C,IAAI,CAACH,IAAI,EAAE;MACT,OAAOf,GAAG,CAACY,KAAK,CAAC,GAAG,EAAEpC,UAAU,CAAC0G,cAAc,EAAE,gBAAgB,CAAC;IACpE;IAEA,MAAMsD,OAAO,GAAGzH,IAAI,CAAC4E,SAAS,CAAC8C,EAAE,CAACJ,SAAS,CAAC;IAC5C,IAAI,CAACG,OAAO,EAAE;MACZ,OAAOxI,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BX,OAAO,EAAE,KAAK;QACdd,KAAK,EAAE;UACLgG,IAAI,EAAE,mBAAmB;UACzBtE,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACAvB,IAAI,CAAC4E,SAAS,CAACuC,OAAO,CAACC,IAAI,IAAI;MAC7BA,IAAI,CAACF,SAAS,GAAGE,IAAI,CAACjH,GAAG,CAACsC,QAAQ,CAAC,CAAC,KAAK6E,SAAS;IACpD,CAAC,CAAC;IAEF,MAAMtH,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjBrB,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbY,OAAO,EAAE,sCAAsC;MAC/CvB,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDZ,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,KAAK;MACdd,KAAK,EAAE;QACLgG,IAAI,EAAE,uBAAuB;QAC7BtE,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACAzE,MAAM,CAACiC,IAAI,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,IAAI;IACF,MAAM;MAAEiB;IAAM,CAAC,GAAGlB,GAAG,CAAC9B,IAAI;IAE1B,IAAI,CAACgD,KAAK,EAAE;MACV,OAAOjB,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BX,OAAO,EAAE,KAAK;QACdd,KAAK,EAAE;UACLgG,IAAI,EAAE,eAAe;UACrBtE,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEA,MAAMyG,OAAO,GAAGhL,GAAG,CAACiL,MAAM,CAAC/H,KAAK,EAAErC,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;IACzD,MAAMiC,IAAI,GAAG,MAAM5C,IAAI,CAAC6G,QAAQ,CAAC+D,OAAO,CAACrK,MAAM,CAAC;IAEhD,IAAI,CAACqC,IAAI,IAAI,CAACA,IAAI,CAAC+B,QAAQ,EAAE;MAC3B,OAAO9C,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BX,OAAO,EAAE,KAAK;QACdd,KAAK,EAAE;UACLgG,IAAI,EAAE,eAAe;UACrBtE,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ;IAEA,MAAM2G,QAAQ,GAAGxK,aAAa,CAACsC,IAAI,CAACG,GAAG,CAAC;IAExClB,GAAG,CAACqC,IAAI,CAAC;MACPX,OAAO,EAAE,IAAI;MACbT,KAAK,EAAEgI,QAAQ;MACflI,IAAI,EAAEA,IAAI,CAACyB,YAAY,CAAC;IAC1B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CZ,GAAG,CAACoC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBX,OAAO,EAAE,KAAK;MACdd,KAAK,EAAE;QACLgG,IAAI,EAAE,qBAAqB;QAC3BtE,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF4G,MAAM,CAACC,OAAO,GAAGtL,MAAM","ignoreList":[]}