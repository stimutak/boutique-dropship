{"version":3,"names":["Cart","require","User","Product","EventEmitter","CartService","constructor","connectionPool","Map","notifyCartUpdate","sessionId","userId","cartData","eventData","cart","timestamp","Date","emit","getCartWithPerformanceOptimization","req","startTime","now","result","getOrCreateCart","endTime","duration","console","warn","error","user","findById","_id","items","updatedAt","save","type","sessionID","Math","random","toString","substr","findOneAndUpdate","$setOnInsert","$set","lastAccessed","new","upsert","lean","mergeCartsWithConflictResolution","guestCartItems","Error","mergedItems","conflicts","Array","isArray","guestItem","mergeCartItem","merged","guestCart","findOne","length","deleteOne","success","productId","product","quantity","isActive","reason","existingItemIndex","findIndex","item","currentQuantity","newQuantity","push","current","attempted","resolved","addedAt","min","price","message","updateCartOptimistically","operation","data","rollbackData","JSON","parse","stringify","addItemOptimistically","updateItemOptimistically","removeItemOptimistically","performance","log","addItem","updatedCart","findByIdAndUpdate","itemIndex","splice","updateItem","removeItem","cleanupExpiredCarts","deleteMany","expiresAt","$lt","deletedCount","cartService","module","exports"],"sources":["cartService.js"],"sourcesContent":["const Cart = require('../models/Cart');\nconst User = require('../models/User');\nconst Product = require('../models/Product');\nconst EventEmitter = require('events');\n\nclass CartService extends EventEmitter {\n  constructor() {\n    super();\n    this.connectionPool = new Map(); // Simple connection tracking\n  }\n\n  // Event-driven cart synchronization\n  async notifyCartUpdate(sessionId, userId, cartData) {\n    const eventData = {\n      sessionId,\n      userId,\n      cart: cartData,\n      timestamp: new Date()\n    };\n\n    // Emit event for real-time synchronization across browser tabs\n    this.emit('cartUpdated', eventData);\n    \n    return eventData;\n  }\n\n  // Optimized cart retrieval with caching consideration\n  async getCartWithPerformanceOptimization(req) {\n    const startTime = Date.now();\n    \n    try {\n      const result = await this.getOrCreateCart(req);\n      \n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      // Log performance (should be under 100ms target)\n      if (duration > 100) {\n        console.warn(`Cart retrieval took ${duration}ms - exceeds 100ms target`);\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Cart performance optimization error:', error);\n      throw error;\n    }\n  }\n\n  // Enhanced cart retrieval with connection pooling awareness\n  async getOrCreateCart(req) {\n    if (req.user) {\n      // For authenticated users, use user's cart with optimistic loading\n      const user = await User.findById(req.user._id);\n      if (!user.cart) {\n        // Create cart optimistically\n        user.cart = { items: [], updatedAt: new Date() };\n        await user.save();\n        return { type: 'user', cart: user.cart, user };\n      }\n      return { type: 'user', cart: user.cart, user };\n    } else {\n      // For guests, use session-based cart with database storage\n      const sessionId = req.sessionID || `guest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Use findOneAndUpdate for atomic operation\n      let cart = await Cart.findOneAndUpdate(\n        { sessionId },\n        { \n          $setOnInsert: { sessionId, items: [] },\n          $set: { lastAccessed: new Date() }\n        },\n        { \n          new: true, \n          upsert: true,\n          lean: true\n        }\n      );\n      \n      return { type: 'guest', cart, sessionId };\n    }\n  }\n\n  // Enhanced cart merging with conflict resolution\n  async mergeCartsWithConflictResolution(userId, guestCartItems, sessionId) {\n    const startTime = Date.now();\n    \n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n      if (!user.cart) {\n        user.cart = { items: [], updatedAt: new Date() };\n      }\n\n      let mergedItems = 0;\n      const conflicts = [];\n\n      // Process guest cart items with conflict detection\n      if (guestCartItems && Array.isArray(guestCartItems)) {\n        for (const guestItem of guestCartItems) {\n          const result = await this.mergeCartItem(user, guestItem, conflicts);\n          if (result.merged) mergedItems++;\n        }\n      }\n\n      // Process session-based cart\n      if (sessionId) {\n        const guestCart = await Cart.findOne({ sessionId });\n        if (guestCart && guestCart.items.length > 0) {\n          for (const guestItem of guestCart.items) {\n            const result = await this.mergeCartItem(user, guestItem, conflicts);\n            if (result.merged) mergedItems++;\n          }\n          \n          // Clean up guest cart\n          await Cart.deleteOne({ sessionId });\n        }\n      }\n\n      user.cart.updatedAt = new Date();\n      await user.save();\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      // Emit cart update event\n      await this.notifyCartUpdate(sessionId, userId, user.cart);\n\n      return {\n        mergedItems,\n        conflicts,\n        duration,\n        success: true\n      };\n\n    } catch (error) {\n      console.error('Cart merge error:', error);\n      throw error;\n    }\n  }\n\n  // Helper method to merge individual cart items\n  async mergeCartItem(user, guestItem, conflicts = []) {\n    try {\n      const productId = guestItem.productId || guestItem.product;\n      const quantity = guestItem.quantity || 1;\n\n      // Validate product\n      const product = await Product.findById(productId).lean();\n      if (!product || !product.isActive) {\n        return { merged: false, reason: 'invalid_product' };\n      }\n\n      // Check for existing item\n      const existingItemIndex = user.cart.items.findIndex(item => \n        item.product.toString() === productId.toString()\n      );\n\n      if (existingItemIndex >= 0) {\n        const currentQuantity = user.cart.items[existingItemIndex].quantity;\n        const newQuantity = currentQuantity + quantity;\n        \n        // Check for quantity conflicts\n        if (newQuantity > 99) {\n          conflicts.push({\n            productId,\n            type: 'quantity_limit',\n            current: currentQuantity,\n            attempted: quantity,\n            resolved: 99\n          });\n          user.cart.items[existingItemIndex].quantity = 99;\n        } else {\n          user.cart.items[existingItemIndex].quantity = newQuantity;\n        }\n        \n        user.cart.items[existingItemIndex].addedAt = new Date();\n      } else {\n        // Add new item\n        user.cart.items.push({\n          product: productId,\n          quantity: Math.min(quantity, 99),\n          price: product.price,\n          addedAt: new Date()\n        });\n      }\n\n      return { merged: true };\n    } catch (error) {\n      console.error('Error merging cart item:', error);\n      return { merged: false, reason: 'merge_error', error: error.message };\n    }\n  }\n\n  // Optimistic cart update with rollback capability\n  async updateCartOptimistically(req, operation, data) {\n    const startTime = Date.now();\n    let rollbackData = null;\n    \n    try {\n      const { type, cart, user } = await this.getOrCreateCart(req);\n      \n      // Store rollback data\n      if (type === 'user') {\n        rollbackData = JSON.parse(JSON.stringify(user.cart));\n      } else {\n        rollbackData = JSON.parse(JSON.stringify(cart));\n      }\n\n      // Perform operation\n      let result;\n      switch (operation) {\n        case 'add':\n          result = await this.addItemOptimistically(type, cart, user, data);\n          break;\n        case 'update':\n          result = await this.updateItemOptimistically(type, cart, user, data);\n          break;\n        case 'remove':\n          result = await this.removeItemOptimistically(type, cart, user, data);\n          break;\n        default:\n          throw new Error(`Unknown operation: ${operation}`);\n      }\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      // Performance monitoring\n      if (duration > 200) {\n        console.warn(`Cart ${operation} took ${duration}ms - exceeds 200ms target`);\n      }\n\n      // Emit update event\n      const sessionId = type === 'guest' ? cart.sessionId : null;\n      const userId = type === 'user' ? user._id : null;\n      await this.notifyCartUpdate(sessionId, userId, result.cart);\n\n      return {\n        ...result,\n        duration,\n        performance: duration <= 200 ? 'good' : 'needs_optimization'\n      };\n\n    } catch (error) {\n      console.error(`Cart ${operation} error:`, error);\n      \n      // Implement rollback if needed\n      if (rollbackData) {\n        console.log('Rolling back cart changes...');\n        // Rollback implementation would go here\n      }\n      \n      throw error;\n    }\n  }\n\n  // Optimistic add item operation\n  async addItemOptimistically(type, cart, user, { productId, quantity }) {\n    const product = await Product.findById(productId).lean();\n    if (!product || !product.isActive) {\n      throw new Error('Product not found or inactive');\n    }\n\n    if (type === 'user') {\n      const existingItemIndex = user.cart.items.findIndex(item => \n        item.product.toString() === productId.toString()\n      );\n\n      if (existingItemIndex >= 0) {\n        const newQuantity = user.cart.items[existingItemIndex].quantity + quantity;\n        if (newQuantity > 99) {\n          user.cart.items[existingItemIndex].quantity = 99;\n        } else {\n          user.cart.items[existingItemIndex].quantity = newQuantity;\n        }\n        user.cart.items[existingItemIndex].addedAt = new Date();\n      } else {\n        user.cart.items.push({\n          product: productId,\n          quantity,\n          price: product.price,\n          addedAt: new Date()\n        });\n      }\n      \n      user.cart.updatedAt = new Date();\n      await user.save();\n      return { cart: user.cart };\n    } else {\n      // Check if cart has addItem method, otherwise manually add\n      if (cart.addItem && typeof cart.addItem === 'function') {\n        cart.addItem(productId, quantity, product.price);\n      } else {\n        // Manually add to cart items\n        const existingItemIndex = cart.items.findIndex(item => \n          item.product.toString() === productId.toString()\n        );\n\n        if (existingItemIndex >= 0) {\n          const newQuantity = cart.items[existingItemIndex].quantity + quantity;\n          if (newQuantity > 99) {\n            cart.items[existingItemIndex].quantity = 99;\n          } else {\n            cart.items[existingItemIndex].quantity = newQuantity;\n          }\n          cart.items[existingItemIndex].addedAt = new Date();\n        } else {\n          cart.items.push({\n            product: productId,\n            quantity,\n            price: product.price,\n            addedAt: new Date()\n          });\n        }\n        cart.updatedAt = new Date();\n      }\n      \n      // Use findByIdAndUpdate instead of save() for lean objects\n      const updatedCart = await Cart.findByIdAndUpdate(\n        cart._id,\n        { items: cart.items, updatedAt: cart.updatedAt },\n        { new: true, lean: true }\n      );\n      return { cart: updatedCart };\n    }\n  }\n\n  // Optimistic update item operation\n  async updateItemOptimistically(type, cart, user, { productId, quantity }) {\n    if (type === 'user') {\n      const itemIndex = user.cart.items.findIndex(item => \n        item.product.toString() === productId.toString()\n      );\n\n      if (itemIndex >= 0) {\n        if (quantity === 0) {\n          user.cart.items.splice(itemIndex, 1);\n        } else {\n          user.cart.items[itemIndex].quantity = quantity;\n          user.cart.items[itemIndex].addedAt = new Date();\n        }\n        user.cart.updatedAt = new Date();\n        await user.save();\n      }\n      return { cart: user.cart };\n    } else {\n      // Check if cart has updateItem method, otherwise manually update\n      if (cart.updateItem && typeof cart.updateItem === 'function') {\n        cart.updateItem(productId, quantity);\n      } else {\n        // Manually update cart items\n        const itemIndex = cart.items.findIndex(item => \n          item.product.toString() === productId.toString()\n        );\n\n        if (itemIndex >= 0) {\n          if (quantity === 0) {\n            cart.items.splice(itemIndex, 1);\n          } else {\n            cart.items[itemIndex].quantity = quantity;\n            cart.items[itemIndex].addedAt = new Date();\n          }\n          cart.updatedAt = new Date();\n        }\n      }\n      \n      // Use findByIdAndUpdate instead of save() for lean objects\n      const updatedCart = await Cart.findByIdAndUpdate(\n        cart._id,\n        { items: cart.items, updatedAt: cart.updatedAt },\n        { new: true, lean: true }\n      );\n      return { cart: updatedCart };\n    }\n  }\n\n  // Optimistic remove item operation\n  async removeItemOptimistically(type, cart, user, { productId }) {\n    if (type === 'user') {\n      const itemIndex = user.cart.items.findIndex(item => \n        item.product.toString() === productId.toString()\n      );\n\n      if (itemIndex >= 0) {\n        user.cart.items.splice(itemIndex, 1);\n        user.cart.updatedAt = new Date();\n        await user.save();\n      }\n      return { cart: user.cart };\n    } else {\n      // Check if cart has removeItem method, otherwise manually remove\n      if (cart.removeItem && typeof cart.removeItem === 'function') {\n        cart.removeItem(productId);\n      } else {\n        // Manually remove from cart items\n        const itemIndex = cart.items.findIndex(item => \n          item.product.toString() === productId.toString()\n        );\n\n        if (itemIndex >= 0) {\n          cart.items.splice(itemIndex, 1);\n          cart.updatedAt = new Date();\n        }\n      }\n      \n      // Use findByIdAndUpdate instead of save() for lean objects\n      const updatedCart = await Cart.findByIdAndUpdate(\n        cart._id,\n        { items: cart.items, updatedAt: cart.updatedAt },\n        { new: true, lean: true }\n      );\n      return { cart: updatedCart };\n    }\n  }\n\n  // Cleanup expired guest carts (for scheduled maintenance)\n  async cleanupExpiredCarts() {\n    try {\n      const result = await Cart.deleteMany({\n        expiresAt: { $lt: new Date() }\n      });\n      \n      console.log(`Cleaned up ${result.deletedCount} expired guest carts`);\n      return result.deletedCount;\n    } catch (error) {\n      console.error('Error cleaning up expired carts:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nconst cartService = new CartService();\nmodule.exports = cartService;"],"mappings":"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","ignoreList":[]}