ce5850fcb25f9ff9ac7d84c48540fe3f
/**
 * @jest-environment node
 * 
 * Tests to reproduce and fix cart functionality issues in Docker environment
 * Following TDD principles: write failing tests first, then fix
 */

const request = require('supertest');
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
const app = require('../server');
const Product = require('../models/Product');
const User = require('../models/User');
const Cart = require('../models/Cart');
describe('Cart Functionality - Docker Environment Issues', () => {
  let mongoServer;
  let testProduct;
  let testUser;
  let authToken;
  let sessionCookie;
  let csrfToken;
  beforeAll(async () => {
    // Setup in-memory MongoDB
    mongoServer = await MongoMemoryServer.create();
    const mongoUri = mongoServer.getUri();

    // Close any existing connections
    await mongoose.disconnect();

    // Connect to the in-memory database
    await mongoose.connect(mongoUri);
  });
  afterAll(async () => {
    await mongoose.disconnect();
    await mongoServer.stop();
  });
  beforeEach(async () => {
    // Clear all collections
    await Promise.all([Product.deleteMany({}), User.deleteMany({}), Cart.deleteMany({})]);

    // Create test product
    testProduct = await Product.create({
      name: 'Test Crystal',
      slug: 'test-crystal',
      description: 'A test crystal for unit testing',
      shortDescription: 'Test crystal',
      price: 29.99,
      category: 'crystals',
      isActive: true,
      properties: {
        chakra: ['crown'],
        element: ['air'],
        healing: ['test']
      }
    });

    // Create test user
    testUser = await User.create({
      name: 'Test User',
      email: 'test@example.com',
      password: 'Password123!',
      isActive: true
    });
  });
  describe('Guest Cart Operations', () => {
    it('should get CSRF token for guest user', async () => {
      const response = await request(app).get('/api/csrf-token').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.csrfToken).toBeTruthy();
      expect(response.body.sessionInfo.isGuest).toBe(true);

      // Extract session cookie and CSRF token for subsequent requests
      sessionCookie = response.headers['set-cookie'];
      csrfToken = response.body.csrfToken;
    });
    it('should add item to guest cart with CSRF token', async () => {
      // First get CSRF token
      const csrfResponse = await request(app).get('/api/csrf-token').expect(200);
      sessionCookie = csrfResponse.headers['set-cookie'];
      csrfToken = csrfResponse.body.csrfToken;

      // Generate guest session ID
      const guestSessionId = `guest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

      // Try to add item to cart
      const response = await request(app).post('/api/cart/add').set('Cookie', sessionCookie).set('x-csrf-token', csrfToken).set('x-guest-session-id', guestSessionId).send({
        productId: testProduct._id.toString(),
        quantity: 1
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item added to cart');
      expect(response.body.data.cart.items).toHaveLength(1);
      expect(response.body.data.cart.items[0].product.name).toBe('Test Crystal');
      expect(response.body.data.cart.itemCount).toBe(1);
    });
    it('should fail to add item without CSRF token', async () => {
      // Get session but don't send CSRF token
      const csrfResponse = await request(app).get('/api/csrf-token').expect(200);
      sessionCookie = csrfResponse.headers['set-cookie'];
      const guestSessionId = `guest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

      // Try to add item without CSRF token
      const response = await request(app).post('/api/cart/add').set('Cookie', sessionCookie).set('x-guest-session-id', guestSessionId).send({
        productId: testProduct._id.toString(),
        quantity: 1
      }).expect(403);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('CSRF_TOKEN_MISMATCH');
    });
    it('should maintain cart across requests with same session', async () => {
      // Get CSRF token
      const csrfResponse = await request(app).get('/api/csrf-token').expect(200);
      sessionCookie = csrfResponse.headers['set-cookie'];
      csrfToken = csrfResponse.body.csrfToken;
      const guestSessionId = `guest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

      // Add first item
      await request(app).post('/api/cart/add').set('Cookie', sessionCookie).set('x-csrf-token', csrfToken).set('x-guest-session-id', guestSessionId).send({
        productId: testProduct._id.toString(),
        quantity: 1
      }).expect(200);

      // Check cart contents
      const cartResponse = await request(app).get('/api/cart').set('Cookie', sessionCookie).set('x-guest-session-id', guestSessionId).expect(200);
      expect(cartResponse.body.data.cart.items).toHaveLength(1);
      expect(cartResponse.body.data.cart.itemCount).toBe(1);
    });
  });
  describe('Authenticated User Cart Operations', () => {
    beforeEach(async () => {
      // Login and get auth token
      const loginResponse = await request(app).post('/api/auth/login').send({
        email: 'test@example.com',
        password: 'Password123!'
      }).expect(200);
      authToken = loginResponse.body.token;
      sessionCookie = loginResponse.headers['set-cookie'];

      // Get CSRF token for authenticated session
      const csrfResponse = await request(app).get('/api/csrf-token').set('Cookie', sessionCookie).expect(200);
      csrfToken = csrfResponse.body.csrfToken;
    });
    it('should add item to authenticated user cart', async () => {
      const response = await request(app).post('/api/cart/add').set('Cookie', sessionCookie).set('x-csrf-token', csrfToken).send({
        productId: testProduct._id.toString(),
        quantity: 2
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.cart.items).toHaveLength(1);
      expect(response.body.data.cart.items[0].quantity).toBe(2);
      expect(response.body.data.cart.itemCount).toBe(2);
    });
    it('should update cart item quantity', async () => {
      // First add item
      await request(app).post('/api/cart/add').set('Cookie', sessionCookie).set('x-csrf-token', csrfToken).send({
        productId: testProduct._id.toString(),
        quantity: 1
      }).expect(200);

      // Update quantity
      const updateResponse = await request(app).put('/api/cart/update').set('Cookie', sessionCookie).set('x-csrf-token', csrfToken).send({
        productId: testProduct._id.toString(),
        quantity: 3
      }).expect(200);
      expect(updateResponse.body.success).toBe(true);
      expect(updateResponse.body.message).toBe('Cart updated');
      expect(updateResponse.body.data.cart.items[0].quantity).toBe(3);
    });
    it('should remove item from cart', async () => {
      // First add item
      await request(app).post('/api/cart/add').set('Cookie', sessionCookie).set('x-csrf-token', csrfToken).send({
        productId: testProduct._id.toString(),
        quantity: 1
      }).expect(200);

      // Remove item
      const removeResponse = await request(app).delete('/api/cart/remove').set('Cookie', sessionCookie).set('x-csrf-token', csrfToken).send({
        productId: testProduct._id.toString()
      }).expect(200);
      expect(removeResponse.body.success).toBe(true);
      expect(removeResponse.body.message).toBe('Item removed from cart');
      expect(removeResponse.body.data.cart.items).toHaveLength(0);
    });
  });
  describe('Cart Merge on Login', () => {
    it('should merge guest cart with user cart on login', async () => {
      // Create guest session and add items
      const csrfResponse = await request(app).get('/api/csrf-token').expect(200);
      sessionCookie = csrfResponse.headers['set-cookie'];
      csrfToken = csrfResponse.body.csrfToken;
      const guestSessionId = `guest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

      // Add item as guest
      await request(app).post('/api/cart/add').set('Cookie', sessionCookie).set('x-csrf-token', csrfToken).set('x-guest-session-id', guestSessionId).send({
        productId: testProduct._id.toString(),
        quantity: 2
      }).expect(200);

      // Login
      const loginResponse = await request(app).post('/api/auth/login').set('Cookie', sessionCookie).send({
        email: 'test@example.com',
        password: 'Password123!'
      }).expect(200);
      const authCookie = loginResponse.headers['set-cookie'];

      // Get CSRF for authenticated session
      const authCsrfResponse = await request(app).get('/api/csrf-token').set('Cookie', authCookie).expect(200);
      const authCsrfToken = authCsrfResponse.body.csrfToken;

      // Merge cart
      const mergeResponse = await request(app).post('/api/cart/merge').set('Cookie', authCookie).set('x-csrf-token', authCsrfToken).send({
        sessionId: guestSessionId,
        guestCartItems: [{
          productId: testProduct._id.toString(),
          quantity: 2
        }]
      }).expect(200);
      expect(mergeResponse.body.success).toBe(true);
      expect(mergeResponse.body.data.cart.items).toHaveLength(1);
      expect(mergeResponse.body.data.cart.items[0].quantity).toBe(2);
    });
  });
  describe('CORS and Cookie Configuration', () => {
    it('should handle withCredentials properly', async () => {
      const response = await request(app).get('/api/csrf-token').expect(200);

      // Check for proper cookie settings
      const cookies = response.headers['set-cookie'];
      expect(cookies).toBeTruthy();
      expect(cookies.some(cookie => cookie.includes('httpOnly'))).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,