a7a87194b47f44aebcce1089b55d3d7d
const request = require('supertest');
const app = require('../server');

// Helper to generate unique test emails
const getUniqueEmail = () => `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}@example.com`;
describe('Authentication Issues Tests', () => {
  let testUser;
  beforeEach(() => {
    testUser = {
      email: getUniqueEmail(),
      password: 'TestPassword123!',
      firstName: 'Test',
      lastName: 'User',
      phone: '1234567890'
    };
  });

  // Issue #12: Login sync error
  describe('Issue #12: Login returns user data properly', () => {
    test('Login response should include complete user data', async () => {
      // Register user first
      await request(app).post('/api/auth/register').send(testUser);

      // Login
      const loginRes = await request(app).post('/api/auth/login').send({
        email: testUser.email,
        password: testUser.password
      });
      console.log('Login response:', JSON.stringify(loginRes.body, null, 2));
      expect(loginRes.status).toBe(200);
      expect(loginRes.body.success).toBe(true);

      // Check for proper response structure
      expect(loginRes.body.data).toBeDefined();
      expect(loginRes.body.data.token).toBeDefined();
      expect(loginRes.body.data.user).toBeDefined();

      // Check user data
      expect(loginRes.body.data.user.firstName).toBe(testUser.firstName);
      expect(loginRes.body.data.user.lastName).toBe(testUser.lastName);
      expect(loginRes.body.data.user.email).toBe(testUser.email);
    });
  });

  // Issue #11: Registration login state
  describe('Issue #11: Registration returns proper auth state', () => {
    test('Registration should return token and user data', async () => {
      const registerRes = await request(app).post('/api/auth/register').send(testUser);
      console.log('Register response:', JSON.stringify(registerRes.body, null, 2));
      expect(registerRes.status).toBe(201);
      expect(registerRes.body.success).toBe(true);

      // Check response structure
      expect(registerRes.body.data).toBeDefined();
      expect(registerRes.body.data.token).toBeDefined();
      expect(registerRes.body.data.user).toBeDefined();

      // Verify token works
      const profileRes = await request(app).get('/api/auth/profile').set('Authorization', `Bearer ${registerRes.body.data.token}`);
      expect(profileRes.status).toBe(200);
      expect(profileRes.body.success).toBe(true);
    });
  });

  // Issue #10: Bad login state
  describe('Issue #10: Failed login should not return auth data', () => {
    test('Bad password should return error without token', async () => {
      // Register user first
      await request(app).post('/api/auth/register').send(testUser);

      // Try bad login
      const badLoginRes = await request(app).post('/api/auth/login').send({
        email: testUser.email,
        password: 'wrongpassword'
      });
      console.log('Bad login response:', JSON.stringify(badLoginRes.body, null, 2));
      expect(badLoginRes.status).toBe(401);
      expect(badLoginRes.body.success).toBe(false);
      expect(badLoginRes.body.data?.token).toBeUndefined();
      expect(badLoginRes.body.data?.user).toBeUndefined();
      expect(badLoginRes.body.error).toBeDefined();
    });
  });

  // Issue #9: Profile update authentication
  describe('Issue #9: Profile update should maintain auth', () => {
    test('Profile update should not require re-authentication', async () => {
      // Register and get token
      const registerRes = await request(app).post('/api/auth/register').send(testUser);
      const token = registerRes.body.data.token;

      // Update profile
      const updateRes = await request(app).put('/api/auth/profile').set('Authorization', `Bearer ${token}`).send({
        firstName: 'Updated',
        lastName: 'Name'
      });
      console.log('Update response:', JSON.stringify(updateRes.body, null, 2));
      expect(updateRes.status).toBe(200);
      expect(updateRes.body.success).toBe(true);

      // Verify still authenticated
      const profileRes = await request(app).get('/api/auth/profile').set('Authorization', `Bearer ${token}`);
      expect(profileRes.status).toBe(200);
      expect(profileRes.body.data.user.firstName).toBe('Updated');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImFwcCIsImdldFVuaXF1ZUVtYWlsIiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsImRlc2NyaWJlIiwidGVzdFVzZXIiLCJiZWZvcmVFYWNoIiwiZW1haWwiLCJwYXNzd29yZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwicGhvbmUiLCJ0ZXN0IiwicG9zdCIsInNlbmQiLCJsb2dpblJlcyIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiYm9keSIsImV4cGVjdCIsInN0YXR1cyIsInRvQmUiLCJzdWNjZXNzIiwiZGF0YSIsInRvQmVEZWZpbmVkIiwidG9rZW4iLCJ1c2VyIiwicmVnaXN0ZXJSZXMiLCJwcm9maWxlUmVzIiwiZ2V0Iiwic2V0IiwiYmFkTG9naW5SZXMiLCJ0b0JlVW5kZWZpbmVkIiwiZXJyb3IiLCJ1cGRhdGVSZXMiLCJwdXQiXSwic291cmNlcyI6WyJhdXRoLWlzc3Vlcy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcnRlc3QnKTtcbmNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uL3NlcnZlcicpO1xuXG4vLyBIZWxwZXIgdG8gZ2VuZXJhdGUgdW5pcXVlIHRlc3QgZW1haWxzXG5jb25zdCBnZXRVbmlxdWVFbWFpbCA9ICgpID0+IGB0ZXN0XyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9QGV4YW1wbGUuY29tYDtcblxuZGVzY3JpYmUoJ0F1dGhlbnRpY2F0aW9uIElzc3VlcyBUZXN0cycsICgpID0+IHtcbiAgbGV0IHRlc3RVc2VyO1xuICBcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgdGVzdFVzZXIgPSB7XG4gICAgICBlbWFpbDogZ2V0VW5pcXVlRW1haWwoKSxcbiAgICAgIHBhc3N3b3JkOiAnVGVzdFBhc3N3b3JkMTIzIScsXG4gICAgICBmaXJzdE5hbWU6ICdUZXN0JyxcbiAgICAgIGxhc3ROYW1lOiAnVXNlcicsXG4gICAgICBwaG9uZTogJzEyMzQ1Njc4OTAnXG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gSXNzdWUgIzEyOiBMb2dpbiBzeW5jIGVycm9yXG4gIGRlc2NyaWJlKCdJc3N1ZSAjMTI6IExvZ2luIHJldHVybnMgdXNlciBkYXRhIHByb3Blcmx5JywgKCkgPT4ge1xuICAgIHRlc3QoJ0xvZ2luIHJlc3BvbnNlIHNob3VsZCBpbmNsdWRlIGNvbXBsZXRlIHVzZXIgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFJlZ2lzdGVyIHVzZXIgZmlyc3RcbiAgICAgIGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQodGVzdFVzZXIpO1xuXG4gICAgICAvLyBMb2dpblxuICAgICAgY29uc3QgbG9naW5SZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvYXV0aC9sb2dpbicpXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBlbWFpbDogdGVzdFVzZXIuZW1haWwsXG4gICAgICAgICAgcGFzc3dvcmQ6IHRlc3RVc2VyLnBhc3N3b3JkXG4gICAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZygnTG9naW4gcmVzcG9uc2U6JywgSlNPTi5zdHJpbmdpZnkobG9naW5SZXMuYm9keSwgbnVsbCwgMikpO1xuXG4gICAgICBleHBlY3QobG9naW5SZXMuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QobG9naW5SZXMuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBmb3IgcHJvcGVyIHJlc3BvbnNlIHN0cnVjdHVyZVxuICAgICAgZXhwZWN0KGxvZ2luUmVzLmJvZHkuZGF0YSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChsb2dpblJlcy5ib2R5LmRhdGEudG9rZW4pLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobG9naW5SZXMuYm9keS5kYXRhLnVzZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIHVzZXIgZGF0YVxuICAgICAgZXhwZWN0KGxvZ2luUmVzLmJvZHkuZGF0YS51c2VyLmZpcnN0TmFtZSkudG9CZSh0ZXN0VXNlci5maXJzdE5hbWUpO1xuICAgICAgZXhwZWN0KGxvZ2luUmVzLmJvZHkuZGF0YS51c2VyLmxhc3ROYW1lKS50b0JlKHRlc3RVc2VyLmxhc3ROYW1lKTtcbiAgICAgIGV4cGVjdChsb2dpblJlcy5ib2R5LmRhdGEudXNlci5lbWFpbCkudG9CZSh0ZXN0VXNlci5lbWFpbCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIElzc3VlICMxMTogUmVnaXN0cmF0aW9uIGxvZ2luIHN0YXRlXG4gIGRlc2NyaWJlKCdJc3N1ZSAjMTE6IFJlZ2lzdHJhdGlvbiByZXR1cm5zIHByb3BlciBhdXRoIHN0YXRlJywgKCkgPT4ge1xuICAgIHRlc3QoJ1JlZ2lzdHJhdGlvbiBzaG91bGQgcmV0dXJuIHRva2VuIGFuZCB1c2VyIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZWdpc3RlclJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQodGVzdFVzZXIpO1xuXG4gICAgICBjb25zb2xlLmxvZygnUmVnaXN0ZXIgcmVzcG9uc2U6JywgSlNPTi5zdHJpbmdpZnkocmVnaXN0ZXJSZXMuYm9keSwgbnVsbCwgMikpO1xuXG4gICAgICBleHBlY3QocmVnaXN0ZXJSZXMuc3RhdHVzKS50b0JlKDIwMSk7XG4gICAgICBleHBlY3QocmVnaXN0ZXJSZXMuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgXG4gICAgICAvLyBDaGVjayByZXNwb25zZSBzdHJ1Y3R1cmVcbiAgICAgIGV4cGVjdChyZWdpc3RlclJlcy5ib2R5LmRhdGEpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVnaXN0ZXJSZXMuYm9keS5kYXRhLnRva2VuKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlZ2lzdGVyUmVzLmJvZHkuZGF0YS51c2VyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgdG9rZW4gd29ya3NcbiAgICAgIGNvbnN0IHByb2ZpbGVSZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS9hdXRoL3Byb2ZpbGUnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3JlZ2lzdGVyUmVzLmJvZHkuZGF0YS50b2tlbn1gKTtcblxuICAgICAgZXhwZWN0KHByb2ZpbGVSZXMuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QocHJvZmlsZVJlcy5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIElzc3VlICMxMDogQmFkIGxvZ2luIHN0YXRlXG4gIGRlc2NyaWJlKCdJc3N1ZSAjMTA6IEZhaWxlZCBsb2dpbiBzaG91bGQgbm90IHJldHVybiBhdXRoIGRhdGEnLCAoKSA9PiB7XG4gICAgdGVzdCgnQmFkIHBhc3N3b3JkIHNob3VsZCByZXR1cm4gZXJyb3Igd2l0aG91dCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFJlZ2lzdGVyIHVzZXIgZmlyc3RcbiAgICAgIGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQodGVzdFVzZXIpO1xuXG4gICAgICAvLyBUcnkgYmFkIGxvZ2luXG4gICAgICBjb25zdCBiYWRMb2dpblJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9hdXRoL2xvZ2luJylcbiAgICAgICAgLnNlbmQoe1xuICAgICAgICAgIGVtYWlsOiB0ZXN0VXNlci5lbWFpbCxcbiAgICAgICAgICBwYXNzd29yZDogJ3dyb25ncGFzc3dvcmQnXG4gICAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZygnQmFkIGxvZ2luIHJlc3BvbnNlOicsIEpTT04uc3RyaW5naWZ5KGJhZExvZ2luUmVzLmJvZHksIG51bGwsIDIpKTtcblxuICAgICAgZXhwZWN0KGJhZExvZ2luUmVzLnN0YXR1cykudG9CZSg0MDEpO1xuICAgICAgZXhwZWN0KGJhZExvZ2luUmVzLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoYmFkTG9naW5SZXMuYm9keS5kYXRhPy50b2tlbikudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGJhZExvZ2luUmVzLmJvZHkuZGF0YT8udXNlcikudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGJhZExvZ2luUmVzLmJvZHkuZXJyb3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIElzc3VlICM5OiBQcm9maWxlIHVwZGF0ZSBhdXRoZW50aWNhdGlvblxuICBkZXNjcmliZSgnSXNzdWUgIzk6IFByb2ZpbGUgdXBkYXRlIHNob3VsZCBtYWludGFpbiBhdXRoJywgKCkgPT4ge1xuICAgIHRlc3QoJ1Byb2ZpbGUgdXBkYXRlIHNob3VsZCBub3QgcmVxdWlyZSByZS1hdXRoZW50aWNhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFJlZ2lzdGVyIGFuZCBnZXQgdG9rZW5cbiAgICAgIGNvbnN0IHJlZ2lzdGVyUmVzID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2F1dGgvcmVnaXN0ZXInKVxuICAgICAgICAuc2VuZCh0ZXN0VXNlcik7XG5cbiAgICAgIGNvbnN0IHRva2VuID0gcmVnaXN0ZXJSZXMuYm9keS5kYXRhLnRva2VuO1xuXG4gICAgICAvLyBVcGRhdGUgcHJvZmlsZVxuICAgICAgY29uc3QgdXBkYXRlUmVzID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wdXQoJy9hcGkvYXV0aC9wcm9maWxlJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgZmlyc3ROYW1lOiAnVXBkYXRlZCcsXG4gICAgICAgICAgbGFzdE5hbWU6ICdOYW1lJ1xuICAgICAgICB9KTtcblxuICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZSByZXNwb25zZTonLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVSZXMuYm9keSwgbnVsbCwgMikpO1xuXG4gICAgICBleHBlY3QodXBkYXRlUmVzLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHVwZGF0ZVJlcy5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSBzdGlsbCBhdXRoZW50aWNhdGVkXG4gICAgICBjb25zdCBwcm9maWxlUmVzID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvYXV0aC9wcm9maWxlJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKTtcblxuICAgICAgZXhwZWN0KHByb2ZpbGVSZXMuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QocHJvZmlsZVJlcy5ib2R5LmRhdGEudXNlci5maXJzdE5hbWUpLnRvQmUoJ1VwZGF0ZWQnKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNwQyxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxXQUFXLENBQUM7O0FBRWhDO0FBQ0EsTUFBTUUsY0FBYyxHQUFHQSxDQUFBLEtBQU0sUUFBUUMsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxJQUFJQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUMs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