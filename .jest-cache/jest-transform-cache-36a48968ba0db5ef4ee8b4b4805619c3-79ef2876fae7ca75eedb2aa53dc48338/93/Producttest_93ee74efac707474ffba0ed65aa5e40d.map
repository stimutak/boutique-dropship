{"version":3,"names":["mongoose","require","Product","describe","test","productData","name","slug","description","shortDescription","price","category","wholesaler","email","productCode","cost","product","savedProduct","save","expect","toBe","crossSiteIntegration","enabled","referenceKey","testProduct","beforeEach","create","properties","chakra","element","publicData","toPublicJSON","toBeDefined","toBeUndefined","publicProducts","findPublic","toHaveLength","toObject","not","toHaveProperty","crossSiteData","getCrossSiteData","rejects","toThrow","duplicateProduct","indexes","collection","getIndexes","Object","keys","toContain"],"sources":["Product.test.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst Product = require('../../models/Product');\n\ndescribe('Product Model', () => {\n\n  describe('Basic Product Creation', () => {\n    test('should create a product with all required fields', async () => {\n      const productData = {\n        name: 'Amethyst Crystal',\n        slug: 'amethyst-crystal',\n        description: 'Beautiful purple amethyst for spiritual healing',\n        shortDescription: 'Purple amethyst crystal',\n        price: 29.99,\n        category: 'crystals',\n        wholesaler: {\n          name: 'Crystal Wholesale Co',\n          email: 'orders@crystalwholesale.com',\n          productCode: 'AME-001',\n          cost: 15.00\n        }\n      };\n\n      const product = new Product(productData);\n      const savedProduct = await product.save();\n\n      expect(savedProduct.name).toBe(productData.name);\n      expect(savedProduct.slug).toBe(productData.slug);\n      expect(savedProduct.wholesaler.name).toBe(productData.wholesaler.name);\n      expect(savedProduct.crossSiteIntegration.enabled).toBe(true);\n      expect(savedProduct.crossSiteIntegration.referenceKey).toBe(productData.slug);\n    });\n\n    test('should auto-generate referenceKey from slug when cross-site integration is enabled', async () => {\n      const product = new Product({\n        name: 'Rose Quartz',\n        slug: 'rose-quartz',\n        description: 'Pink crystal for love and healing',\n        shortDescription: 'Pink rose quartz',\n        price: 19.99,\n        category: 'crystals',\n        wholesaler: {\n          name: 'Crystal Wholesale Co',\n          email: 'orders@crystalwholesale.com',\n          productCode: 'RQ-001',\n          cost: 10.00\n        }\n      });\n\n      const savedProduct = await product.save();\n      expect(savedProduct.crossSiteIntegration.referenceKey).toBe('rose-quartz');\n    });\n  });\n\n  describe('Data Privacy Methods', () => {\n    let testProduct;\n\n    beforeEach(async () => {\n      testProduct = await Product.create({\n        name: 'Test Crystal',\n        slug: 'test-crystal',\n        description: 'Test description',\n        shortDescription: 'Test short description',\n        price: 25.00,\n        category: 'crystals',\n        wholesaler: {\n          name: 'Secret Wholesaler',\n          email: 'secret@wholesaler.com',\n          productCode: 'SECRET-001',\n          cost: 12.50\n        },\n        properties: {\n          chakra: ['crown'],\n          element: ['spirit']\n        }\n      });\n    });\n\n    test('toPublicJSON should exclude wholesaler information', () => {\n      const publicData = testProduct.toPublicJSON();\n      \n      expect(publicData.name).toBe('Test Crystal');\n      expect(publicData.price).toBe(25.00);\n      expect(publicData.properties).toBeDefined();\n      expect(publicData.wholesaler).toBeUndefined();\n    });\n\n    test('findPublic should return products without wholesaler info', async () => {\n      const publicProducts = await Product.findPublic();\n      \n      expect(publicProducts).toHaveLength(1);\n      expect(publicProducts[0].name).toBe('Test Crystal');\n      expect(publicProducts[0].toObject()).not.toHaveProperty('wholesaler');\n    });\n\n    test('getCrossSiteData should return only cross-site relevant fields', () => {\n      const crossSiteData = testProduct.getCrossSiteData();\n      \n      expect(crossSiteData.name).toBe('Test Crystal');\n      expect(crossSiteData.slug).toBe('test-crystal');\n      expect(crossSiteData.price).toBe(25.00);\n      expect(crossSiteData.properties).toBeDefined();\n      expect(crossSiteData.crossSiteIntegration).toBeDefined();\n      expect(crossSiteData.wholesaler).toBeUndefined();\n    });\n  });\n\n  describe('Validation', () => {\n    test('should require all mandatory fields', async () => {\n      const product = new Product({});\n      \n      await expect(product.save()).rejects.toThrow();\n    });\n\n    test('should enforce unique slug', async () => {\n      await Product.create({\n        name: 'First Product',\n        slug: 'unique-slug',\n        description: 'First description',\n        shortDescription: 'First short',\n        price: 10.00,\n        category: 'crystals',\n        wholesaler: {\n          name: 'Wholesaler',\n          email: 'test@wholesaler.com',\n          productCode: 'TEST-001',\n          cost: 5.00\n        }\n      });\n\n      const duplicateProduct = new Product({\n        name: 'Second Product',\n        slug: 'unique-slug',\n        description: 'Second description',\n        shortDescription: 'Second short',\n        price: 15.00,\n        category: 'crystals',\n        wholesaler: {\n          name: 'Wholesaler',\n          email: 'test@wholesaler.com',\n          productCode: 'TEST-002',\n          cost: 7.50\n        }\n      });\n\n      await expect(duplicateProduct.save()).rejects.toThrow();\n    });\n\n    test('should validate category enum', async () => {\n      const product = new Product({\n        name: 'Invalid Category Product',\n        slug: 'invalid-category',\n        description: 'Test description',\n        shortDescription: 'Test short',\n        price: 10.00,\n        category: 'invalid-category',\n        wholesaler: {\n          name: 'Wholesaler',\n          email: 'test@wholesaler.com',\n          productCode: 'TEST-001',\n          cost: 5.00\n        }\n      });\n\n      await expect(product.save()).rejects.toThrow();\n    });\n  });\n\n  describe('Indexes', () => {\n    test('should have proper indexes for performance', async () => {\n      const indexes = await Product.collection.getIndexes();\n      \n      expect(indexes).toHaveProperty('slug_1');\n      expect(indexes).toHaveProperty('category_1_isActive_1');\n      expect(Object.keys(indexes)).toContain('crossSiteIntegration.referenceKey_1');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}