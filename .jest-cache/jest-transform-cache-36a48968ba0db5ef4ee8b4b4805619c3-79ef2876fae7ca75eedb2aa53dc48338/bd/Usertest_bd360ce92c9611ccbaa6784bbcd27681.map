{"version":3,"names":["mongoose","require","User","describe","test","userData","email","password","firstName","lastName","user","savedUser","save","expect","toBe","not","create","isMatch","comparePassword","isNotMatch","duplicateUser","rejects","toThrow","testUser","beforeEach","addressData","type","street","city","state","zipCode","country","isDefault","addAddress","updatedUser","findById","_id","addresses","toHaveLength","defaultAddresses","filter","addr","defaultShipping","getDefaultShippingAddress","defaultBilling","getDefaultBillingAddress","newDefaultBilling","addressId","updateAddress","removeAddress","phone","publicData","toPublicJSON","toBeUndefined","__v","indexes","collection","getIndexes","toHaveProperty"],"sources":["User.test.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst User = require('../../models/User');\n\ndescribe('User Model', () => {\n\n  describe('User Creation and Authentication', () => {\n    test('should create a user with hashed password', async () => {\n      const userData = {\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe'\n      };\n\n      const user = new User(userData);\n      const savedUser = await user.save();\n\n      expect(savedUser.email).toBe('test@example.com');\n      expect(savedUser.password).not.toBe('password123'); // Should be hashed\n      expect(savedUser.firstName).toBe('John');\n      expect(savedUser.lastName).toBe('Doe');\n    });\n\n    test('should compare passwords correctly', async () => {\n      const user = await User.create({\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe'\n      });\n\n      const isMatch = await user.comparePassword('password123');\n      const isNotMatch = await user.comparePassword('wrongpassword');\n\n      expect(isMatch).toBe(true);\n      expect(isNotMatch).toBe(false);\n    });\n\n    test('should enforce unique email', async () => {\n      await User.create({\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe'\n      });\n\n      const duplicateUser = new User({\n        email: 'test@example.com',\n        password: 'password456',\n        firstName: 'Jane',\n        lastName: 'Smith'\n      });\n\n      await expect(duplicateUser.save()).rejects.toThrow();\n    });\n  });\n\n  describe('Address Management', () => {\n    let testUser;\n\n    beforeEach(async () => {\n      testUser = await User.create({\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe'\n      });\n    });\n\n    test('should add shipping address', async () => {\n      const addressData = {\n        type: 'shipping',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'CA',\n        zipCode: '12345',\n        country: 'US',\n        isDefault: true\n      };\n\n      await testUser.addAddress(addressData);\n      const updatedUser = await User.findById(testUser._id);\n\n      expect(updatedUser.addresses).toHaveLength(1);\n      expect(updatedUser.addresses[0].type).toBe('shipping');\n      expect(updatedUser.addresses[0].street).toBe('123 Main St');\n      expect(updatedUser.addresses[0].isDefault).toBe(true);\n    });\n\n    test('should add billing address', async () => {\n      const addressData = {\n        type: 'billing',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '456 Oak Ave',\n        city: 'Another Town',\n        state: 'NY',\n        zipCode: '67890',\n        country: 'US',\n        isDefault: true\n      };\n\n      await testUser.addAddress(addressData);\n      const updatedUser = await User.findById(testUser._id);\n\n      expect(updatedUser.addresses).toHaveLength(1);\n      expect(updatedUser.addresses[0].type).toBe('billing');\n      expect(updatedUser.addresses[0].city).toBe('Another Town');\n    });\n\n    test('should handle multiple addresses with default management', async () => {\n      // Add first shipping address as default\n      await testUser.addAddress({\n        type: 'shipping',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'CA',\n        zipCode: '12345',\n        country: 'US',\n        isDefault: true\n      });\n\n      // Add second shipping address as default (should unset first)\n      await testUser.addAddress({\n        type: 'shipping',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '456 Oak Ave',\n        city: 'Another Town',\n        state: 'NY',\n        zipCode: '67890',\n        country: 'US',\n        isDefault: true\n      });\n\n      const updatedUser = await User.findById(testUser._id);\n      const defaultAddresses = updatedUser.addresses.filter(addr => addr.isDefault);\n      \n      expect(updatedUser.addresses).toHaveLength(2);\n      expect(defaultAddresses).toHaveLength(1);\n      expect(defaultAddresses[0].city).toBe('Another Town');\n    });\n\n    test('getDefaultShippingAddress should return correct address', async () => {\n      await testUser.addAddress({\n        type: 'shipping',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'CA',\n        zipCode: '12345',\n        country: 'US',\n        isDefault: true\n      });\n\n      const defaultShipping = testUser.getDefaultShippingAddress();\n      expect(defaultShipping.city).toBe('Anytown');\n      expect(defaultShipping.type).toBe('shipping');\n    });\n\n    test('getDefaultBillingAddress should return billing or fallback to shipping', async () => {\n      // Add only shipping address\n      await testUser.addAddress({\n        type: 'shipping',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'CA',\n        zipCode: '12345',\n        country: 'US',\n        isDefault: true\n      });\n\n      const defaultBilling = testUser.getDefaultBillingAddress();\n      expect(defaultBilling.city).toBe('Anytown'); // Should fallback to shipping\n      expect(defaultBilling.type).toBe('shipping');\n\n      // Add billing address\n      await testUser.addAddress({\n        type: 'billing',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '456 Oak Ave',\n        city: 'Billing City',\n        state: 'NY',\n        zipCode: '67890',\n        country: 'US',\n        isDefault: true\n      });\n\n      const updatedUser = await User.findById(testUser._id);\n      const newDefaultBilling = updatedUser.getDefaultBillingAddress();\n      expect(newDefaultBilling.city).toBe('Billing City');\n      expect(newDefaultBilling.type).toBe('billing');\n    });\n\n    test('should update address', async () => {\n      await testUser.addAddress({\n        type: 'shipping',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'CA',\n        zipCode: '12345',\n        country: 'US'\n      });\n\n      const addressId = testUser.addresses[0]._id;\n      await testUser.updateAddress(addressId, {\n        street: '789 Updated St',\n        city: 'Updated City'\n      });\n\n      const updatedUser = await User.findById(testUser._id);\n      expect(updatedUser.addresses[0].street).toBe('789 Updated St');\n      expect(updatedUser.addresses[0].city).toBe('Updated City');\n    });\n\n    test('should remove address', async () => {\n      await testUser.addAddress({\n        type: 'shipping',\n        firstName: 'John',\n        lastName: 'Doe',\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'CA',\n        zipCode: '12345',\n        country: 'US'\n      });\n\n      expect(testUser.addresses).toHaveLength(1);\n      \n      const addressId = testUser.addresses[0]._id;\n      await testUser.removeAddress(addressId);\n\n      const updatedUser = await User.findById(testUser._id);\n      expect(updatedUser.addresses).toHaveLength(0);\n    });\n  });\n\n  describe('Data Privacy', () => {\n    test('toPublicJSON should exclude sensitive information', async () => {\n      const user = await User.create({\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe',\n        phone: '555-1234',\n        addresses: [{\n          type: 'shipping',\n          firstName: 'John',\n          lastName: 'Doe',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        }]\n      });\n\n      const publicData = user.toPublicJSON();\n\n      expect(publicData.email).toBe('test@example.com');\n      expect(publicData.firstName).toBe('John');\n      expect(publicData.addresses).toHaveLength(1);\n      expect(publicData.password).toBeUndefined();\n      expect(publicData.__v).toBeUndefined();\n    });\n  });\n\n  describe('Validation', () => {\n    test('should require all mandatory fields', async () => {\n      const user = new User({});\n      await expect(user.save()).rejects.toThrow();\n    });\n\n    test('should validate email format', async () => {\n      const user = new User({\n        email: 'invalid-email',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe'\n      });\n\n      // Note: Mongoose doesn't validate email format by default\n      // This would need additional validation middleware\n      expect(user.email).toBe('invalid-email');\n    });\n\n    test('should enforce minimum password length', async () => {\n      const user = new User({\n        email: 'test@example.com',\n        password: '123',\n        firstName: 'John',\n        lastName: 'Doe'\n      });\n\n      await expect(user.save()).rejects.toThrow();\n    });\n  });\n\n  describe('Indexes', () => {\n    test('should have proper indexes for performance', async () => {\n      const indexes = await User.collection.getIndexes();\n      \n      expect(indexes).toHaveProperty('email_1');\n      expect(indexes).toHaveProperty('isActive_1');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}