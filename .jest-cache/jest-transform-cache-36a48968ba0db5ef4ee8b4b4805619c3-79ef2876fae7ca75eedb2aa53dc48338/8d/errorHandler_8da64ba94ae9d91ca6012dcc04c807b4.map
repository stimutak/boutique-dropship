{"version":3,"names":["cov_1mdbgbws22","actualCoverage","logger","s","require","AppError","Error","constructor","message","statusCode","code","b","isOperational","f","status","startsWith","captureStackTrace","handleCastErrorDB","err","path","value","handleDuplicateFieldsDB","errmsg","match","handleValidationErrorDB","errors","Object","values","map","el","join","handleJWTError","handleJWTExpiredError","sendErrorDev","req","res","error","stack","url","originalUrl","method","ip","userAgent","get","json","success","details","sendErrorProd","globalErrorHandler","next","process","env","NODE_ENV","name","catchAsync","fn","catch","on","promise","exit","module","exports"],"sources":["errorHandler.js"],"sourcesContent":["const { logger } = require('../utils/logger');\n\n// Custom error class for application errors\nclass AppError extends Error {\n  constructor(message, statusCode, code = null, isOperational = true) {\n    super(message);\n    this.statusCode = statusCode;\n    this.code = code;\n    this.isOperational = isOperational;\n    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\n// Error handling for different error types\nconst handleCastErrorDB = (err) => {\n  const message = `Invalid ${err.path}: ${err.value}`;\n  return new AppError(message, 400, 'INVALID_ID');\n};\n\nconst handleDuplicateFieldsDB = (err) => {\n  const value = err.errmsg.match(/([\"'])(\\\\?.)*?\\1/)[0];\n  const message = `Duplicate field value: ${value}. Please use another value!`;\n  return new AppError(message, 400, 'DUPLICATE_FIELD');\n};\n\nconst handleValidationErrorDB = (err) => {\n  const errors = Object.values(err.errors).map(el => el.message);\n  const message = `Invalid input data. ${errors.join('. ')}`;\n  return new AppError(message, 400, 'VALIDATION_ERROR');\n};\n\nconst handleJWTError = () =>\n  new AppError('Invalid token. Please log in again!', 401, 'INVALID_TOKEN');\n\nconst handleJWTExpiredError = () =>\n  new AppError('Your token has expired! Please log in again.', 401, 'TOKEN_EXPIRED');\n\n// Send error response in development\nconst sendErrorDev = (err, req, res) => {\n  // Log error details\n  logger.error('Error in development:', {\n    error: err.message,\n    stack: err.stack,\n    url: req.originalUrl,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  return res.status(err.statusCode).json({\n    success: false,\n    error: {\n      code: err.code,\n      message: err.message,\n      stack: err.stack,\n      details: err\n    }\n  });\n};\n\n// Send error response in production\nconst sendErrorProd = (err, req, res) => {\n  // Log error details\n  logger.error('Production error:', {\n    error: err.message,\n    code: err.code,\n    url: req.originalUrl,\n    method: req.method,\n    ip: req.ip,\n    statusCode: err.statusCode\n  });\n\n  // Operational, trusted error: send message to client\n  if (err.isOperational) {\n    return res.status(err.statusCode).json({\n      success: false,\n      error: {\n        code: err.code,\n        message: err.message\n      }\n    });\n  }\n\n  // Programming or other unknown error: don't leak error details\n  logger.error('Unknown error:', {\n    error: err,\n    stack: err.stack\n  });\n\n  return res.status(500).json({\n    success: false,\n    error: {\n      code: 'INTERNAL_ERROR',\n      message: 'Something went wrong!'\n    }\n  });\n};\n\n// Global error handling middleware\nconst globalErrorHandler = (err, req, res, next) => {\n  err.statusCode = err.statusCode || 500;\n  err.status = err.status || 'error';\n\n  if (process.env.NODE_ENV === 'development') {\n    sendErrorDev(err, req, res);\n  } else {\n    let error = { ...err };\n    error.message = err.message;\n\n    // Handle specific error types\n    if (error.name === 'CastError') error = handleCastErrorDB(error);\n    if (error.code === 11000) error = handleDuplicateFieldsDB(error);\n    if (error.name === 'ValidationError') error = handleValidationErrorDB(error);\n    if (error.name === 'JsonWebTokenError') error = handleJWTError();\n    if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();\n\n    sendErrorProd(error, req, res);\n  }\n};\n\n// Async error wrapper\nconst catchAsync = (fn) => {\n  return (req, res, next) => {\n    fn(req, res, next).catch(next);\n  };\n};\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (err, promise) => {\n  logger.error('Unhandled Promise Rejection:', {\n    error: err.message,\n    stack: err.stack,\n    promise: promise\n  });\n  \n  // Close server gracefully\n  process.exit(1);\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (err) => {\n  logger.error('Uncaught Exception:', {\n    error: err.message,\n    stack: err.stack\n  });\n  \n  // Close server gracefully\n  process.exit(1);\n});\n\nmodule.exports = {\n  AppError,\n  globalErrorHandler,\n  catchAsync\n};"],"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","ignoreList":[]}