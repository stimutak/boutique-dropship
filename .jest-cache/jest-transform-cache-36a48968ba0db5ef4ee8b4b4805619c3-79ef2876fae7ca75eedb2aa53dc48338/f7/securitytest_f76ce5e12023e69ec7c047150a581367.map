{"version":3,"names":["request","require","express","session","MongoStore","mongoose","MongoMemoryServer","generateCSRFToken","csrfProtection","rateLimits","speedLimiter","sanitizeInput","securityHeaders","apiKeyAuth","describe","app","mongoServer","mongoUri","beforeAll","create","getUri","connection","readyState","connect","afterAll","disconnect","stop","beforeEach","use","secret","resave","saveUninitialized","store","mongoUrl","cookie","secure","httpOnly","json","test","get","req","res","message","response","expect","headers","toBe","toContain","toBeUndefined","post","body","maliciousPayload","email","$ne","password","$regex","send","user","query","$where","data","$set","admin","_where_","toBeDefined","_set_","csrfToken","toHaveLength","status","error","code","agent","csrfResponse","set","process","env","VALID_API_KEYS","afterEach","general","promises","i","push","responses","Promise","all","successfulResponses","filter","r","length","toBeLessThanOrEqual","auth","rateLimitedResponses","toBeGreaterThan","startTime","Date","now","endTime","duration","isEmail","withMessage","next","errors","validationResult","isEmpty","array","msg","isLength","min","matches","sanitized","sqlInjectionPayloads","payload","comment","xssPayloads","filename","params","access","traversalPayloads","encodeURIComponent","host","result","commandInjectionPayloads","size","JSON","stringify","largePayload","repeat","resolve","setTimeout","success","validEmail","invalidEmail","response1","response2","timeDiff","Math","abs","toBeLessThan","validationRules","weakPasswords","strongResponse"],"sources":["security.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo');\nconst mongoose = require('mongoose');\nconst { MongoMemoryServer } = require('mongodb-memory-server');\n\n// Import security middleware\nconst { \n  generateCSRFToken, \n  csrfProtection, \n  rateLimits, \n  speedLimiter, \n  sanitizeInput, \n  securityHeaders,\n  apiKeyAuth \n} = require('../../middleware/security');\n\ndescribe('Security Tests', () => {\n  let app;\n  let mongoServer;\n  let mongoUri;\n\n  beforeAll(async () => {\n    // Start in-memory MongoDB\n    mongoServer = await MongoMemoryServer.create();\n    mongoUri = mongoServer.getUri();\n    \n    // Only connect if not already connected\n    if (mongoose.connection.readyState === 0) {\n      await mongoose.connect(mongoUri);\n    }\n  });\n\n  afterAll(async () => {\n    if (mongoose.connection.readyState !== 0) {\n      await mongoose.disconnect();\n    }\n    await mongoServer.stop();\n  });\n\n  beforeEach(() => {\n    // Create test app\n    app = express();\n    \n    // Add session middleware\n    app.use(session({\n      secret: 'test-secret',\n      resave: false,\n      saveUninitialized: false,\n      store: MongoStore.create({ mongoUrl: mongoUri }),\n      cookie: { secure: false, httpOnly: true }\n    }));\n    \n    app.use(express.json());\n    app.use(securityHeaders);\n    app.use(sanitizeInput);\n    app.use(generateCSRFToken);\n  });\n\n  describe('Security Headers', () => {\n    test('should add security headers to responses', async () => {\n      app.get('/test', (req, res) => {\n        res.json({ message: 'test' });\n      });\n\n      const response = await request(app).get('/test');\n      \n      expect(response.headers['x-content-type-options']).toBe('nosniff');\n      expect(response.headers['x-frame-options']).toBe('DENY');\n      expect(response.headers['x-xss-protection']).toBe('1; mode=block');\n      expect(response.headers['referrer-policy']).toBe('strict-origin-when-cross-origin');\n      expect(response.headers['permissions-policy']).toContain('geolocation=()');\n      expect(response.headers['x-powered-by']).toBeUndefined();\n    });\n  });\n\n  describe('Input Sanitization', () => {\n    test('should sanitize MongoDB injection attempts', async () => {\n      app.post('/test', (req, res) => {\n        res.json({ body: req.body });\n      });\n\n      const maliciousPayload = {\n        email: { $ne: null },\n        password: { $regex: '.*' }\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(maliciousPayload);\n\n      expect(response.body.body.email).toBe('_ne_');\n      expect(response.body.body.password).toBe('_regex_');\n    });\n\n    test('should sanitize nested objects', async () => {\n      app.post('/test', (req, res) => {\n        res.json({ body: req.body });\n      });\n\n      const maliciousPayload = {\n        user: {\n          query: { $where: 'function() { return true; }' },\n          data: { $set: { admin: true } }\n        }\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(maliciousPayload);\n\n      expect(response.body.body.user.query._where_).toBeDefined();\n      expect(response.body.body.user.data._set_).toBeDefined();\n    });\n  });\n\n  describe('CSRF Protection', () => {\n    test('should generate CSRF token in session', async () => {\n      app.get('/csrf', (req, res) => {\n        res.json({ csrfToken: req.session.csrfToken });\n      });\n\n      const response = await request(app).get('/csrf');\n      \n      expect(response.body.csrfToken).toBeDefined();\n      expect(response.body.csrfToken).toHaveLength(64);\n    });\n\n    test('should reject POST requests without CSRF token', async () => {\n      app.post('/protected', csrfProtection, (req, res) => {\n        res.json({ message: 'success' });\n      });\n\n      const response = await request(app)\n        .post('/protected')\n        .send({ data: 'test' });\n\n      expect(response.status).toBe(403);\n      expect(response.body.error.code).toBe('CSRF_TOKEN_MISMATCH');\n    });\n\n    test('should accept POST requests with valid CSRF token', async () => {\n      // First get CSRF token\n      const agent = request.agent(app);\n      \n      app.get('/csrf', (req, res) => {\n        res.json({ csrfToken: req.session.csrfToken });\n      });\n      \n      app.post('/protected', csrfProtection, (req, res) => {\n        res.json({ message: 'success' });\n      });\n\n      const csrfResponse = await agent.get('/csrf');\n      const csrfToken = csrfResponse.body.csrfToken;\n\n      const response = await agent\n        .post('/protected')\n        .set('x-csrf-token', csrfToken)\n        .send({ data: 'test' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('success');\n    });\n\n    test('should allow GET requests without CSRF token', async () => {\n      app.get('/protected', csrfProtection, (req, res) => {\n        res.json({ message: 'success' });\n      });\n\n      const response = await request(app).get('/protected');\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('success');\n    });\n  });\n\n  describe('API Key Authentication', () => {\n    beforeEach(() => {\n      process.env.VALID_API_KEYS = 'test_key_1,test_key_2,test_key_3';\n    });\n\n    afterEach(() => {\n      delete process.env.VALID_API_KEYS;\n    });\n\n    test('should reject requests without API key', async () => {\n      app.get('/api-protected', apiKeyAuth, (req, res) => {\n        res.json({ message: 'success' });\n      });\n\n      const response = await request(app).get('/api-protected');\n\n      expect(response.status).toBe(401);\n      expect(response.body.error.code).toBe('API_KEY_REQUIRED');\n    });\n\n    test('should reject requests with invalid API key', async () => {\n      app.get('/api-protected', apiKeyAuth, (req, res) => {\n        res.json({ message: 'success' });\n      });\n\n      const response = await request(app)\n        .get('/api-protected')\n        .set('x-api-key', 'invalid_key');\n\n      expect(response.status).toBe(401);\n      expect(response.body.error.code).toBe('INVALID_API_KEY');\n    });\n\n    test('should accept requests with valid API key', async () => {\n      app.get('/api-protected', apiKeyAuth, (req, res) => {\n        res.json({ message: 'success' });\n      });\n\n      const response = await request(app)\n        .get('/api-protected')\n        .set('x-api-key', 'test_key_1');\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('success');\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    test('should enforce general rate limits', async () => {\n      app.use(rateLimits.general);\n      app.get('/test', (req, res) => {\n        res.json({ message: 'success' });\n      });\n\n      // Make requests up to the limit\n      const promises = [];\n      for (let i = 0; i < 100; i++) {\n        promises.push(request(app).get('/test'));\n      }\n      \n      const responses = await Promise.all(promises);\n      const successfulResponses = responses.filter(r => r.status === 200);\n      \n      expect(successfulResponses.length).toBeLessThanOrEqual(100);\n    });\n\n    test('should enforce auth rate limits', async () => {\n      app.use(rateLimits.auth);\n      app.post('/login', (req, res) => {\n        res.json({ message: 'login attempt' });\n      });\n\n      // Make requests up to the limit\n      const promises = [];\n      for (let i = 0; i < 15; i++) {\n        promises.push(request(app).post('/login').send({}));\n      }\n      \n      const responses = await Promise.all(promises);\n      const rateLimitedResponses = responses.filter(r => r.status === 429);\n      \n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Speed Limiting (Brute Force Protection)', () => {\n    test('should add delays after multiple requests', async () => {\n      app.use(speedLimiter);\n      app.post('/login', (req, res) => {\n        res.json({ message: 'login attempt' });\n      });\n\n      const startTime = Date.now();\n      \n      // Make multiple requests to trigger speed limiting\n      for (let i = 0; i < 8; i++) {\n        await request(app).post('/login').send({});\n      }\n      \n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      // Should take longer due to speed limiting delays\n      expect(duration).toBeGreaterThan(1000); // At least 1 second delay\n    });\n  });\n\n  describe('Input Validation', () => {\n    test('should validate email format', async () => {\n      const { body } = require('express-validator');\n      \n      app.post('/register', [\n        body('email').isEmail().withMessage('Invalid email format'),\n        (req, res, next) => {\n          const errors = require('express-validator').validationResult(req);\n          if (!errors.isEmpty()) {\n            return res.status(400).json({ errors: errors.array() });\n          }\n          next();\n        }\n      ], (req, res) => {\n        res.json({ message: 'valid' });\n      });\n\n      const response = await request(app)\n        .post('/register')\n        .send({ email: 'invalid-email' });\n\n      expect(response.status).toBe(400);\n      expect(response.body.errors[0].msg).toBe('Invalid email format');\n    });\n\n    test('should validate password strength', async () => {\n      const { body } = require('express-validator');\n      \n      app.post('/register', [\n        body('password')\n          .isLength({ min: 8 })\n          .withMessage('Password must be at least 8 characters')\n          .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])/)\n          .withMessage('Password must contain uppercase, lowercase, number, and special character'),\n        (req, res, next) => {\n          const errors = require('express-validator').validationResult(req);\n          if (!errors.isEmpty()) {\n            return res.status(400).json({ errors: errors.array() });\n          }\n          next();\n        }\n      ], (req, res) => {\n        res.json({ message: 'valid' });\n      });\n\n      const response = await request(app)\n        .post('/register')\n        .send({ password: 'weak' });\n\n      expect(response.status).toBe(400);\n      expect(response.body.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Penetration Testing Scenarios', () => {\n    test('should prevent SQL injection attempts', async () => {\n      app.post('/search', (req, res) => {\n        // Simulate a search endpoint that might be vulnerable\n        const query = req.body.query;\n        res.json({ query, sanitized: true });\n      });\n\n      const sqlInjectionPayloads = [\n        \"'; DROP TABLE users; --\",\n        \"' OR '1'='1\",\n        \"' UNION SELECT * FROM users --\",\n        \"admin'--\",\n        \"' OR 1=1#\"\n      ];\n\n      for (const payload of sqlInjectionPayloads) {\n        const response = await request(app)\n          .post('/search')\n          .send({ query: payload });\n\n        expect(response.status).toBe(200);\n        // The payload should be sanitized or handled safely\n        expect(response.body.query).toBeDefined();\n      }\n    });\n\n    test('should prevent XSS attempts', async () => {\n      app.post('/comment', (req, res) => {\n        const comment = req.body.comment;\n        res.json({ comment });\n      });\n\n      const xssPayloads = [\n        \"<script>alert('XSS')</script>\",\n        \"<img src=x onerror=alert('XSS')>\",\n        \"javascript:alert('XSS')\",\n        \"<svg onload=alert('XSS')>\",\n        \"';alert('XSS');//\"\n      ];\n\n      for (const payload of xssPayloads) {\n        const response = await request(app)\n          .post('/comment')\n          .send({ comment: payload });\n\n        expect(response.status).toBe(200);\n        // XSS payloads should be handled safely\n        expect(response.body.comment).toBeDefined();\n      }\n    });\n\n    test('should prevent directory traversal attacks', async () => {\n      app.get('/file/:filename', (req, res) => {\n        const filename = req.params.filename;\n        // Simulate file access (should be protected)\n        res.json({ filename, access: 'denied' });\n      });\n\n      const traversalPayloads = [\n        \"../../../etc/passwd\",\n        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"....//....//....//etc/passwd\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n        \"..%252f..%252f..%252fetc%252fpasswd\"\n      ];\n\n      for (const payload of traversalPayloads) {\n        const response = await request(app).get(`/file/${encodeURIComponent(payload)}`);\n        \n        expect(response.status).toBe(200);\n        expect(response.body.access).toBe('denied');\n      }\n    });\n\n    test('should prevent command injection attempts', async () => {\n      app.post('/ping', (req, res) => {\n        const host = req.body.host;\n        // Simulate a ping command (should be sanitized)\n        res.json({ host, result: 'sanitized' });\n      });\n\n      const commandInjectionPayloads = [\n        \"google.com; cat /etc/passwd\",\n        \"google.com && rm -rf /\",\n        \"google.com | nc -l 4444\",\n        \"google.com `whoami`\",\n        \"google.com $(cat /etc/passwd)\"\n      ];\n\n      for (const payload of commandInjectionPayloads) {\n        const response = await request(app)\n          .post('/ping')\n          .send({ host: payload });\n\n        expect(response.status).toBe(200);\n        expect(response.body.result).toBe('sanitized');\n      }\n    });\n\n    test('should handle large payload attacks', async () => {\n      app.post('/upload', (req, res) => {\n        res.json({ size: JSON.stringify(req.body).length });\n      });\n\n      // Create a large payload\n      const largePayload = {\n        data: 'A'.repeat(10000000) // 10MB of data\n      };\n\n      const response = await request(app)\n        .post('/upload')\n        .send(largePayload);\n\n      // Should either reject or handle gracefully\n      expect([200, 413, 400]).toContain(response.status);\n    });\n  });\n\n  describe('Authentication Security', () => {\n    test('should prevent timing attacks on login', async () => {\n      app.post('/login', async (req, res) => {\n        const { email, password } = req.body;\n        \n        // Simulate constant-time comparison\n        const startTime = Date.now();\n        \n        // Always perform some work regardless of user existence\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        const endTime = Date.now();\n        const duration = endTime - startTime;\n        \n        res.json({ \n          success: false, \n          message: 'Invalid credentials',\n          duration \n        });\n      });\n\n      const validEmail = 'user@example.com';\n      const invalidEmail = 'nonexistent@example.com';\n      \n      const response1 = await request(app)\n        .post('/login')\n        .send({ email: validEmail, password: 'wrong' });\n        \n      const response2 = await request(app)\n        .post('/login')\n        .send({ email: invalidEmail, password: 'wrong' });\n\n      // Response times should be similar to prevent timing attacks\n      const timeDiff = Math.abs(response1.body.duration - response2.body.duration);\n      expect(timeDiff).toBeLessThan(50); // Allow 50ms variance\n    });\n\n    test('should enforce password complexity', async () => {\n      const { validationRules } = require('../../middleware/security');\n      \n      app.post('/register', [\n        validationRules.password,\n        (req, res, next) => {\n          const errors = require('express-validator').validationResult(req);\n          if (!errors.isEmpty()) {\n            return res.status(400).json({ errors: errors.array() });\n          }\n          next();\n        }\n      ], (req, res) => {\n        res.json({ message: 'valid password' });\n      });\n\n      const weakPasswords = [\n        'password',\n        '12345678',\n        'Password',\n        'Password1',\n        'password1!'\n      ];\n\n      for (const password of weakPasswords) {\n        const response = await request(app)\n          .post('/register')\n          .send({ password });\n\n        expect(response.status).toBe(400);\n      }\n\n      // Test strong password\n      const strongResponse = await request(app)\n        .post('/register')\n        .send({ password: 'StrongP@ssw0rd!' });\n\n      expect(strongResponse.status).toBe(200);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}