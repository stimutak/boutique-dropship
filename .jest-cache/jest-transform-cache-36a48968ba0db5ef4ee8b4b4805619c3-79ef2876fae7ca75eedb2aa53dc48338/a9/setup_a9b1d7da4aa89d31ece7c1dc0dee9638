49c5e1e0ac5bc2eb0cfea027ab21740c
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');

// Import mocks before anything else
require('./helpers/mockServices');
let mongoServer;

// Setup before all tests
beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const mongoUri = mongoServer.getUri();

  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.JWT_SECRET = 'test-secret-key-for-testing';
  process.env.MONGODB_TEST_URI = mongoUri;

  // Connect to the in-memory database
  await mongoose.connect(mongoUri, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
}, 30000);

// Cleanup after each test
afterEach(async () => {
  if (mongoose.connection.readyState === 1) {
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      const collection = collections[key];
      await collection.deleteMany({});
    }
  }
});

// Cleanup after all tests
afterAll(async () => {
  if (mongoose.connection.readyState === 1) {
    await mongoose.connection.close();
  }
  if (mongoServer) {
    await mongoServer.stop();
  }
}, 30000);

// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  console.log('Unhandled Rejection at:', promise, 'reason:', reason);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJNb25nb01lbW9yeVNlcnZlciIsIm1vbmdvU2VydmVyIiwiYmVmb3JlQWxsIiwiY3JlYXRlIiwibW9uZ29VcmkiLCJnZXRVcmkiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJKV1RfU0VDUkVUIiwiTU9OR09EQl9URVNUX1VSSSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJhZnRlckVhY2giLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImNvbGxlY3Rpb25zIiwia2V5IiwiY29sbGVjdGlvbiIsImRlbGV0ZU1hbnkiLCJhZnRlckFsbCIsImNsb3NlIiwic3RvcCIsIm9uIiwicmVhc29uIiwicHJvbWlzZSIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJzZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5jb25zdCB7IE1vbmdvTWVtb3J5U2VydmVyIH0gPSByZXF1aXJlKCdtb25nb2RiLW1lbW9yeS1zZXJ2ZXInKTtcblxuLy8gSW1wb3J0IG1vY2tzIGJlZm9yZSBhbnl0aGluZyBlbHNlXG5yZXF1aXJlKCcuL2hlbHBlcnMvbW9ja1NlcnZpY2VzJyk7XG5cbmxldCBtb25nb1NlcnZlcjtcblxuLy8gU2V0dXAgYmVmb3JlIGFsbCB0ZXN0c1xuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgLy8gU3RhcnQgaW4tbWVtb3J5IE1vbmdvREIgaW5zdGFuY2VcbiAgbW9uZ29TZXJ2ZXIgPSBhd2FpdCBNb25nb01lbW9yeVNlcnZlci5jcmVhdGUoKTtcbiAgY29uc3QgbW9uZ29VcmkgPSBtb25nb1NlcnZlci5nZXRVcmkoKTtcbiAgXG4gIC8vIFNldCB0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlc1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0LXNlY3JldC1rZXktZm9yLXRlc3RpbmcnO1xuICBwcm9jZXNzLmVudi5NT05HT0RCX1RFU1RfVVJJID0gbW9uZ29Vcmk7XG4gIFxuICAvLyBDb25uZWN0IHRvIHRoZSBpbi1tZW1vcnkgZGF0YWJhc2VcbiAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdChtb25nb1VyaSwge1xuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWVcbiAgfSk7XG59LCAzMDAwMCk7XG5cbi8vIENsZWFudXAgYWZ0ZXIgZWFjaCB0ZXN0XG5hZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICBpZiAobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgY29uc3QgY29sbGVjdGlvbnMgPSBtb25nb29zZS5jb25uZWN0aW9uLmNvbGxlY3Rpb25zO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbGxlY3Rpb25zKSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gY29sbGVjdGlvbnNba2V5XTtcbiAgICAgIGF3YWl0IGNvbGxlY3Rpb24uZGVsZXRlTWFueSh7fSk7XG4gICAgfVxuICB9XG59KTtcblxuLy8gQ2xlYW51cCBhZnRlciBhbGwgdGVzdHNcbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgaWYgKG1vbmdvb3NlLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgfVxuICBpZiAobW9uZ29TZXJ2ZXIpIHtcbiAgICBhd2FpdCBtb25nb1NlcnZlci5zdG9wKCk7XG4gIH1cbn0sIDMwMDAwKTtcblxuLy8gSGFuZGxlIHVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbnNcbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChyZWFzb24sIHByb21pc2UpID0+IHtcbiAgY29uc29sZS5sb2coJ1VuaGFuZGxlZCBSZWplY3Rpb24gYXQ6JywgcHJvbWlzZSwgJ3JlYXNvbjonLCByZWFzb24pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDcEMsTUFBTTtFQUFFQztBQUFrQixDQUFDLEdBQUdELE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQzs7QUFFOUQ7QUFDQUEsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBRWpDLElBQUlFLFdBQVc7O0FBRWY7QUFDQUMsU0FBUyxDQUFDLFlBQVk7RUFDcEI7RUFDQUQsV0FBVyxHQUFHLE1BQU1ELGlCQUFpQixDQUFDRyxNQUFNLENBQUMsQ0FBQztFQUM5QyxNQUFNQyxRQUFRLEdBQUdILFdBQVcsQ0FBQ0ksTUFBTSxDQUFDLENBQUM7O0VBRXJDO0VBQ0FDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxRQUFRLEdBQUcsTUFBTTtFQUM3QkYsT0FBTyxDQUFDQyxHQUFHLENBQUNFLFVBQVUsR0FBRyw2QkFBNkI7RUFDdERILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxnQkFBZ0IsR0FBR04sUUFBUTs7RUFFdkM7RUFDQSxNQUFNTixRQUFRLENBQUNhLE9BQU8sQ0FBQ1AsUUFBUSxFQUFFO0lBQy9CUSxlQUFlLEVBQUUsSUFBSTtJQUNyQkMsa0JBQWtCLEVBQUU7RUFDdEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxFQUFFLEtBQUssQ0FBQzs7QUFFVDtBQUNBQyxTQUFTLENBQUMsWUFBWTtFQUNwQixJQUFJaEIsUUFBUSxDQUFDaUIsVUFBVSxDQUFDQyxVQUFVLEtBQUssQ0FBQyxFQUFFO0lBQ3hDLE1BQU1DLFdBQVcsR0FBR25CLFFBQVEsQ0FBQ2lCLFVBQVUsQ0FBQ0UsV0FBVztJQUNuRCxLQUFLLE1BQU1DLEdBQUcsSUFBSUQsV0FBVyxFQUFFO01BQzdCLE1BQU1FLFVBQVUsR0FBR0YsV0FBVyxDQUFDQyxHQUFHLENBQUM7TUFDbkMsTUFBTUMsVUFBVSxDQUFDQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakM7RUFDRjtBQUNGLENBQUMsQ0FBQzs7QUFFRjtBQUNBQyxRQUFRLENBQUMsWUFBWTtFQUNuQixJQUFJdkIsUUFBUSxDQUFDaUIsVUFBVSxDQUFDQyxVQUFVLEtBQUssQ0FBQyxFQUFFO0lBQ3hDLE1BQU1sQixRQUFRLENBQUNpQixVQUFVLENBQUNPLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0VBQ0EsSUFBSXJCLFdBQVcsRUFBRTtJQUNmLE1BQU1BLFdBQVcsQ0FBQ3NCLElBQUksQ0FBQyxDQUFDO0VBQzFCO0FBQ0YsQ0FBQyxFQUFFLEtBQUssQ0FBQzs7QUFFVDtBQUNBakIsT0FBTyxDQUFDa0IsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUNDLE1BQU0sRUFBRUMsT0FBTyxLQUFLO0VBQ3BEQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRUYsT0FBTyxFQUFFLFNBQVMsRUFBRUQsTUFBTSxDQUFDO0FBQ3BFLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==