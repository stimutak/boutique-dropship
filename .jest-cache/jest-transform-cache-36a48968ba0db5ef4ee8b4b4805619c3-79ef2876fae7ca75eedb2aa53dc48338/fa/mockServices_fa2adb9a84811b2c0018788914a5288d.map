{"version":3,"names":["_getJestObj","mock","createTransport","jest","fn","sendMail","Promise","resolve","messageId","accepted","rejected","createMollieClient","payments","create","id","status","amount","value","currency","description","redirectUrl","webhookUrl","_links","checkout","href","get","list","_embedded","count","methods","logger","info","error","warn","debug","getCircuitBreakerStatus","payment","state","failures","email","wholesaler","executeWithCircuitBreaker","service","operation","sendOrderNotification","success","retryFailedNotifications","retriedCount","sendWelcomeEmail","sendOrderConfirmation","sendPasswordResetEmail","require","module","exports"],"sources":["mockServices.js"],"sourcesContent":["// Mock all external services for testing\n\n// Mock nodemailer\njest.mock('nodemailer', () => ({\n  createTransport: jest.fn(() => ({\n    sendMail: jest.fn(() => Promise.resolve({\n      messageId: 'test-message-id',\n      accepted: ['test@example.com'],\n      rejected: []\n    }))\n  }))\n}));\n\n// Mock Mollie client\njest.mock('@mollie/api-client', () => ({\n  createMollieClient: jest.fn(() => ({\n    payments: {\n      create: jest.fn(() => Promise.resolve({\n        id: 'tr_test123',\n        status: 'open',\n        amount: { value: '10.00', currency: 'EUR' },\n        description: 'Test payment',\n        redirectUrl: 'https://example.com/return',\n        webhookUrl: 'https://example.com/webhook',\n        _links: {\n          checkout: { href: 'https://checkout.mollie.com/test' }\n        }\n      })),\n      get: jest.fn(() => Promise.resolve({\n        id: 'tr_test123',\n        status: 'paid',\n        amount: { value: '10.00', currency: 'EUR' }\n      })),\n      list: jest.fn(() => Promise.resolve({\n        _embedded: { payments: [] },\n        count: 0\n      }))\n    },\n    methods: {\n      list: jest.fn(() => Promise.resolve([\n        { id: 'creditcard', description: 'Credit card' },\n        { id: 'ideal', description: 'iDEAL' }\n      ]))\n    }\n  }))\n}));\n\n// Mock logger\njest.mock('../../utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\n// Mock error recovery\njest.mock('../../utils/errorRecovery', () => ({\n  getCircuitBreakerStatus: jest.fn(() => ({\n    payment: { state: 'closed', failures: 0 },\n    email: { state: 'closed', failures: 0 },\n    wholesaler: { state: 'closed', failures: 0 }\n  })),\n  executeWithCircuitBreaker: jest.fn((service, operation) => operation())\n}));\n\n// Mock wholesaler notification service\njest.mock('../../utils/wholesalerNotificationService', () => ({\n  sendOrderNotification: jest.fn(() => Promise.resolve({\n    success: true,\n    messageId: 'test-notification-id'\n  })),\n  retryFailedNotifications: jest.fn(() => Promise.resolve({\n    success: true,\n    retriedCount: 0\n  }))\n}));\n\n// Mock email service\njest.mock('../../utils/emailService', () => ({\n  sendWelcomeEmail: jest.fn(() => Promise.resolve({\n    success: true,\n    messageId: 'welcome-email-id'\n  })),\n  sendOrderConfirmation: jest.fn(() => Promise.resolve({\n    success: true,\n    messageId: 'order-confirmation-id'\n  })),\n  sendPasswordResetEmail: jest.fn(() => Promise.resolve({\n    success: true,\n    messageId: 'password-reset-id'\n  }))\n}));\n\nmodule.exports = {\n  // Export mocked services for direct access in tests if needed\n};"],"mappings":"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","ignoreList":[]}