7b79f80e5ac70fded52254c1b58437a1
// Mock mongodb-memory-server to prevent library dependency issues
_getJestObj().mock('mongodb-memory-server', () => ({
  MongoMemoryServer: {
    create: jest.fn().mockResolvedValue({
      getUri: jest.fn().mockReturnValue('mongodb://localhost:27017/test'),
      stop: jest.fn().mockResolvedValue(true)
    })
  }
}));

// Mock mongoose before requiring models
_getJestObj().mock('mongoose', () => {
  const mockConnect = jest.fn().mockResolvedValue(true);
  const mockClose = jest.fn().mockResolvedValue(true);

  // Mock ObjectId constructor
  const MockObjectId = jest.fn();
  MockObjectId.toString = jest.fn().mockReturnValue('507f1f77bcf86cd799439011');
  const mockModel = name => {
    const MockedModel = jest.fn();

    // Static methods
    MockedModel.findById = jest.fn();
    MockedModel.findOne = jest.fn();
    MockedModel.findOneAndUpdate = jest.fn();
    MockedModel.find = jest.fn();
    MockedModel.create = jest.fn();
    MockedModel.deleteMany = jest.fn();
    MockedModel.deleteOne = jest.fn();
    MockedModel.findByIdAndUpdate = jest.fn();

    // Instance methods
    MockedModel.prototype.save = jest.fn().mockResolvedValue(true);
    MockedModel.prototype.toObject = jest.fn().mockReturnValue({});
    MockedModel.prototype.toPublicJSON = jest.fn().mockReturnValue({});
    return MockedModel;
  };

  // Mock Schema constructor
  const MockSchema = jest.fn().mockImplementation((definition, options) => {
    const schema = {
      index: jest.fn(),
      methods: {},
      statics: {},
      pre: jest.fn(),
      post: jest.fn(),
      plugin: jest.fn()
    };
    return schema;
  });

  // Set up Schema.Types
  MockSchema.Types = {
    ObjectId: MockObjectId,
    String: String,
    Number: Number,
    Date: Date,
    Boolean: Boolean,
    Array: Array,
    Mixed: Object
  };
  return {
    connect: mockConnect,
    connection: {
      close: mockClose,
      readyState: 1,
      collections: {}
    },
    model: mockModel,
    Schema: MockSchema
  };
});

// Import models after mocking mongoose

// Mock the auth middleware
_getJestObj().mock('../../middleware/auth', () => ({
  authenticateToken: (req, res, next) => {
    req.user = null; // Default to guest user
    next();
  }
}));

// Mock the CSRF middleware
_getJestObj().mock('../../middleware/sessionCSRF', () => ({
  validateCSRFToken: (req, res, next) => {
    next(); // Skip CSRF validation in tests
  }
}));

// Mock cart service
_getJestObj().mock('../../services/cartService', () => {
  return {
    getCartWithPerformanceOptimization: jest.fn(),
    updateCartOptimistically: jest.fn(),
    mergeCartsWithConflictResolution: jest.fn()
  };
});
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment node
 */

const request = require('supertest');
const express = require('express');
const session = require('express-session');
const Product = require('../../models/Product');
const User = require('../../models/User');
const Cart = require('../../models/Cart');
const cartRoutes = require('../../routes/cart');
const cartService = require('../../services/cartService');

// Create test app
const createTestApp = () => {
  const app = express();

  // Session middleware for testing
  app.use(session({
    secret: 'test-secret',
    resave: false,
    saveUninitialized: true,
    cookie: {
      secure: false,
      httpOnly: false,
      maxAge: 1000 * 60 * 60
    }
  }));
  app.use(express.json());
  app.use('/api/cart', cartRoutes);
  return app;
};
describe('Cart Fixes - Session Management', () => {
  let app;
  let testProduct;
  let testCart;
  beforeAll(async () => {
    app = createTestApp();
  });
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();

    // Mock test product
    testProduct = {
      _id: '507f1f77bcf86cd799439011',
      name: 'Test Crystal',
      slug: 'test-crystal',
      price: 29.99,
      category: 'crystals',
      isActive: true,
      toPublicJSON: () => ({
        _id: '507f1f77bcf86cd799439011',
        name: 'Test Crystal',
        price: 29.99,
        category: 'crystals',
        isActive: true
      })
    };

    // Mock test cart
    testCart = {
      _id: '507f1f77bcf86cd799439012',
      sessionId: 'guest_1234567890_abcdef123',
      items: [],
      save: jest.fn().mockResolvedValue(true),
      addItem: jest.fn(),
      removeItem: jest.fn(),
      updateItem: jest.fn()
    };

    // Setup default Product model mocks
    Product.findById = jest.fn().mockImplementation(id => ({
      select: jest.fn().mockResolvedValue({
        ...testProduct,
        toPublicJSON: testProduct.toPublicJSON
      })
    }));

    // Setup default Cart model mocks
    Cart.findOneAndUpdate = jest.fn().mockResolvedValue(testCart);
    Cart.findOne = jest.fn().mockResolvedValue(testCart);
    Cart.find = jest.fn().mockResolvedValue([testCart]);
    Cart.deleteMany = jest.fn().mockResolvedValue({
      deletedCount: 0
    });
    Cart.deleteOne = jest.fn().mockResolvedValue({
      deletedCount: 1
    });
    Cart.findByIdAndUpdate = jest.fn().mockResolvedValue(testCart);

    // Mock Cart constructor
    global.Cart = jest.fn().mockImplementation(data => ({
      ...testCart,
      ...data,
      save: jest.fn().mockResolvedValue(true)
    }));

    // Assign static methods to the global Cart
    Object.assign(global.Cart, Cart);

    // Setup cart service mocks
    cartService.getCartWithPerformanceOptimization.mockResolvedValue({
      type: 'guest',
      cart: testCart,
      sessionId: 'guest_1234567890_abcdef123'
    });
  });
  describe('Session ID Management', () => {
    it('should create new session when no session ID provided', async () => {
      const response = await request(app).get('/api/cart').expect(200);
      expect(response.body.success).toBe(true);
      expect(Cart.findOneAndUpdate).toHaveBeenCalled();
    });
    it('should use provided session ID from header', async () => {
      const sessionId = 'guest_1234567890_testid123';
      const response = await request(app).get('/api/cart').set('x-guest-session-id', sessionId).expect(200);
      expect(response.body.success).toBe(true);
      expect(Cart.findOneAndUpdate).toHaveBeenCalledWith({
        sessionId
      }, expect.any(Object), expect.any(Object));
    });
    it('should clean up duplicate carts for same session', async () => {
      // Mock multiple carts for same session
      const duplicateCarts = [{
        ...testCart,
        _id: 'cart1',
        updatedAt: new Date('2023-01-01')
      }, {
        ...testCart,
        _id: 'cart2',
        updatedAt: new Date('2023-01-02')
      }];
      Cart.find.mockResolvedValue(duplicateCarts);
      const response = await request(app).get('/api/cart').set('x-guest-session-id', 'guest_1234567890_testid123').expect(200);
      expect(response.body.success).toBe(true);
      expect(Cart.deleteOne).toHaveBeenCalled();
    });
  });
  describe('Cart Item Deletion', () => {
    it('should successfully remove item from cart', async () => {
      // Mock cart with items
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 2,
          price: 29.99
        }]
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValueOnce({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_1234567890_testid123'
      }).mockResolvedValueOnce({
        type: 'guest',
        cart: {
          ...testCart,
          items: []
        },
        sessionId: 'guest_1234567890_testid123'
      });
      const response = await request(app).delete('/api/cart/remove').set('x-guest-session-id', 'guest_1234567890_testid123').send({
        productId: testProduct._id
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item removed from cart');
      expect(Cart.findByIdAndUpdate).toHaveBeenCalled();
    });
    it('should successfully update item quantity to zero (remove)', async () => {
      // Mock cart with items
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 2,
          price: 29.99
        }]
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValueOnce({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_1234567890_testid123'
      }).mockResolvedValueOnce({
        type: 'guest',
        cart: {
          ...testCart,
          items: []
        },
        sessionId: 'guest_1234567890_testid123'
      });
      const response = await request(app).put('/api/cart/update').set('x-guest-session-id', 'guest_1234567890_testid123').send({
        productId: testProduct._id,
        quantity: 0
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Item removed from cart');
      expect(Cart.findByIdAndUpdate).toHaveBeenCalled();
    });
    it('should successfully clear entire cart', async () => {
      // Mock cart with items
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 2,
          price: 29.99
        }]
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_1234567890_testid123'
      });
      Cart.deleteMany.mockResolvedValue({
        deletedCount: 1
      });
      const response = await request(app).delete('/api/cart/clear').set('x-guest-session-id', 'guest_1234567890_testid123').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Cart cleared');
      expect(response.body.data.cart.items).toEqual([]);
      expect(response.body.cartItemCount).toBe(0);
      expect(Cart.deleteMany).toHaveBeenCalled();
    });
  });
  describe('Guest Session Reset', () => {
    it('should reset guest session successfully', async () => {
      Cart.deleteMany.mockResolvedValue({
        deletedCount: 1
      });
      const response = await request(app).post('/api/cart/reset-guest-session').set('x-guest-session-id', 'guest_1234567890_oldid123').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Guest cart session reset successfully');
      expect(response.body.data.sessionId).toMatch(/^guest_\d+_[a-z0-9]+$/);
      expect(response.body.data.cart.items).toEqual([]);
      expect(Cart.deleteMany).toHaveBeenCalledWith({
        sessionId: 'guest_1234567890_oldid123'
      });
    });
    it('should reject session reset for authenticated users', async () => {
      // Mock authenticated user
      const authMiddleware = require('../../middleware/auth');
      authMiddleware.authenticateToken = (req, res, next) => {
        req.user = {
          _id: 'user123',
          email: 'test@example.com'
        };
        next();
      };
      const response = await request(app).post('/api/cart/reset-guest-session').expect(400);
      expect(response.body.success).toBe(false);
      expect(response.body.error.code).toBe('NOT_GUEST_USER');
    });
  });
  describe('Cart Persistence Issues', () => {
    it('should not carry over items from previous sessions', async () => {
      // First request with one session
      const firstSessionId = 'guest_1234567890_session1';
      const firstCart = {
        ...testCart,
        sessionId: firstSessionId,
        items: [{
          product: testProduct._id,
          quantity: 1,
          price: 29.99
        }]
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValueOnce({
        type: 'guest',
        cart: firstCart,
        sessionId: firstSessionId
      });
      const firstResponse = await request(app).get('/api/cart').set('x-guest-session-id', firstSessionId).expect(200);
      expect(firstResponse.body.data.cart.items).toHaveLength(1);

      // Second request with different session should have empty cart
      const secondSessionId = 'guest_1234567890_session2';
      const secondCart = {
        ...testCart,
        sessionId: secondSessionId,
        items: []
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValueOnce({
        type: 'guest',
        cart: secondCart,
        sessionId: secondSessionId
      });
      const secondResponse = await request(app).get('/api/cart').set('x-guest-session-id', secondSessionId).expect(200);
      expect(secondResponse.body.data.cart.items).toHaveLength(0);
      expect(secondResponse.body.data.cart.isEmpty).toBe(true);
    });
    it('should handle atomic cart updates to prevent race conditions', async () => {
      const cartWithItems = {
        ...testCart,
        items: [{
          product: testProduct._id,
          quantity: 1,
          price: 29.99
        }]
      };
      cartService.getCartWithPerformanceOptimization.mockResolvedValue({
        type: 'guest',
        cart: cartWithItems,
        sessionId: 'guest_1234567890_testid123'
      });

      // Mock successful atomic update
      Cart.findByIdAndUpdate.mockResolvedValue({
        ...cartWithItems,
        items: [{
          product: testProduct._id,
          quantity: 3,
          price: 29.99
        }]
      });
      const response = await request(app).put('/api/cart/update').set('x-guest-session-id', 'guest_1234567890_testid123').send({
        productId: testProduct._id,
        quantity: 3
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(Cart.findByIdAndUpdate).toHaveBeenCalledWith(testCart._id, expect.objectContaining({
        items: expect.any(Array),
        updatedAt: expect.any(Date)
      }), {
        new: true
      });
    });
  });
});
describe('Cart Fixes - User/Guest Transition', () => {
  let app;
  let testUser;
  let testProduct;
  beforeAll(async () => {
    app = createTestApp();
  });
  beforeEach(() => {
    jest.clearAllMocks();
    testUser = {
      _id: '507f1f77bcf86cd799439013',
      email: 'test@example.com',
      cart: {
        items: [],
        updatedAt: new Date()
      },
      save: jest.fn().mockResolvedValue(true)
    };
    testProduct = {
      _id: '507f1f77bcf86cd799439011',
      name: 'Test Crystal',
      price: 29.99,
      isActive: true,
      toPublicJSON: () => ({
        _id: '507f1f77bcf86cd799439011',
        name: 'Test Crystal',
        price: 29.99,
        isActive: true
      })
    };

    // Setup mocks
    User.findById = jest.fn().mockResolvedValue(testUser);
    Product.findById = jest.fn().mockImplementation(() => ({
      select: jest.fn().mockResolvedValue(testProduct),
      lean: jest.fn().mockResolvedValue(testProduct)
    }));
    cartService.getCartWithPerformanceOptimization.mockResolvedValue({
      type: 'user',
      cart: testUser.cart,
      user: testUser
    });
    cartService.mergeCartsWithConflictResolution.mockResolvedValue({
      mergedItems: 1,
      conflicts: [],
      duration: 50
    });
  });
  describe('Cart Merge on Login', () => {
    it('should merge guest cart with user cart on login', async () => {
      // Mock authenticated user
      const authMiddleware = require('../../middleware/auth');
      authMiddleware.authenticateToken = (req, res, next) => {
        req.user = testUser;
        next();
      };
      const guestCartItems = [{
        productId: testProduct._id,
        quantity: 2
      }];
      const response = await request(app).post('/api/cart/merge').send({
        guestCartItems,
        sessionId: 'guest_1234567890_testid123'
      }).expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.message).toContain('Successfully merged');
      expect(cartService.mergeCartsWithConflictResolution).toHaveBeenCalledWith(testUser._id, guestCartItems, 'guest_1234567890_testid123');
    });
    it('should clean up guest cart after successful merge', async () => {
      // Mock authenticated user
      const authMiddleware = require('../../middleware/auth');
      authMiddleware.authenticateToken = (req, res, next) => {
        req.user = testUser;
        next();
      };
      Cart.findOne = jest.fn().mockResolvedValue({
        sessionId: 'guest_1234567890_testid123',
        items: [{
          product: testProduct._id,
          quantity: 1,
          price: 29.99
        }]
      });
      Cart.deleteOne = jest.fn().mockResolvedValue({
        deletedCount: 1
      });
      const response = await request(app).post('/api/cart/merge').send({
        guestCartItems: [],
        sessionId: 'guest_1234567890_testid123'
      }).expect(200);
      expect(response.body.success).toBe(true);
      // The merge should trigger cleanup of guest cart
      expect(cartService.mergeCartsWithConflictResolution).toHaveBeenCalled();
    });
  });
  describe('Cart Clear on Logout', () => {
    it('should clear user cart and create new guest session', async () => {
      // Test that after logout, a new guest session is created
      const response = await request(app).post('/api/cart/reset-guest-session').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data.sessionId).toMatch(/^guest_\d+_[a-z0-9]+$/);
      expect(response.body.data.cart.items).toEqual([]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,