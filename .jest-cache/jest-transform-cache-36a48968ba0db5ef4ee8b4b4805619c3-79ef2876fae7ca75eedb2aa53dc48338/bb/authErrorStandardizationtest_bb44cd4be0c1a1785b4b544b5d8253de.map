{"version":3,"names":["_getJestObj","mock","validateCSRFToken","req","res","next","jest","require","request","express","mongoose","bcrypt","User","authRoutes","i18nMiddleware","errorResponse","globalErrorHandler","describe","app","beforeAll","connect","process","env","MONGODB_TEST_URI","useNewUrlParser","useUnifiedTopology","afterAll","connection","close","beforeEach","use","json","session","csrfToken","deleteMany","test","response","post","send","email","password","firstName","lastName","expect","body","toMatchObject","success","error","code","message","details","any","Array","console","log","JSON","stringify","emailError","find","d","field","toBeDefined","toContain","passwordError","create","hash","set","toEqual","isActive","String","arrayContaining","objectContaining","stringContaining","token","authToken","testUser","user","put"],"sources":["authErrorStandardization.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst User = require('../models/User');\nconst authRoutes = require('../routes/auth');\nconst { i18nMiddleware } = require('../utils/i18n');\nconst { errorResponse } = require('../utils/errorHandler');\nconst { globalErrorHandler } = require('../middleware/errorHandler');\n\n// Mock the validateCSRFToken middleware\njest.mock('../middleware/sessionCSRF', () => ({\n  validateCSRFToken: (req, res, next) => next()\n}));\n\ndescribe('Auth Routes Error Standardization', () => {\n  let app;\n\n  beforeAll(async () => {\n    // Connect to test database\n    await mongoose.connect(process.env.MONGODB_TEST_URI || 'mongodb://localhost:27017/test-boutique', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n  });\n\n  afterAll(async () => {\n    await mongoose.connection.close();\n  });\n\n  beforeEach(async () => {\n    app = express();\n    app.use(express.json());\n    app.use(i18nMiddleware);\n    app.use(errorResponse);\n    \n    // Mock session for CSRF\n    app.use((req, res, next) => {\n      req.session = { csrfToken: 'test-token' };\n      next();\n    });\n    \n    app.use('/api/auth', authRoutes);\n    app.use(globalErrorHandler);\n\n    // Clear users collection\n    await User.deleteMany({});\n  });\n\n  describe('Registration errors', () => {\n    test('should return validation error with proper format', async () => {\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'invalid-email',\n          password: '123', // Too short\n          firstName: '',\n          lastName: ''\n        })\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: expect.any(Array)\n        }\n      });\n\n      // Debug: log the response to see actual structure\n      console.log('Response body:', JSON.stringify(response.body, null, 2));\n\n      // Check specific validation errors\n      const emailError = response.body.error.details && response.body.error.details.find(d => d.field === 'email');\n      expect(emailError).toBeDefined();\n      expect(emailError.message).toContain('email');\n\n      const passwordError = response.body.error.details.find(d => d.field === 'password');\n      expect(passwordError).toBeDefined();\n      expect(passwordError.message).toContain('at least');\n    });\n\n    test('should return USER_EXISTS error in Spanish', async () => {\n      // Create existing user\n      await User.create({\n        email: 'existing@example.com',\n        password: await bcrypt.hash('password123', 10),\n        firstName: 'Test',\n        lastName: 'User'\n      });\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .set('x-locale', 'es')\n        .send({\n          email: 'existing@example.com',\n          password: 'password123',\n          firstName: 'New',\n          lastName: 'User'\n        })\n        .expect(409);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          code: 'USER_EXISTS',\n          message: 'Ya existe un usuario con este correo electrónico'\n        }\n      });\n    });\n\n    test('should return USER_EXISTS error in Arabic', async () => {\n      // Create existing user\n      await User.create({\n        email: 'existing@example.com',\n        password: await bcrypt.hash('password123', 10),\n        firstName: 'Test',\n        lastName: 'User'\n      });\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .set('x-locale', 'ar')\n        .send({\n          email: 'existing@example.com',\n          password: 'password123',\n          firstName: 'New',\n          lastName: 'User'\n        })\n        .expect(409);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          code: 'USER_EXISTS',\n          message: 'يوجد مستخدم بهذا البريد الإلكتروني بالفعل'\n        }\n      });\n    });\n  });\n\n  describe('Login errors', () => {\n    test('should return INVALID_CREDENTIALS error', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'nonexistent@example.com',\n          password: 'wrongpassword'\n        })\n        .expect(401);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    });\n\n    test('should return INVALID_CREDENTIALS error in French', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .set('x-locale', 'fr')\n        .send({\n          email: 'nonexistent@example.com',\n          password: 'wrongpassword'\n        })\n        .expect(401);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Email ou mot de passe invalide'\n        }\n      });\n    });\n\n    test('should return error for disabled account', async () => {\n      // Create disabled user\n      await User.create({\n        email: 'disabled@example.com',\n        password: await bcrypt.hash('password123', 10),\n        firstName: 'Test',\n        lastName: 'User',\n        isActive: false\n      });\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'disabled@example.com',\n          password: 'password123'\n        })\n        .expect(403);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'ACCOUNT_DISABLED',\n          message: expect.any(String)\n        }\n      });\n    });\n  });\n\n  describe('Password reset errors', () => {\n    test('should return validation error for invalid email', async () => {\n      const response = await request(app)\n        .post('/api/auth/forgot-password')\n        .send({\n          email: 'not-an-email'\n        })\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: expect.arrayContaining([\n            expect.objectContaining({\n              field: 'email',\n              message: expect.stringContaining('email')\n            })\n          ])\n        }\n      });\n    });\n\n    test('should return error for invalid reset token', async () => {\n      const response = await request(app)\n        .post('/api/auth/reset-password')\n        .send({\n          token: 'invalid-token',\n          password: 'newpassword123'\n        })\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'INVALID_RESET_TOKEN',\n          message: expect.any(String)\n        }\n      });\n    });\n  });\n\n  describe('Profile update errors', () => {\n    let authToken;\n    let testUser;\n\n    beforeEach(async () => {\n      // Create test user\n      testUser = await User.create({\n        email: 'test@example.com',\n        password: await bcrypt.hash('password123', 10),\n        firstName: 'Test',\n        lastName: 'User'\n      });\n\n      // Mock authentication\n      app.use((req, res, next) => {\n        req.user = testUser;\n        next();\n      });\n    });\n\n    test('should return validation error for invalid profile data', async () => {\n      const response = await request(app)\n        .put('/api/auth/profile')\n        .send({\n          firstName: '', // Empty name\n          email: 'invalid-email' // Invalid email\n        })\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: expect.any(Array)\n        }\n      });\n    });\n\n    test('should return USER_EXISTS error when email is taken', async () => {\n      // Create another user with target email\n      await User.create({\n        email: 'taken@example.com',\n        password: await bcrypt.hash('password123', 10),\n        firstName: 'Another',\n        lastName: 'User'\n      });\n\n      const response = await request(app)\n        .put('/api/auth/profile')\n        .send({\n          email: 'taken@example.com'\n        })\n        .expect(409);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'EMAIL_IN_USE',\n          message: expect.any(String)\n        }\n      });\n    });\n  });\n\n  describe('RTL language support in errors', () => {\n    test('should return Hebrew error messages', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .set('x-locale', 'he')\n        .send({\n          email: 'wrong@example.com',\n          password: 'wrongpass'\n        })\n        .expect(401);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'אימייל או סיסמה לא תקינים'\n        }\n      });\n    });\n\n    test('should handle Arabic validation errors', async () => {\n      const response = await request(app)\n        .post('/api/auth/register')\n        .set('x-locale', 'ar')\n        .send({\n          email: 'test@example.com',\n          password: '123', // Too short\n          firstName: 'Test',\n          lastName: 'User'\n        })\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'بيانات الإدخال غير صالحة'\n        }\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}