{"version":3,"names":["express","require","router","Router","processPendingNotifications","processOrderNotifications","Order","get","req","res","json","success","message","timestamp","Date","toISOString","endpoints","post","result","data","processed","successCount","errorCount","results","status","error","orderId","params","orderNumber","pendingOrders","find","$or","select","summary","map","order","_id","orderDate","createdAt","paymentStatus","payment","pendingWholesalers","items","filter","item","wholesaler","notified","email","wholesalerName","name","wholesalerEmail","productCode","count","length","orders","findById","wholesalerStatus","notifiedAt","wholesalers","module","exports"],"sources":["wholesalers.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { processPendingNotifications, processOrderNotifications } = require('../utils/wholesalerNotificationService');\nconst Order = require('../models/Order');\n\n// GET /api/wholesalers/test\n// Test endpoint to verify the system is working\nrouter.get('/test', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Wholesaler notification system is active',\n    timestamp: new Date().toISOString(),\n    endpoints: [\n      'POST /api/wholesalers/process-notifications - Process all pending notifications',\n      'POST /api/wholesalers/notify/:orderId - Process notifications for specific order',\n      'GET /api/wholesalers/pending - Get orders with pending notifications',\n      'GET /api/wholesalers/status/:orderId - Get notification status for order'\n    ]\n  });\n});\n\n// POST /api/wholesalers/process-notifications\n// Process all pending wholesaler notifications\nrouter.post('/process-notifications', async (req, res) => {\n  try {\n    const result = await processPendingNotifications();\n    \n    if (result.success) {\n      res.json({\n        success: true,\n        message: 'Notification processing completed',\n        data: {\n          processed: result.processed,\n          successCount: result.successCount || 0,\n          errorCount: result.errorCount || 0,\n          results: result.results || []\n        }\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// POST /api/wholesalers/notify/:orderId\n// Process notifications for a specific order\nrouter.post('/notify/:orderId', async (req, res) => {\n  try {\n    const { orderId } = req.params;\n    const result = await processOrderNotifications(orderId);\n    \n    if (result.success) {\n      res.json({\n        success: true,\n        message: result.message || 'Order notifications processed',\n        data: {\n          orderNumber: result.orderNumber,\n          results: result.results || []\n        }\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// GET /api/wholesalers/pending\n// Get list of orders with pending wholesaler notifications\nrouter.get('/pending', async (req, res) => {\n  try {\n    const pendingOrders = await Order.find({\n      $or: [\n        { 'payment.status': 'paid' },\n        { status: 'processing' }\n      ],\n      'items.wholesaler.notified': false\n    }).select('orderNumber createdAt status payment.status items.wholesaler');\n    \n    const summary = pendingOrders.map(order => ({\n      orderId: order._id,\n      orderNumber: order.orderNumber,\n      orderDate: order.createdAt,\n      status: order.status,\n      paymentStatus: order.payment.status,\n      pendingWholesalers: order.items\n        .filter(item => !item.wholesaler.notified && item.wholesaler.email)\n        .map(item => ({\n          wholesalerName: item.wholesaler.name,\n          wholesalerEmail: item.wholesaler.email,\n          productCode: item.wholesaler.productCode\n        }))\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        count: pendingOrders.length,\n        orders: summary\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// GET /api/wholesalers/status/:orderId\n// Get wholesaler notification status for a specific order\nrouter.get('/status/:orderId', async (req, res) => {\n  try {\n    const { orderId } = req.params;\n    const order = await Order.findById(orderId).select('orderNumber items.wholesaler');\n    \n    if (!order) {\n      return res.status(404).json({\n        success: false,\n        error: 'Order not found'\n      });\n    }\n    \n    const wholesalerStatus = order.items.map(item => ({\n      wholesalerName: item.wholesaler.name,\n      wholesalerEmail: item.wholesaler.email,\n      productCode: item.wholesaler.productCode,\n      notified: item.wholesaler.notified,\n      notifiedAt: item.wholesaler.notifiedAt\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        orderNumber: order.orderNumber,\n        wholesalers: wholesalerStatus\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}