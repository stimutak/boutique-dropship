{"version":3,"names":["request","require","app","Product","Order","connectDB","clearDB","closeDB","describe","agent","testProduct","csrfToken","beforeAll","afterAll","beforeEach","create","name","slug","description","price","category","images","url","alt","inventory","inStock","quantity","csrfRes","get","body","test","cartRes","post","set","send","productId","_id","expect","status","toBe","success","cart","items","toHaveLength","orderData","guestInfo","firstName","lastName","email","phone","shippingAddress","street","city","state","zipCode","country","billingAddress","orderRes","order","toBeDefined","total","orderId","paymentRes","findById","paymentStatus","invalidOrderData","res","error","code","details","length","toBeGreaterThan","cartRes1","sessionCookie","headers","agent2","csrfRes2","csrfToken2","cartRes2","product","toString","save","sessionInfo","isGuest","hasCart"],"sources":["checkout.test.js"],"sourcesContent":["const request = require('supertest');\nconst app = require('../../server');\nconst Product = require('../../models/Product');\nconst Order = require('../../models/Order');\nconst { connectDB, clearDB, closeDB } = require('../setup/testDb');\n\ndescribe('Checkout Flow Integration Tests', () => {\n  let agent;\n  let testProduct;\n  let csrfToken;\n\n  beforeAll(async () => {\n    await connectDB();\n  });\n\n  afterAll(async () => {\n    await closeDB();\n  });\n\n  beforeEach(async () => {\n    await clearDB();\n    agent = request.agent(app);\n    \n    // Create test product\n    testProduct = await Product.create({\n      name: 'Test Crystal',\n      slug: 'test-crystal',\n      description: 'A test crystal product',\n      price: 29.99,\n      category: 'crystals',\n      images: [{\n        url: 'https://example.com/crystal.jpg',\n        alt: 'Test Crystal'\n      }],\n      inventory: {\n        inStock: true,\n        quantity: 10\n      }\n    });\n\n    // Get CSRF token\n    const csrfRes = await agent.get('/api/csrf-token');\n    csrfToken = csrfRes.body.csrfToken;\n  });\n\n  describe('Guest Checkout', () => {\n    test('should complete full guest checkout flow', async () => {\n      // 1. Add to cart\n      const cartRes = await agent\n        .post('/api/cart/add')\n        .set('X-CSRF-Token', csrfToken)\n        .send({\n          productId: testProduct._id,\n          quantity: 2\n        });\n      \n      expect(cartRes.status).toBe(200);\n      expect(cartRes.body.success).toBe(true);\n      expect(cartRes.body.cart.items).toHaveLength(1);\n      expect(cartRes.body.cart.items[0].quantity).toBe(2);\n\n      // 2. Create order\n      const orderData = {\n        items: [{\n          productId: testProduct._id,\n          quantity: 2,\n          price: testProduct.price\n        }],\n        guestInfo: {\n          firstName: 'Test',\n          lastName: 'Customer',\n          email: 'test@example.com',\n          phone: '+33 6 12 34 56 78'\n        },\n        shippingAddress: {\n          firstName: 'Test',\n          lastName: 'Customer',\n          street: '123 Test Street',\n          city: 'Paris',\n          state: 'IDF',\n          zipCode: '75001',\n          country: 'FR'\n        },\n        billingAddress: {\n          firstName: 'Test',\n          lastName: 'Customer',\n          street: '123 Test Street',\n          city: 'Paris',\n          state: 'IDF',\n          zipCode: '75001',\n          country: 'FR'\n        }\n      };\n\n      const orderRes = await agent\n        .post('/api/orders')\n        .set('X-CSRF-Token', csrfToken)\n        .send(orderData);\n      \n      expect(orderRes.status).toBe(201);\n      expect(orderRes.body.success).toBe(true);\n      expect(orderRes.body.order).toBeDefined();\n      expect(orderRes.body.order.total).toBe(59.98 + 5.99 + 8.17); // items + shipping + tax\n      \n      const orderId = orderRes.body.order._id;\n\n      // 3. Complete demo payment\n      const paymentRes = await agent\n        .post(`/api/payments/demo-complete/${orderId}`)\n        .set('X-CSRF-Token', csrfToken)\n        .send({});\n      \n      expect(paymentRes.status).toBe(200);\n      expect(paymentRes.body.success).toBe(true);\n      expect(paymentRes.body.order.status).toBe('processing');\n\n      // 4. Verify order status\n      const order = await Order.findById(orderId);\n      expect(order.status).toBe('processing');\n      expect(order.paymentStatus).toBe('paid');\n    });\n\n    test('should validate guest information', async () => {\n      const invalidOrderData = {\n        items: [{\n          productId: testProduct._id,\n          quantity: 1,\n          price: testProduct.price\n        }],\n        guestInfo: {\n          firstName: '',  // Missing required field\n          lastName: 'Customer',\n          email: 'invalid-email', // Invalid email\n          phone: '123' // Too short\n        },\n        shippingAddress: {\n          firstName: 'Test',\n          lastName: 'Customer',\n          street: '',  // Missing required field\n          city: 'Paris',\n          state: 'IDF',\n          zipCode: '75001',\n          country: 'FR'\n        }\n      };\n\n      const res = await agent\n        .post('/api/orders')\n        .set('X-CSRF-Token', csrfToken)\n        .send(invalidOrderData);\n      \n      expect(res.status).toBe(400);\n      expect(res.body.success).toBe(false);\n      expect(res.body.error.code).toBe('VALIDATION_ERROR');\n      expect(res.body.error.details).toBeDefined();\n      expect(res.body.error.details.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Cart Persistence', () => {\n    test('should persist cart across sessions', async () => {\n      // Add to cart\n      await agent\n        .post('/api/cart/add')\n        .set('X-CSRF-Token', csrfToken)\n        .send({\n          productId: testProduct._id,\n          quantity: 1\n        });\n\n      // Get cart\n      const cartRes1 = await agent\n        .get('/api/cart')\n        .set('X-CSRF-Token', csrfToken);\n      \n      expect(cartRes1.body.cart.items).toHaveLength(1);\n      const sessionCookie = cartRes1.headers['set-cookie'];\n\n      // Create new agent with same session\n      const agent2 = request.agent(app);\n      \n      // Get new CSRF token but use same session\n      const csrfRes2 = await agent2\n        .get('/api/csrf-token')\n        .set('Cookie', sessionCookie);\n      \n      const csrfToken2 = csrfRes2.body.csrfToken;\n\n      // Get cart with new agent\n      const cartRes2 = await agent2\n        .get('/api/cart')\n        .set('X-CSRF-Token', csrfToken2)\n        .set('Cookie', sessionCookie);\n      \n      expect(cartRes2.body.cart.items).toHaveLength(1);\n      expect(cartRes2.body.cart.items[0].product._id).toBe(testProduct._id.toString());\n    });\n  });\n\n  describe('Inventory Management', () => {\n    test('should prevent ordering out of stock items', async () => {\n      // Set product out of stock\n      testProduct.inventory.inStock = false;\n      testProduct.inventory.quantity = 0;\n      await testProduct.save();\n\n      const res = await agent\n        .post('/api/cart/add')\n        .set('X-CSRF-Token', csrfToken)\n        .send({\n          productId: testProduct._id,\n          quantity: 1\n        });\n      \n      expect(res.status).toBe(400);\n      expect(res.body.error.code).toBe('PRODUCT_UNAVAILABLE');\n    });\n\n    test('should prevent ordering more than available quantity', async () => {\n      testProduct.inventory.quantity = 5;\n      await testProduct.save();\n\n      const res = await agent\n        .post('/api/cart/add')\n        .set('X-CSRF-Token', csrfToken)\n        .send({\n          productId: testProduct._id,\n          quantity: 10\n        });\n      \n      expect(res.status).toBe(400);\n      expect(res.body.error.code).toBe('INSUFFICIENT_STOCK');\n    });\n  });\n\n  describe('Session and CSRF', () => {\n    test('should reject requests without CSRF token', async () => {\n      const res = await agent\n        .post('/api/cart/add')\n        .send({\n          productId: testProduct._id,\n          quantity: 1\n        });\n      \n      expect(res.status).toBe(403);\n      expect(res.body.error.code).toBe('CSRF_ERROR');\n    });\n\n    test('should provide session info in CSRF endpoint', async () => {\n      const res = await agent.get('/api/csrf-token');\n      \n      expect(res.body.success).toBe(true);\n      expect(res.body.csrfToken).toBeDefined();\n      expect(res.body.sessionInfo).toBeDefined();\n      expect(res.body.sessionInfo.isGuest).toBe(true);\n      expect(res.body.sessionInfo.hasCart).toBe(false);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}