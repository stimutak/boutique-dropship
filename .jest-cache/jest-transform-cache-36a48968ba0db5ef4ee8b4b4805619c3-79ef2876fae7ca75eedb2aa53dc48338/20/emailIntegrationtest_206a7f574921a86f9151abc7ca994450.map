{"version":3,"names":["_getJestObj","mock","mockEmailService","createMollieClient","jest","fn","payments","get","mockResolvedValue","id","status","amount","value","currency","paidAt","details","cardNumber","require","request","express","mongoose","sendOrderConfirmation","success","messageId","sendPaymentReceipt","sendOrderStatusUpdate","sendWelcomeEmail","sendPasswordResetEmail","sendWholesalerNotification","User","Order","Product","authRoutes","orderRoutes","paymentRoutes","app","use","json","describe","testUser","testProduct","authToken","beforeEach","deleteMany","clearAllMocks","create","name","slug","description","shortDescription","price","category","isActive","wholesaler","email","productCode","cost","password","firstName","lastName","preferences","notifications","emailPreferences","orderConfirmations","paymentReceipts","orderUpdates","promotionalEmails","welcomeEmails","jwt","sign","userId","_id","process","env","JWT_SECRET","it","userData","response","post","send","expect","body","toBe","toHaveBeenCalledWith","objectContaining","not","toHaveBeenCalled","orderData","guestInfo","items","productId","quantity","shippingAddress","street","city","state","zipCode","country","billingAddress","console","log","JSON","stringify","customerName","arrayContaining","productName","set","save","testOrder","customer","product","notified","subtotal","tax","shipping","total","payment","method","molliePaymentId","orderNumber","paymentMethod","put","trackingNumber","resetToken","any","String","resetUrl","stringContaining"],"sources":["emailIntegration.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst mongoose = require('mongoose');\n\n// Mock email service BEFORE importing routes\nconst mockEmailService = {\n  sendOrderConfirmation: jest.fn().mockResolvedValue({ success: true, messageId: 'test-id' }),\n  sendPaymentReceipt: jest.fn().mockResolvedValue({ success: true, messageId: 'test-id' }),\n  sendOrderStatusUpdate: jest.fn().mockResolvedValue({ success: true, messageId: 'test-id' }),\n  sendWelcomeEmail: jest.fn().mockResolvedValue({ success: true, messageId: 'test-id' }),\n  sendPasswordResetEmail: jest.fn().mockResolvedValue({ success: true, messageId: 'test-id' }),\n  sendWholesalerNotification: jest.fn().mockResolvedValue({ success: true, messageId: 'test-id' })\n};\n\njest.mock('../../utils/emailService', () => mockEmailService);\n\nconst User = require('../../models/User');\nconst Order = require('../../models/Order');\nconst Product = require('../../models/Product');\nconst authRoutes = require('../../routes/auth');\nconst orderRoutes = require('../../routes/orders');\nconst paymentRoutes = require('../../routes/payments');\n\n// Mock Mollie client\njest.mock('@mollie/api-client', () => ({\n  createMollieClient: jest.fn(() => ({\n    payments: {\n      get: jest.fn().mockResolvedValue({\n        id: 'tr_test123',\n        status: 'paid',\n        amount: { value: '29.99', currency: 'USD' },\n        paidAt: '2023-12-01T10:00:00Z',\n        details: { cardNumber: '**** 1234' }\n      })\n    }\n  }))\n}));\n\nconst app = express();\napp.use(express.json());\napp.use('/api/auth', authRoutes);\napp.use('/api/orders', orderRoutes);\napp.use('/api/payments', paymentRoutes);\n\ndescribe('Email Integration Tests', () => {\n  let testUser;\n  let testProduct;\n  let authToken;\n\n  beforeEach(async () => {\n    // Clear database\n    await User.deleteMany({});\n    await Order.deleteMany({});\n    await Product.deleteMany({});\n    \n    // Clear mock calls\n    jest.clearAllMocks();\n\n    // Create test product\n    testProduct = await Product.create({\n      name: 'Test Crystal',\n      slug: 'test-crystal',\n      description: 'A test crystal for healing',\n      shortDescription: 'Test crystal for healing',\n      price: 29.99,\n      category: 'crystals',\n      isActive: true,\n      wholesaler: {\n        name: 'Test Wholesaler',\n        email: 'wholesaler@test.com',\n        productCode: 'WS-001',\n        cost: 15.00\n      }\n    });\n\n    // Create test user\n    testUser = await User.create({\n      email: 'test@example.com',\n      password: 'password123',\n      firstName: 'Test',\n      lastName: 'User',\n      preferences: {\n        notifications: true,\n        emailPreferences: {\n          orderConfirmations: true,\n          paymentReceipts: true,\n          orderUpdates: true,\n          promotionalEmails: false,\n          welcomeEmails: true\n        }\n      }\n    });\n\n    // Generate auth token\n    const jwt = require('jsonwebtoken');\n    authToken = jwt.sign({ userId: testUser._id }, process.env.JWT_SECRET);\n  });\n\n  describe('User Registration Email', () => {\n    it('should send welcome email on user registration', async () => {\n      const userData = {\n        email: 'newuser@example.com',\n        password: 'password123',\n        firstName: 'New',\n        lastName: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(mockEmailService.sendWelcomeEmail).toHaveBeenCalledWith(\n        'newuser@example.com',\n        expect.objectContaining({\n          firstName: 'New',\n          email: 'newuser@example.com'\n        })\n      );\n    });\n\n    it('should not send welcome email if user opts out', async () => {\n      const userData = {\n        email: 'newuser@example.com',\n        password: 'password123',\n        firstName: 'New',\n        lastName: 'User',\n        preferences: {\n          emailPreferences: {\n            welcomeEmails: false\n          }\n        }\n      };\n\n      await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(201);\n\n      expect(mockEmailService.sendWelcomeEmail).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Order Confirmation Emails', () => {\n    it('should send order confirmation email for guest checkout', async () => {\n      const orderData = {\n        guestInfo: {\n          email: 'guest@example.com',\n          firstName: 'Guest',\n          lastName: 'User'\n        },\n        items: [{\n          productId: testProduct._id,\n          quantity: 2\n        }],\n        shippingAddress: {\n          firstName: 'Guest',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        },\n        billingAddress: {\n          firstName: 'Guest',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        }\n      };\n\n      const response = await request(app)\n        .post('/api/orders')\n        .send(orderData);\n      \n      if (response.status !== 201) {\n        console.log('Guest checkout error:', JSON.stringify(response.body, null, 2));\n      }\n      \n      expect(response.status).toBe(201);\n\n      expect(response.body.success).toBe(true);\n      expect(mockEmailService.sendOrderConfirmation).toHaveBeenCalledWith(\n        'guest@example.com',\n        expect.objectContaining({\n          customerName: 'Guest User',\n          items: expect.arrayContaining([\n            expect.objectContaining({\n              productName: 'Test Crystal',\n              quantity: 2,\n              price: 29.99\n            })\n          ])\n        })\n      );\n    });\n\n    it('should send order confirmation email for registered user', async () => {\n      const orderData = {\n        items: [{\n          productId: testProduct._id,\n          quantity: 1\n        }],\n        shippingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        },\n        billingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        }\n      };\n\n      const response = await request(app)\n        .post('/api/orders/registered')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(orderData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(mockEmailService.sendOrderConfirmation).toHaveBeenCalledWith(\n        'test@example.com',\n        expect.objectContaining({\n          customerName: 'Test User'\n        })\n      );\n    });\n\n    it('should not send order confirmation if user opts out', async () => {\n      // Update user preferences\n      testUser.preferences.emailPreferences.orderConfirmations = false;\n      await testUser.save();\n\n      const orderData = {\n        items: [{\n          productId: testProduct._id,\n          quantity: 1\n        }],\n        shippingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        },\n        billingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        }\n      };\n\n      await request(app)\n        .post('/api/orders/registered')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(orderData)\n        .expect(201);\n\n      expect(mockEmailService.sendOrderConfirmation).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Payment Receipt and Wholesaler Notification Emails', () => {\n    let testOrder;\n\n    beforeEach(async () => {\n      // Create test order\n      testOrder = await Order.create({\n        customer: testUser._id,\n        items: [{\n          product: testProduct._id,\n          quantity: 1,\n          price: 29.99,\n          wholesaler: {\n            name: 'Test Wholesaler',\n            email: 'wholesaler@test.com',\n            productCode: 'WS-001',\n            notified: false\n          }\n        }],\n        shippingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        },\n        billingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        },\n        subtotal: 29.99,\n        tax: 2.40,\n        shipping: 0,\n        total: 32.39,\n        payment: {\n          method: 'card',\n          status: 'pending',\n          molliePaymentId: 'tr_test123'\n        }\n      });\n    });\n\n    it('should send payment receipt and wholesaler notification on successful payment', async () => {\n      const response = await request(app)\n        .post('/api/payments/webhook')\n        .send({ id: 'tr_test123' })\n        .expect(200);\n\n      // Check payment receipt email\n      expect(mockEmailService.sendPaymentReceipt).toHaveBeenCalledWith(\n        'test@example.com',\n        expect.objectContaining({\n          orderNumber: testOrder.orderNumber,\n          customerName: 'Test User',\n          total: 32.39,\n          paymentMethod: 'Credit/Debit Card'\n        })\n      );\n\n      // Check wholesaler notification\n      expect(mockEmailService.sendWholesalerNotification).toHaveBeenCalledWith(\n        'wholesaler@test.com',\n        expect.objectContaining({\n          orderNumber: testOrder.orderNumber,\n          shippingAddress: expect.objectContaining({\n            firstName: 'Test',\n            lastName: 'User'\n          })\n        })\n      );\n    });\n\n    it('should not send payment receipt if user opts out', async () => {\n      // Update user preferences\n      testUser.preferences.emailPreferences.paymentReceipts = false;\n      await testUser.save();\n\n      await request(app)\n        .post('/api/payments/webhook')\n        .send({ id: 'tr_test123' })\n        .expect(200);\n\n      expect(mockEmailService.sendPaymentReceipt).not.toHaveBeenCalled();\n      // Wholesaler notification should still be sent\n      expect(mockEmailService.sendWholesalerNotification).toHaveBeenCalled();\n    });\n  });\n\n  describe('Order Status Update Emails', () => {\n    let testOrder;\n\n    beforeEach(async () => {\n      testOrder = await Order.create({\n        customer: testUser._id,\n        items: [{\n          product: testProduct._id,\n          quantity: 1,\n          price: 29.99,\n          wholesaler: {\n            name: 'Test Wholesaler',\n            email: 'wholesaler@test.com',\n            productCode: 'WS-001',\n            notified: true\n          }\n        }],\n        shippingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        },\n        billingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zipCode: '12345',\n          country: 'US'\n        },\n        subtotal: 29.99,\n        tax: 2.40,\n        shipping: 0,\n        total: 32.39,\n        payment: {\n          method: 'card',\n          status: 'paid'\n        },\n        status: 'processing'\n      });\n    });\n\n    it('should send order status update email when status changes', async () => {\n      const response = await request(app)\n        .put(`/api/orders/${testOrder._id}/status`)\n        .send({ \n          status: 'shipped',\n          trackingNumber: 'TRK123456789'\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(mockEmailService.sendOrderStatusUpdate).toHaveBeenCalledWith(\n        'test@example.com',\n        expect.objectContaining({\n          orderNumber: testOrder.orderNumber,\n          customerName: 'Test User',\n          status: 'shipped',\n          trackingNumber: 'TRK123456789'\n        })\n      );\n    });\n\n    it('should not send status update email for pending status', async () => {\n      await request(app)\n        .put(`/api/orders/${testOrder._id}/status`)\n        .send({ status: 'pending' })\n        .expect(200);\n\n      expect(mockEmailService.sendOrderStatusUpdate).not.toHaveBeenCalled();\n    });\n\n    it('should not send status update email if user opts out', async () => {\n      // Update user preferences\n      testUser.preferences.emailPreferences.orderUpdates = false;\n      await testUser.save();\n\n      await request(app)\n        .put(`/api/orders/${testOrder._id}/status`)\n        .send({ status: 'shipped' })\n        .expect(200);\n\n      expect(mockEmailService.sendOrderStatusUpdate).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Password Reset Email', () => {\n    it('should send password reset email', async () => {\n      const response = await request(app)\n        .post('/api/auth/forgot-password')\n        .send({ email: 'test@example.com' })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(mockEmailService.sendPasswordResetEmail).toHaveBeenCalledWith(\n        'test@example.com',\n        expect.objectContaining({\n          firstName: 'Test',\n          resetToken: expect.any(String),\n          resetUrl: expect.stringContaining('reset-password')\n        })\n      );\n    });\n\n    it('should not send password reset email if user opts out of welcome emails', async () => {\n      // Update user preferences (password reset uses welcomeEmails preference)\n      testUser.preferences.emailPreferences.welcomeEmails = false;\n      await testUser.save();\n\n      await request(app)\n        .post('/api/auth/forgot-password')\n        .send({ email: 'test@example.com' })\n        .expect(200);\n\n      expect(mockEmailService.sendPasswordResetEmail).not.toHaveBeenCalled();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}