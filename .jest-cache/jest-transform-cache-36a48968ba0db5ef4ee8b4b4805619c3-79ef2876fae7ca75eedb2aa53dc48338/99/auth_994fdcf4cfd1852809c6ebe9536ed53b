ea82f31e5bc080b33a69abbf3189e7a7
const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const {
  body,
  validationResult
} = require('express-validator');
const User = require('../models/User');
const {
  requireAuth
} = require('../middleware/auth');

// Generate JWT token
const generateToken = userId => {
  return jwt.sign({
    userId
  }, process.env.JWT_SECRET, {
    expiresIn: '7d'
  });
};

// Validation middleware for registration
const validateRegistration = [body('email').isEmail().normalizeEmail().withMessage('Valid email is required'), body('password').isLength({
  min: 6
}).withMessage('Password must be at least 6 characters long'), body('firstName').trim().isLength({
  min: 1,
  max: 50
}).withMessage('First name is required and must be less than 50 characters'), body('lastName').trim().isLength({
  min: 1,
  max: 50
}).withMessage('Last name is required and must be less than 50 characters'), body('phone').optional().isString().isLength({
  min: 7,
  max: 30
}).withMessage('Phone number must be between 7 and 30 characters')];

// Validation middleware for login
const validateLogin = [body('email').isEmail().normalizeEmail().withMessage('Valid email is required'), body('password').notEmpty().withMessage('Password is required')];

// Validation for forgot password
const validateForgotPassword = [body('email').isEmail().normalizeEmail().withMessage('Valid email is required')];

// Validation for reset password
const validateResetPassword = [body('token').notEmpty().withMessage('Reset token is required'), body('password').isLength({
  min: 6
}).withMessage('Password must be at least 6 characters long')];

// Register new user
router.post('/register', validateRegistration, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid input data',
          details: errors.array()
        }
      });
    }
    const {
      email,
      password,
      firstName,
      lastName,
      phone,
      preferences
    } = req.body;

    // Check if user already exists
    const existingUser = await User.findOne({
      email
    });
    if (existingUser) {
      return res.status(409).json({
        success: false,
        error: {
          code: 'USER_EXISTS',
          message: 'User with this email already exists'
        }
      });
    }

    // Create new user
    const userData = {
      email,
      password,
      firstName,
      lastName,
      phone,
      preferences: preferences || {}
    };
    const user = await User.create(userData);
    const token = generateToken(user._id);

    // Update last login
    user.lastLogin = new Date();
    await user.save();

    // Send welcome email
    try {
      if (user.wantsEmail('welcomeEmails')) {
        const {
          sendWelcomeEmail
        } = require('../utils/emailService');
        const welcomeData = {
          firstName: user.firstName,
          email: user.email
        };
        const emailResult = await sendWelcomeEmail(user.email, welcomeData);
        if (!emailResult.success) {
          console.error('Failed to send welcome email:', emailResult.error);
        }
      }
    } catch (emailError) {
      console.error('Error sending welcome email:', emailError);
    }
    res.status(201).json({
      success: true,
      message: 'User registered successfully',
      data: {
        token,
        user: user.toPublicJSON()
      }
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'REGISTRATION_ERROR',
        message: 'Failed to register user'
      }
    });
  }
});

// Login user with enhanced cart merging
router.post('/login', validateLogin, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid input data',
          details: errors.array()
        }
      });
    }
    const {
      email,
      password,
      guestCartItems
    } = req.body;

    // Find user
    const user = await User.findOne({
      email
    });
    if (!user) {
      return res.status(401).json({
        success: false,
        error: {
          code: 'INVALID_CREDENTIALS',
          message: 'Invalid email or password'
        }
      });
    }

    // Check password
    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res.status(401).json({
        success: false,
        error: {
          code: 'INVALID_CREDENTIALS',
          message: 'Invalid email or password'
        }
      });
    }

    // Check if user is active
    if (!user.isActive) {
      return res.status(403).json({
        success: false,
        error: {
          code: 'ACCOUNT_DISABLED',
          message: 'Your account has been disabled'
        }
      });
    }

    // Generate token
    const token = generateToken(user._id);

    // Update last login
    user.lastLogin = new Date();
    await user.save();

    // Cart info (simplified after removing cartService)
    const cartInfo = {
      itemCount: 0,
      mergedItems: 0
    };

    // Guest cart merging would happen on the frontend after login

    res.json({
      success: true,
      message: 'Login successful',
      data: {
        token,
        user: user.toPublicJSON(),
        cart: cartInfo
      }
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'LOGIN_ERROR',
        message: 'Failed to login'
      }
    });
  }
});

// Forgot password - Fixed timing attack vulnerability
router.post('/forgot-password', validateForgotPassword, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid input data',
          details: errors.array()
        }
      });
    }
    const {
      email
    } = req.body;

    // Always execute the same operations to prevent timing attacks
    let user, resetToken, resetTokenHash;

    // Find user
    user = await User.findOne({
      email
    });

    // Always generate a token (even if user doesn't exist) to normalize timing
    resetToken = crypto.randomBytes(32).toString('hex');
    resetTokenHash = crypto.createHash('sha256').update(resetToken).digest('hex');

    // If user exists, save the reset token and send email
    if (user) {
      // Save reset token and expiry
      user.passwordResetToken = resetTokenHash;
      user.passwordResetExpiry = Date.now() + 3600000; // 1 hour
      await user.save();

      // Send reset email
      try {
        const {
          sendPasswordResetEmail
        } = require('../utils/emailService');
        const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
        const emailResult = await sendPasswordResetEmail(user.email, {
          firstName: user.firstName,
          resetToken,
          resetUrl
        });
        if (!emailResult.success) {
          console.error('Failed to send reset email:', emailResult.error);
        }

        // Log reset URL for development when email is not configured
        if (emailResult.message === 'Email skipped - not configured') {
          console.log('\n========================================');
          console.log('PASSWORD RESET URL (Email not configured)');
          console.log('========================================');
          console.log(`User: ${user.email}`);
          console.log(`Reset URL: ${resetUrl}`);
          console.log('========================================\n');
        }
      } catch (emailError) {
        console.error('Error sending reset email:', emailError);
      }
    } else {
      // If user doesn't exist, still perform the same cryptographic operations
      // and simulate sending an email to normalize response time
      await new Promise(resolve => setTimeout(resolve, Math.random() * 100 + 50));
    }

    // Always return the same response regardless of whether user exists
    res.json({
      success: true,
      message: 'If an account exists with this email, a password reset link will be sent.'
    });
  } catch (error) {
    console.error('Forgot password error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'FORGOT_PASSWORD_ERROR',
        message: 'Failed to process password reset request'
      }
    });
  }
});

// Reset password
router.post('/reset-password', validateResetPassword, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid input data',
          details: errors.array()
        }
      });
    }
    const {
      token,
      password
    } = req.body;

    // Hash the token to match stored version
    const resetTokenHash = crypto.createHash('sha256').update(token).digest('hex');

    // Find user with valid reset token
    const user = await User.findOne({
      passwordResetToken: resetTokenHash,
      passwordResetExpiry: {
        $gt: Date.now()
      }
    });
    if (!user) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_TOKEN',
          message: 'Password reset token is invalid or has expired'
        }
      });
    }

    // Update password
    user.password = password;
    user.passwordResetToken = undefined;
    user.passwordResetExpiry = undefined;
    await user.save();

    // Generate new auth token
    const authToken = generateToken(user._id);
    res.json({
      success: true,
      message: 'Password has been reset successfully',
      token: authToken,
      user: user.toPublicJSON()
    });
  } catch (error) {
    console.error('Reset password error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'RESET_PASSWORD_ERROR',
        message: 'Failed to reset password'
      }
    });
  }
});

// Get user profile
router.get('/profile', requireAuth, async (req, res) => {
  try {
    res.json({
      success: true,
      data: {
        user: req.user.toPublicJSON()
      }
    });
  } catch (error) {
    console.error('Profile fetch error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'PROFILE_FETCH_ERROR',
        message: 'Failed to fetch user profile'
      }
    });
  }
});

// Update user profile with optimistic updates and performance optimization
router.put('/profile', requireAuth, [body('firstName').optional().trim().isLength({
  min: 1,
  max: 50
}).withMessage('First name must be 1-50 characters'), body('lastName').optional().trim().isLength({
  min: 1,
  max: 50
}).withMessage('Last name must be 1-50 characters'), body('phone').optional().isString().isLength({
  min: 7,
  max: 30
}).withMessage('Phone must be 7-30 characters'), body('email').optional().isEmail().normalizeEmail().withMessage('Valid email is required'), body('addresses').optional().isArray().withMessage('Addresses must be an array'), body('addresses.*.street').optional().trim().isLength({
  min: 1,
  max: 100
}).withMessage('Street must be 1-100 characters'), body('addresses.*.city').optional().trim().isLength({
  min: 1,
  max: 50
}).withMessage('City must be 1-50 characters'), body('addresses.*.state').optional().trim().isLength({
  min: 2,
  max: 50
}).withMessage('State must be 2-50 characters'), body('addresses.*.zipCode').optional().trim().isLength({
  min: 5,
  max: 10
}).withMessage('ZIP code must be 5-10 characters'), body('addresses.*.country').optional().trim().isLength({
  min: 2,
  max: 2
}).withMessage('Country must be 2-letter code'), body('preferences.notifications').optional().isBoolean().withMessage('Notifications must be boolean'), body('preferences.newsletter').optional().isBoolean().withMessage('Newsletter must be boolean'), body('preferences.emailPreferences').optional().isObject().withMessage('Email preferences must be an object')], async (req, res) => {
  const startTime = Date.now();
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid input data',
          details: errors.array()
        }
      });
    }
    const {
      firstName,
      lastName,
      phone,
      email,
      addresses,
      preferences
    } = req.body;

    // Build update data object
    const updateData = {};
    if (firstName !== undefined) {
      updateData.firstName = firstName;
    }
    if (lastName !== undefined) {
      updateData.lastName = lastName;
    }
    if (phone !== undefined) {
      updateData.phone = phone;
    }
    if (email !== undefined) {
      updateData.email = email;
    }
    if (addresses !== undefined) {
      updateData.addresses = addresses;
    }

    // Handle nested preferences updates
    if (preferences !== undefined) {
      updateData.preferences = {
        ...(req.user.preferences?.toObject?.() || req.user.preferences || {}),
        ...preferences
      };

      // Handle nested emailPreferences
      if (preferences.emailPreferences) {
        updateData.preferences.emailPreferences = {
          ...(req.user.preferences?.emailPreferences || {}),
          ...preferences.emailPreferences
        };
      }
    }

    // Check if email is being changed and if it's already in use
    if (email && email !== req.user.email) {
      const existingUser = await User.findOne({
        email,
        _id: {
          $ne: req.user._id
        }
      });
      if (existingUser) {
        return res.status(409).json({
          success: false,
          error: {
            code: 'EMAIL_EXISTS',
            message: 'Email address is already in use'
          }
        });
      }
    }

    // Update user directly
    const updatedUser = await User.findByIdAndUpdate(req.user._id, {
      $set: updateData
    }, {
      new: true,
      runValidators: true
    });
    if (!updatedUser) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'USER_NOT_FOUND',
          message: 'User not found'
        }
      });
    }
    const totalDuration = Date.now() - startTime;

    // Send success response with performance metrics
    res.json({
      success: true,
      message: 'Profile updated successfully',
      data: {
        user: updatedUser.toPublicJSON()
      },
      performance: {
        duration: totalDuration,
        target: '200ms',
        status: totalDuration <= 200 ? 'optimal' : 'needs_optimization'
      }
    });

    // Email notification for sensitive changes would go here if email service is configured
  } catch (error) {
    console.error('Profile update error:', error);

    // Handle specific MongoDB errors
    if (error.code === 11000) {
      return res.status(409).json({
        success: false,
        error: {
          code: 'DUPLICATE_EMAIL',
          message: 'Email address is already in use'
        }
      });
    }
    res.status(500).json({
      success: false,
      error: {
        code: 'PROFILE_UPDATE_ERROR',
        message: 'Failed to update profile'
      }
    });
  }
});

// Change password
router.post('/change-password', requireAuth, [body('currentPassword').notEmpty().withMessage('Current password is required'), body('newPassword').isLength({
  min: 6
}).withMessage('New password must be at least 6 characters long')], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid input data',
          details: errors.array()
        }
      });
    }
    const {
      currentPassword,
      newPassword
    } = req.body;

    // Get user with password field
    const user = await User.findById(req.user._id).select('+password');

    // Verify current password
    const isMatch = await user.comparePassword(currentPassword);
    if (!isMatch) {
      return res.status(401).json({
        success: false,
        error: {
          code: 'INVALID_PASSWORD',
          message: 'Current password is incorrect'
        }
      });
    }

    // Update password
    user.password = newPassword;
    await user.save();
    res.json({
      success: true,
      message: 'Password changed successfully'
    });
  } catch (error) {
    console.error('Password change error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'PASSWORD_CHANGE_ERROR',
        message: 'Failed to change password'
      }
    });
  }
});

// Logout (optional - mainly for server-side session cleanup)
router.post('/logout', requireAuth, async (req, res) => {
  try {
    const userId = req.user._id;

    // Logout event would be emitted here if event service was configured

    // Clear any server-side sessions and cleanup cart state
    if (req.session) {
      // Clear any cart session IDs to prevent ghost carts
      delete req.session.cartId;
      delete req.session.guestId;

      // Clear the session
      req.session.destroy(err => {
        if (err) {
          console.error('Session destruction error:', err);
        }
      });
    }
    res.json({
      success: true,
      message: 'Logged out successfully',
      cartCleared: true // Signal to frontend to clear cart state
    });
  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'LOGOUT_ERROR',
        message: 'Failed to logout'
      }
    });
  }
});

// Address management endpoints without authentication loss

// Add new address
router.post('/addresses', requireAuth, [body('type').isIn(['shipping', 'billing']).withMessage('Address type must be shipping or billing'), body('firstName').trim().isLength({
  min: 1,
  max: 50
}).withMessage('First name is required'), body('lastName').trim().isLength({
  min: 1,
  max: 50
}).withMessage('Last name is required'), body('street').trim().isLength({
  min: 1,
  max: 100
}).withMessage('Street address is required'), body('city').trim().isLength({
  min: 1,
  max: 50
}).withMessage('City is required'), body('state').trim().isLength({
  min: 1,
  max: 50
}).withMessage('State is required'), body('zipCode').trim().isLength({
  min: 3,
  max: 20
}).withMessage('ZIP code is required'), body('country').optional().trim().isLength({
  min: 2,
  max: 3
}).withMessage('Country code must be 2-3 characters'), body('phone').optional().isString().isLength({
  min: 7,
  max: 30
}).withMessage('Phone must be 7-30 characters'), body('isDefault').optional().isBoolean().withMessage('isDefault must be boolean')], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid address data',
          details: errors.array()
        }
      });
    }
    const addressData = {
      type: req.body.type,
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      street: req.body.street,
      city: req.body.city,
      state: req.body.state,
      zipCode: req.body.zipCode,
      country: req.body.country || 'US',
      phone: req.body.phone,
      isDefault: req.body.isDefault || false
    };

    // Add address to user
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'USER_NOT_FOUND',
          message: 'User not found'
        }
      });
    }

    // Initialize addresses array if it doesn't exist
    if (!user.addresses) {
      user.addresses = [];
    }

    // If this is the default address, unset other defaults
    if (addressData.isDefault) {
      user.addresses.forEach(addr => {
        addr.isDefault = false;
      });
    }
    user.addresses.push(addressData);
    await user.save();
    res.status(201).json({
      success: true,
      message: 'Address added successfully',
      user: user.toPublicJSON()
    });
  } catch (error) {
    console.error('Add address error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'ADDRESS_ADD_ERROR',
        message: 'Failed to add address'
      }
    });
  }
});

// Update existing address
router.put('/addresses/:addressId', requireAuth, [body('type').optional().isIn(['shipping', 'billing']).withMessage('Address type must be shipping or billing'), body('firstName').optional().trim().isLength({
  min: 1,
  max: 50
}).withMessage('First name must be 1-50 characters'), body('lastName').optional().trim().isLength({
  min: 1,
  max: 50
}).withMessage('Last name must be 1-50 characters'), body('street').optional().trim().isLength({
  min: 1,
  max: 100
}).withMessage('Street must be 1-100 characters'), body('city').optional().trim().isLength({
  min: 1,
  max: 50
}).withMessage('City must be 1-50 characters'), body('state').optional().trim().isLength({
  min: 1,
  max: 50
}).withMessage('State must be 1-50 characters'), body('zipCode').optional().trim().isLength({
  min: 3,
  max: 20
}).withMessage('ZIP code must be 3-20 characters'), body('country').optional().trim().isLength({
  min: 2,
  max: 3
}).withMessage('Country code must be 2-3 characters'), body('phone').optional().isString().isLength({
  min: 7,
  max: 30
}).withMessage('Phone must be 7-30 characters'), body('isDefault').optional().isBoolean().withMessage('isDefault must be boolean')], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'VALIDATION_ERROR',
          message: 'Invalid address data',
          details: errors.array()
        }
      });
    }
    const {
      addressId
    } = req.params;
    const updateData = {};

    // Only include fields that are provided
    ['type', 'firstName', 'lastName', 'street', 'city', 'state', 'zipCode', 'country', 'phone', 'isDefault'].forEach(field => {
      if (req.body[field] !== undefined) {
        updateData[field] = req.body[field];
      }
    });

    // Update address
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'USER_NOT_FOUND',
          message: 'User not found'
        }
      });
    }
    const addressIndex = user.addresses.findIndex(addr => addr._id.toString() === addressId);
    if (addressIndex === -1) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'ADDRESS_NOT_FOUND',
          message: 'Address not found'
        }
      });
    }

    // If setting as default, unset other defaults
    if (updateData.isDefault) {
      user.addresses.forEach((addr, idx) => {
        if (idx !== addressIndex) {
          addr.isDefault = false;
        }
      });
    }

    // Update the address
    Object.assign(user.addresses[addressIndex], updateData);
    await user.save();
    res.json({
      success: true,
      message: 'Address updated successfully',
      user: user.toPublicJSON()
    });
  } catch (error) {
    console.error('Update address error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'ADDRESS_UPDATE_ERROR',
        message: 'Failed to update address'
      }
    });
  }
});

// Delete address
router.delete('/profile/addresses/:addressId', requireAuth, async (req, res) => {
  try {
    const {
      addressId
    } = req.params;

    // Delete address
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'USER_NOT_FOUND',
          message: 'User not found'
        }
      });
    }
    const addressIndex = user.addresses.findIndex(addr => addr._id.toString() === addressId);
    if (addressIndex === -1) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'ADDRESS_NOT_FOUND',
          message: 'Address not found'
        }
      });
    }
    user.addresses.splice(addressIndex, 1);
    await user.save();
    res.json({
      success: true,
      message: 'Address deleted successfully',
      user: user.toPublicJSON()
    });
  } catch (error) {
    console.error('Delete address error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'ADDRESS_DELETE_ERROR',
        message: 'Failed to delete address'
      }
    });
  }
});

// Set default address
router.patch('/profile/addresses/:addressId/default', requireAuth, async (req, res) => {
  try {
    const {
      addressId
    } = req.params;

    // Set default address
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'USER_NOT_FOUND',
          message: 'User not found'
        }
      });
    }
    const addressIndex = user.addresses.findIndex(addr => addr._id.toString() === addressId);
    if (addressIndex === -1) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'ADDRESS_NOT_FOUND',
          message: 'Address not found'
        }
      });
    }

    // Unset all other defaults
    user.addresses.forEach((addr, idx) => {
      addr.isDefault = idx === addressIndex;
    });
    await user.save();
    res.json({
      success: true,
      message: 'Default address updated successfully',
      user: user.toPublicJSON()
    });
  } catch (error) {
    console.error('Set default address error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'ADDRESS_DEFAULT_ERROR',
        message: 'Failed to set default address'
      }
    });
  }
});

// Refresh token endpoint
router.post('/refresh-token', async (req, res) => {
  try {
    const {
      token
    } = req.body;
    if (!token) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'MISSING_TOKEN',
          message: 'Token is required'
        }
      });
    }
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);
    if (!user || !user.isActive) {
      return res.status(401).json({
        success: false,
        error: {
          code: 'INVALID_TOKEN',
          message: 'Invalid token'
        }
      });
    }
    const newToken = generateToken(user._id);
    res.json({
      success: true,
      token: newToken,
      user: user.toPublicJSON()
    });
  } catch (error) {
    console.error('Token refresh error:', error);
    res.status(401).json({
      success: false,
      error: {
        code: 'TOKEN_REFRESH_ERROR',
        message: 'Failed to refresh token'
      }
    });
  }
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInJvdXRlciIsIlJvdXRlciIsImp3dCIsImNyeXB0byIsImJvZHkiLCJ2YWxpZGF0aW9uUmVzdWx0IiwiVXNlciIsInJlcXVpcmVBdXRoIiwiZ2VuZXJhdGVUb2tlbiIsInVzZXJJZCIsInNpZ24iLCJwcm9jZXNzIiwiZW52IiwiSldUX1NFQ1JFVCIsImV4cGlyZXNJbiIsInZhbGlkYXRlUmVnaXN0cmF0aW9uIiwiaXNFbWFpbCIsIm5vcm1hbGl6ZUVtYWlsIiwid2l0aE1lc3NhZ2UiLCJpc0xlbmd0aCIsIm1pbiIsInRyaW0iLCJtYXgiLCJvcHRpb25hbCIsImlzU3RyaW5nIiwidmFsaWRhdGVMb2dpbiIsIm5vdEVtcHR5IiwidmFsaWRhdGVGb3Jnb3RQYXNzd29yZCIsInZhbGlkYXRlUmVzZXRQYXNzd29yZCIsInBvc3QiLCJyZXEiLCJyZXMiLCJlcnJvcnMiLCJpc0VtcHR5Iiwic3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiZGV0YWlscyIsImFycmF5IiwiZW1haWwiLCJwYXNzd29yZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwicGhvbmUiLCJwcmVmZXJlbmNlcyIsImV4aXN0aW5nVXNlciIsImZpbmRPbmUiLCJ1c2VyRGF0YSIsInVzZXIiLCJjcmVhdGUiLCJ0b2tlbiIsIl9pZCIsImxhc3RMb2dpbiIsIkRhdGUiLCJzYXZlIiwid2FudHNFbWFpbCIsInNlbmRXZWxjb21lRW1haWwiLCJ3ZWxjb21lRGF0YSIsImVtYWlsUmVzdWx0IiwiY29uc29sZSIsImVtYWlsRXJyb3IiLCJkYXRhIiwidG9QdWJsaWNKU09OIiwiZ3Vlc3RDYXJ0SXRlbXMiLCJpc01hdGNoIiwiY29tcGFyZVBhc3N3b3JkIiwiaXNBY3RpdmUiLCJjYXJ0SW5mbyIsIml0ZW1Db3VudCIsIm1lcmdlZEl0ZW1zIiwiY2FydCIsInJlc2V0VG9rZW4iLCJyZXNldFRva2VuSGFzaCIsInJhbmRvbUJ5dGVzIiwidG9TdHJpbmciLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwicGFzc3dvcmRSZXNldFRva2VuIiwicGFzc3dvcmRSZXNldEV4cGlyeSIsIm5vdyIsInNlbmRQYXNzd29yZFJlc2V0RW1haWwiLCJyZXNldFVybCIsIkZST05URU5EX1VSTCIsImxvZyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIk1hdGgiLCJyYW5kb20iLCIkZ3QiLCJ1bmRlZmluZWQiLCJhdXRoVG9rZW4iLCJnZXQiLCJwdXQiLCJpc0FycmF5IiwiaXNCb29sZWFuIiwiaXNPYmplY3QiLCJzdGFydFRpbWUiLCJhZGRyZXNzZXMiLCJ1cGRhdGVEYXRhIiwidG9PYmplY3QiLCJlbWFpbFByZWZlcmVuY2VzIiwiJG5lIiwidXBkYXRlZFVzZXIiLCJmaW5kQnlJZEFuZFVwZGF0ZSIsIiRzZXQiLCJuZXciLCJydW5WYWxpZGF0b3JzIiwidG90YWxEdXJhdGlvbiIsInBlcmZvcm1hbmNlIiwiZHVyYXRpb24iLCJ0YXJnZXQiLCJjdXJyZW50UGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsImZpbmRCeUlkIiwic2VsZWN0Iiwic2Vzc2lvbiIsImNhcnRJZCIsImd1ZXN0SWQiLCJkZXN0cm95IiwiZXJyIiwiY2FydENsZWFyZWQiLCJpc0luIiwiYWRkcmVzc0RhdGEiLCJ0eXBlIiwic3RyZWV0IiwiY2l0eSIsInN0YXRlIiwiemlwQ29kZSIsImNvdW50cnkiLCJpc0RlZmF1bHQiLCJmb3JFYWNoIiwiYWRkciIsInB1c2giLCJhZGRyZXNzSWQiLCJwYXJhbXMiLCJmaWVsZCIsImFkZHJlc3NJbmRleCIsImZpbmRJbmRleCIsImlkeCIsIk9iamVjdCIsImFzc2lnbiIsImRlbGV0ZSIsInNwbGljZSIsInBhdGNoIiwiZGVjb2RlZCIsInZlcmlmeSIsIm5ld1Rva2VuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImF1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5jb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuY29uc3QgeyBib2R5LCB2YWxpZGF0aW9uUmVzdWx0IH0gPSByZXF1aXJlKCdleHByZXNzLXZhbGlkYXRvcicpO1xuY29uc3QgVXNlciA9IHJlcXVpcmUoJy4uL21vZGVscy9Vc2VyJyk7XG5jb25zdCB7IHJlcXVpcmVBdXRoIH0gPSByZXF1aXJlKCcuLi9taWRkbGV3YXJlL2F1dGgnKTtcblxuLy8gR2VuZXJhdGUgSldUIHRva2VuXG5jb25zdCBnZW5lcmF0ZVRva2VuID0gKHVzZXJJZCkgPT4ge1xuICByZXR1cm4gand0LnNpZ24oeyB1c2VySWQgfSwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCwgeyBleHBpcmVzSW46ICc3ZCcgfSk7XG59O1xuXG4vLyBWYWxpZGF0aW9uIG1pZGRsZXdhcmUgZm9yIHJlZ2lzdHJhdGlvblxuY29uc3QgdmFsaWRhdGVSZWdpc3RyYXRpb24gPSBbXG4gIGJvZHkoJ2VtYWlsJylcbiAgICAuaXNFbWFpbCgpXG4gICAgLm5vcm1hbGl6ZUVtYWlsKClcbiAgICAud2l0aE1lc3NhZ2UoJ1ZhbGlkIGVtYWlsIGlzIHJlcXVpcmVkJyksXG4gIGJvZHkoJ3Bhc3N3b3JkJylcbiAgICAuaXNMZW5ndGgoeyBtaW46IDYgfSlcbiAgICAud2l0aE1lc3NhZ2UoJ1Bhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzIGxvbmcnKSxcbiAgYm9keSgnZmlyc3ROYW1lJylcbiAgICAudHJpbSgpXG4gICAgLmlzTGVuZ3RoKHsgbWluOiAxLCBtYXg6IDUwIH0pXG4gICAgLndpdGhNZXNzYWdlKCdGaXJzdCBuYW1lIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGxlc3MgdGhhbiA1MCBjaGFyYWN0ZXJzJyksXG4gIGJvZHkoJ2xhc3ROYW1lJylcbiAgICAudHJpbSgpXG4gICAgLmlzTGVuZ3RoKHsgbWluOiAxLCBtYXg6IDUwIH0pXG4gICAgLndpdGhNZXNzYWdlKCdMYXN0IG5hbWUgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgbGVzcyB0aGFuIDUwIGNoYXJhY3RlcnMnKSxcbiAgYm9keSgncGhvbmUnKVxuICAgIC5vcHRpb25hbCgpXG4gICAgLmlzU3RyaW5nKClcbiAgICAuaXNMZW5ndGgoeyBtaW46IDcsIG1heDogMzAgfSlcbiAgICAud2l0aE1lc3NhZ2UoJ1Bob25lIG51bWJlciBtdXN0IGJlIGJldHdlZW4gNyBhbmQgMzAgY2hhcmFjdGVycycpXG5dO1xuXG4vLyBWYWxpZGF0aW9uIG1pZGRsZXdhcmUgZm9yIGxvZ2luXG5jb25zdCB2YWxpZGF0ZUxvZ2luID0gW1xuICBib2R5KCdlbWFpbCcpXG4gICAgLmlzRW1haWwoKVxuICAgIC5ub3JtYWxpemVFbWFpbCgpXG4gICAgLndpdGhNZXNzYWdlKCdWYWxpZCBlbWFpbCBpcyByZXF1aXJlZCcpLFxuICBib2R5KCdwYXNzd29yZCcpXG4gICAgLm5vdEVtcHR5KClcbiAgICAud2l0aE1lc3NhZ2UoJ1Bhc3N3b3JkIGlzIHJlcXVpcmVkJylcbl07XG5cbi8vIFZhbGlkYXRpb24gZm9yIGZvcmdvdCBwYXNzd29yZFxuY29uc3QgdmFsaWRhdGVGb3Jnb3RQYXNzd29yZCA9IFtcbiAgYm9keSgnZW1haWwnKVxuICAgIC5pc0VtYWlsKClcbiAgICAubm9ybWFsaXplRW1haWwoKVxuICAgIC53aXRoTWVzc2FnZSgnVmFsaWQgZW1haWwgaXMgcmVxdWlyZWQnKVxuXTtcblxuLy8gVmFsaWRhdGlvbiBmb3IgcmVzZXQgcGFzc3dvcmRcbmNvbnN0IHZhbGlkYXRlUmVzZXRQYXNzd29yZCA9IFtcbiAgYm9keSgndG9rZW4nKVxuICAgIC5ub3RFbXB0eSgpXG4gICAgLndpdGhNZXNzYWdlKCdSZXNldCB0b2tlbiBpcyByZXF1aXJlZCcpLFxuICBib2R5KCdwYXNzd29yZCcpXG4gICAgLmlzTGVuZ3RoKHsgbWluOiA2IH0pXG4gICAgLndpdGhNZXNzYWdlKCdQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBsb25nJylcbl07XG5cbi8vIFJlZ2lzdGVyIG5ldyB1c2VyXG5yb3V0ZXIucG9zdCgnL3JlZ2lzdGVyJywgdmFsaWRhdGVSZWdpc3RyYXRpb24sIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRpb25SZXN1bHQocmVxKTtcbiAgICBpZiAoIWVycm9ycy5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdWQUxJREFUSU9OX0VSUk9SJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBpbnB1dCBkYXRhJyxcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvcnMuYXJyYXkoKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgZmlyc3ROYW1lLCBsYXN0TmFtZSwgcGhvbmUsIHByZWZlcmVuY2VzIH0gPSByZXEuYm9keTtcblxuICAgIC8vIENoZWNrIGlmIHVzZXIgYWxyZWFkeSBleGlzdHNcbiAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoeyBlbWFpbCB9KTtcbiAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDkpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnVVNFUl9FWElTVFMnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cydcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIG5ldyB1c2VyXG4gICAgY29uc3QgdXNlckRhdGEgPSB7XG4gICAgICBlbWFpbCxcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgZmlyc3ROYW1lLFxuICAgICAgbGFzdE5hbWUsXG4gICAgICBwaG9uZSxcbiAgICAgIHByZWZlcmVuY2VzOiBwcmVmZXJlbmNlcyB8fCB7fVxuICAgIH07XG5cbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5jcmVhdGUodXNlckRhdGEpO1xuICAgIGNvbnN0IHRva2VuID0gZ2VuZXJhdGVUb2tlbih1c2VyLl9pZCk7XG5cbiAgICAvLyBVcGRhdGUgbGFzdCBsb2dpblxuICAgIHVzZXIubGFzdExvZ2luID0gbmV3IERhdGUoKTtcbiAgICBhd2FpdCB1c2VyLnNhdmUoKTtcblxuICAgIC8vIFNlbmQgd2VsY29tZSBlbWFpbFxuICAgIHRyeSB7XG4gICAgICBpZiAodXNlci53YW50c0VtYWlsKCd3ZWxjb21lRW1haWxzJykpIHtcbiAgICAgICAgY29uc3QgeyBzZW5kV2VsY29tZUVtYWlsIH0gPSByZXF1aXJlKCcuLi91dGlscy9lbWFpbFNlcnZpY2UnKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHdlbGNvbWVEYXRhID0ge1xuICAgICAgICAgIGZpcnN0TmFtZTogdXNlci5maXJzdE5hbWUsXG4gICAgICAgICAgZW1haWw6IHVzZXIuZW1haWxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBlbWFpbFJlc3VsdCA9IGF3YWl0IHNlbmRXZWxjb21lRW1haWwodXNlci5lbWFpbCwgd2VsY29tZURhdGEpO1xuICAgICAgICBpZiAoIWVtYWlsUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2VuZCB3ZWxjb21lIGVtYWlsOicsIGVtYWlsUmVzdWx0LmVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVtYWlsRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlbmRpbmcgd2VsY29tZSBlbWFpbDonLCBlbWFpbEVycm9yKTtcbiAgICB9XG5cbiAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ1VzZXIgcmVnaXN0ZXJlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgZGF0YToge1xuICAgICAgICB0b2tlbixcbiAgICAgICAgdXNlcjogdXNlci50b1B1YmxpY0pTT04oKVxuICAgICAgfVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignUmVnaXN0cmF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIGNvZGU6ICdSRUdJU1RSQVRJT05fRVJST1InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHJlZ2lzdGVyIHVzZXInXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBMb2dpbiB1c2VyIHdpdGggZW5oYW5jZWQgY2FydCBtZXJnaW5nXG5yb3V0ZXIucG9zdCgnL2xvZ2luJywgdmFsaWRhdGVMb2dpbiwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xuICAgIGlmICghZXJyb3JzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGlucHV0IGRhdGEnLFxuICAgICAgICAgIGRldGFpbHM6IGVycm9ycy5hcnJheSgpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkLCBndWVzdENhcnRJdGVtcyB9ID0gcmVxLmJvZHk7XG5cbiAgICAvLyBGaW5kIHVzZXJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgZW1haWwgfSk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9DUkVERU5USUFMUycsXG4gICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgZW1haWwgb3IgcGFzc3dvcmQnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHBhc3N3b3JkXG4gICAgY29uc3QgaXNNYXRjaCA9IGF3YWl0IHVzZXIuY29tcGFyZVBhc3N3b3JkKHBhc3N3b3JkKTtcbiAgICBpZiAoIWlzTWF0Y2gpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdJTlZBTElEX0NSRURFTlRJQUxTJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdXNlciBpcyBhY3RpdmVcbiAgICBpZiAoIXVzZXIuaXNBY3RpdmUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdBQ0NPVU5UX0RJU0FCTEVEJyxcbiAgICAgICAgICBtZXNzYWdlOiAnWW91ciBhY2NvdW50IGhhcyBiZWVuIGRpc2FibGVkJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSB0b2tlblxuICAgIGNvbnN0IHRva2VuID0gZ2VuZXJhdGVUb2tlbih1c2VyLl9pZCk7XG5cbiAgICAvLyBVcGRhdGUgbGFzdCBsb2dpblxuICAgIHVzZXIubGFzdExvZ2luID0gbmV3IERhdGUoKTtcbiAgICBhd2FpdCB1c2VyLnNhdmUoKTtcblxuICAgIC8vIENhcnQgaW5mbyAoc2ltcGxpZmllZCBhZnRlciByZW1vdmluZyBjYXJ0U2VydmljZSlcbiAgICBjb25zdCBjYXJ0SW5mbyA9IHsgaXRlbUNvdW50OiAwLCBtZXJnZWRJdGVtczogMCB9O1xuICAgIFxuICAgIC8vIEd1ZXN0IGNhcnQgbWVyZ2luZyB3b3VsZCBoYXBwZW4gb24gdGhlIGZyb250ZW5kIGFmdGVyIGxvZ2luXG5cbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ0xvZ2luIHN1Y2Nlc3NmdWwnLFxuICAgICAgZGF0YToge1xuICAgICAgICB0b2tlbixcbiAgICAgICAgdXNlcjogdXNlci50b1B1YmxpY0pTT04oKSxcbiAgICAgICAgY2FydDogY2FydEluZm9cbiAgICAgIH1cbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIGNvZGU6ICdMT0dJTl9FUlJPUicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gbG9naW4nXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBGb3Jnb3QgcGFzc3dvcmQgLSBGaXhlZCB0aW1pbmcgYXR0YWNrIHZ1bG5lcmFiaWxpdHlcbnJvdXRlci5wb3N0KCcvZm9yZ290LXBhc3N3b3JkJywgdmFsaWRhdGVGb3Jnb3RQYXNzd29yZCwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xuICAgIGlmICghZXJyb3JzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGlucHV0IGRhdGEnLFxuICAgICAgICAgIGRldGFpbHM6IGVycm9ycy5hcnJheSgpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZW1haWwgfSA9IHJlcS5ib2R5O1xuICAgIFxuICAgIC8vIEFsd2F5cyBleGVjdXRlIHRoZSBzYW1lIG9wZXJhdGlvbnMgdG8gcHJldmVudCB0aW1pbmcgYXR0YWNrc1xuICAgIGxldCB1c2VyLCByZXNldFRva2VuLCByZXNldFRva2VuSGFzaDtcbiAgICBcbiAgICAvLyBGaW5kIHVzZXJcbiAgICB1c2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgZW1haWwgfSk7XG4gICAgXG4gICAgLy8gQWx3YXlzIGdlbmVyYXRlIGEgdG9rZW4gKGV2ZW4gaWYgdXNlciBkb2Vzbid0IGV4aXN0KSB0byBub3JtYWxpemUgdGltaW5nXG4gICAgcmVzZXRUb2tlbiA9IGNyeXB0by5yYW5kb21CeXRlcygzMikudG9TdHJpbmcoJ2hleCcpO1xuICAgIHJlc2V0VG9rZW5IYXNoID0gY3J5cHRvXG4gICAgICAuY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAgIC51cGRhdGUocmVzZXRUb2tlbilcbiAgICAgIC5kaWdlc3QoJ2hleCcpO1xuXG4gICAgLy8gSWYgdXNlciBleGlzdHMsIHNhdmUgdGhlIHJlc2V0IHRva2VuIGFuZCBzZW5kIGVtYWlsXG4gICAgaWYgKHVzZXIpIHtcbiAgICAgIC8vIFNhdmUgcmVzZXQgdG9rZW4gYW5kIGV4cGlyeVxuICAgICAgdXNlci5wYXNzd29yZFJlc2V0VG9rZW4gPSByZXNldFRva2VuSGFzaDtcbiAgICAgIHVzZXIucGFzc3dvcmRSZXNldEV4cGlyeSA9IERhdGUubm93KCkgKyAzNjAwMDAwOyAvLyAxIGhvdXJcbiAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpO1xuXG4gICAgICAvLyBTZW5kIHJlc2V0IGVtYWlsXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHNlbmRQYXNzd29yZFJlc2V0RW1haWwgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2VtYWlsU2VydmljZScpO1xuICAgICAgICBjb25zdCByZXNldFVybCA9IGAke3Byb2Nlc3MuZW52LkZST05URU5EX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAwJ30vcmVzZXQtcGFzc3dvcmQ/dG9rZW49JHtyZXNldFRva2VufWA7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBlbWFpbFJlc3VsdCA9IGF3YWl0IHNlbmRQYXNzd29yZFJlc2V0RW1haWwodXNlci5lbWFpbCwge1xuICAgICAgICAgIGZpcnN0TmFtZTogdXNlci5maXJzdE5hbWUsXG4gICAgICAgICAgcmVzZXRUb2tlbixcbiAgICAgICAgICByZXNldFVybFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZW1haWxSZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZW5kIHJlc2V0IGVtYWlsOicsIGVtYWlsUmVzdWx0LmVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTG9nIHJlc2V0IFVSTCBmb3IgZGV2ZWxvcG1lbnQgd2hlbiBlbWFpbCBpcyBub3QgY29uZmlndXJlZFxuICAgICAgICBpZiAoZW1haWxSZXN1bHQubWVzc2FnZSA9PT0gJ0VtYWlsIHNraXBwZWQgLSBub3QgY29uZmlndXJlZCcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdQQVNTV09SRCBSRVNFVCBVUkwgKEVtYWlsIG5vdCBjb25maWd1cmVkKScpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG4gICAgICAgICAgY29uc29sZS5sb2coYFVzZXI6ICR7dXNlci5lbWFpbH1gKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgUmVzZXQgVVJMOiAke3Jlc2V0VXJsfWApO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVtYWlsRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VuZGluZyByZXNldCBlbWFpbDonLCBlbWFpbEVycm9yKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdXNlciBkb2Vzbid0IGV4aXN0LCBzdGlsbCBwZXJmb3JtIHRoZSBzYW1lIGNyeXB0b2dyYXBoaWMgb3BlcmF0aW9uc1xuICAgICAgLy8gYW5kIHNpbXVsYXRlIHNlbmRpbmcgYW4gZW1haWwgdG8gbm9ybWFsaXplIHJlc3BvbnNlIHRpbWVcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBNYXRoLnJhbmRvbSgpICogMTAwICsgNTApKTtcbiAgICB9XG5cbiAgICAvLyBBbHdheXMgcmV0dXJuIHRoZSBzYW1lIHJlc3BvbnNlIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB1c2VyIGV4aXN0c1xuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiAnSWYgYW4gYWNjb3VudCBleGlzdHMgd2l0aCB0aGlzIGVtYWlsLCBhIHBhc3N3b3JkIHJlc2V0IGxpbmsgd2lsbCBiZSBzZW50LidcbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZvcmdvdCBwYXNzd29yZCBlcnJvcjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjoge1xuICAgICAgICBjb2RlOiAnRk9SR09UX1BBU1NXT1JEX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBwcm9jZXNzIHBhc3N3b3JkIHJlc2V0IHJlcXVlc3QnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBSZXNldCBwYXNzd29yZFxucm91dGVyLnBvc3QoJy9yZXNldC1wYXNzd29yZCcsIHZhbGlkYXRlUmVzZXRQYXNzd29yZCwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xuICAgIGlmICghZXJyb3JzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGlucHV0IGRhdGEnLFxuICAgICAgICAgIGRldGFpbHM6IGVycm9ycy5hcnJheSgpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgdG9rZW4sIHBhc3N3b3JkIH0gPSByZXEuYm9keTtcbiAgICBcbiAgICAvLyBIYXNoIHRoZSB0b2tlbiB0byBtYXRjaCBzdG9yZWQgdmVyc2lvblxuICAgIGNvbnN0IHJlc2V0VG9rZW5IYXNoID0gY3J5cHRvXG4gICAgICAuY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAgIC51cGRhdGUodG9rZW4pXG4gICAgICAuZGlnZXN0KCdoZXgnKTtcblxuICAgIC8vIEZpbmQgdXNlciB3aXRoIHZhbGlkIHJlc2V0IHRva2VuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZE9uZSh7XG4gICAgICBwYXNzd29yZFJlc2V0VG9rZW46IHJlc2V0VG9rZW5IYXNoLFxuICAgICAgcGFzc3dvcmRSZXNldEV4cGlyeTogeyAkZ3Q6IERhdGUubm93KCkgfVxuICAgIH0pO1xuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9UT0tFTicsXG4gICAgICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIHJlc2V0IHRva2VuIGlzIGludmFsaWQgb3IgaGFzIGV4cGlyZWQnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBwYXNzd29yZFxuICAgIHVzZXIucGFzc3dvcmQgPSBwYXNzd29yZDtcbiAgICB1c2VyLnBhc3N3b3JkUmVzZXRUb2tlbiA9IHVuZGVmaW5lZDtcbiAgICB1c2VyLnBhc3N3b3JkUmVzZXRFeHBpcnkgPSB1bmRlZmluZWQ7XG4gICAgYXdhaXQgdXNlci5zYXZlKCk7XG5cbiAgICAvLyBHZW5lcmF0ZSBuZXcgYXV0aCB0b2tlblxuICAgIGNvbnN0IGF1dGhUb2tlbiA9IGdlbmVyYXRlVG9rZW4odXNlci5faWQpO1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICdQYXNzd29yZCBoYXMgYmVlbiByZXNldCBzdWNjZXNzZnVsbHknLFxuICAgICAgdG9rZW46IGF1dGhUb2tlbixcbiAgICAgIHVzZXI6IHVzZXIudG9QdWJsaWNKU09OKClcbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Jlc2V0IHBhc3N3b3JkIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIGNvZGU6ICdSRVNFVF9QQVNTV09SRF9FUlJPUicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gcmVzZXQgcGFzc3dvcmQnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBHZXQgdXNlciBwcm9maWxlXG5yb3V0ZXIuZ2V0KCcvcHJvZmlsZScsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICB1c2VyOiByZXEudXNlci50b1B1YmxpY0pTT04oKVxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Byb2ZpbGUgZmV0Y2ggZXJyb3I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ1BST0ZJTEVfRkVUQ0hfRVJST1InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGZldGNoIHVzZXIgcHJvZmlsZSdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIFVwZGF0ZSB1c2VyIHByb2ZpbGUgd2l0aCBvcHRpbWlzdGljIHVwZGF0ZXMgYW5kIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxucm91dGVyLnB1dCgnL3Byb2ZpbGUnLCByZXF1aXJlQXV0aCwgW1xuICBib2R5KCdmaXJzdE5hbWUnKS5vcHRpb25hbCgpLnRyaW0oKS5pc0xlbmd0aCh7IG1pbjogMSwgbWF4OiA1MCB9KS53aXRoTWVzc2FnZSgnRmlyc3QgbmFtZSBtdXN0IGJlIDEtNTAgY2hhcmFjdGVycycpLFxuICBib2R5KCdsYXN0TmFtZScpLm9wdGlvbmFsKCkudHJpbSgpLmlzTGVuZ3RoKHsgbWluOiAxLCBtYXg6IDUwIH0pLndpdGhNZXNzYWdlKCdMYXN0IG5hbWUgbXVzdCBiZSAxLTUwIGNoYXJhY3RlcnMnKSxcbiAgYm9keSgncGhvbmUnKS5vcHRpb25hbCgpLmlzU3RyaW5nKCkuaXNMZW5ndGgoeyBtaW46IDcsIG1heDogMzAgfSkud2l0aE1lc3NhZ2UoJ1Bob25lIG11c3QgYmUgNy0zMCBjaGFyYWN0ZXJzJyksXG4gIGJvZHkoJ2VtYWlsJykub3B0aW9uYWwoKS5pc0VtYWlsKCkubm9ybWFsaXplRW1haWwoKS53aXRoTWVzc2FnZSgnVmFsaWQgZW1haWwgaXMgcmVxdWlyZWQnKSxcbiAgYm9keSgnYWRkcmVzc2VzJykub3B0aW9uYWwoKS5pc0FycmF5KCkud2l0aE1lc3NhZ2UoJ0FkZHJlc3NlcyBtdXN0IGJlIGFuIGFycmF5JyksXG4gIGJvZHkoJ2FkZHJlc3Nlcy4qLnN0cmVldCcpLm9wdGlvbmFsKCkudHJpbSgpLmlzTGVuZ3RoKHsgbWluOiAxLCBtYXg6IDEwMCB9KS53aXRoTWVzc2FnZSgnU3RyZWV0IG11c3QgYmUgMS0xMDAgY2hhcmFjdGVycycpLFxuICBib2R5KCdhZGRyZXNzZXMuKi5jaXR5Jykub3B0aW9uYWwoKS50cmltKCkuaXNMZW5ndGgoeyBtaW46IDEsIG1heDogNTAgfSkud2l0aE1lc3NhZ2UoJ0NpdHkgbXVzdCBiZSAxLTUwIGNoYXJhY3RlcnMnKSxcbiAgYm9keSgnYWRkcmVzc2VzLiouc3RhdGUnKS5vcHRpb25hbCgpLnRyaW0oKS5pc0xlbmd0aCh7IG1pbjogMiwgbWF4OiA1MCB9KS53aXRoTWVzc2FnZSgnU3RhdGUgbXVzdCBiZSAyLTUwIGNoYXJhY3RlcnMnKSxcbiAgYm9keSgnYWRkcmVzc2VzLiouemlwQ29kZScpLm9wdGlvbmFsKCkudHJpbSgpLmlzTGVuZ3RoKHsgbWluOiA1LCBtYXg6IDEwIH0pLndpdGhNZXNzYWdlKCdaSVAgY29kZSBtdXN0IGJlIDUtMTAgY2hhcmFjdGVycycpLFxuICBib2R5KCdhZGRyZXNzZXMuKi5jb3VudHJ5Jykub3B0aW9uYWwoKS50cmltKCkuaXNMZW5ndGgoeyBtaW46IDIsIG1heDogMiB9KS53aXRoTWVzc2FnZSgnQ291bnRyeSBtdXN0IGJlIDItbGV0dGVyIGNvZGUnKSxcbiAgYm9keSgncHJlZmVyZW5jZXMubm90aWZpY2F0aW9ucycpLm9wdGlvbmFsKCkuaXNCb29sZWFuKCkud2l0aE1lc3NhZ2UoJ05vdGlmaWNhdGlvbnMgbXVzdCBiZSBib29sZWFuJyksXG4gIGJvZHkoJ3ByZWZlcmVuY2VzLm5ld3NsZXR0ZXInKS5vcHRpb25hbCgpLmlzQm9vbGVhbigpLndpdGhNZXNzYWdlKCdOZXdzbGV0dGVyIG11c3QgYmUgYm9vbGVhbicpLFxuICBib2R5KCdwcmVmZXJlbmNlcy5lbWFpbFByZWZlcmVuY2VzJykub3B0aW9uYWwoKS5pc09iamVjdCgpLndpdGhNZXNzYWdlKCdFbWFpbCBwcmVmZXJlbmNlcyBtdXN0IGJlIGFuIG9iamVjdCcpXG5dLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgXG4gIHRyeSB7XG4gICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xuICAgIGlmICghZXJyb3JzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGlucHV0IGRhdGEnLFxuICAgICAgICAgIGRldGFpbHM6IGVycm9ycy5hcnJheSgpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZmlyc3ROYW1lLCBsYXN0TmFtZSwgcGhvbmUsIGVtYWlsLCBhZGRyZXNzZXMsIHByZWZlcmVuY2VzIH0gPSByZXEuYm9keTtcbiAgICBcbiAgICAvLyBCdWlsZCB1cGRhdGUgZGF0YSBvYmplY3RcbiAgICBjb25zdCB1cGRhdGVEYXRhID0ge307XG4gICAgaWYgKGZpcnN0TmFtZSAhPT0gdW5kZWZpbmVkKSB7dXBkYXRlRGF0YS5maXJzdE5hbWUgPSBmaXJzdE5hbWU7fVxuICAgIGlmIChsYXN0TmFtZSAhPT0gdW5kZWZpbmVkKSB7dXBkYXRlRGF0YS5sYXN0TmFtZSA9IGxhc3ROYW1lO31cbiAgICBpZiAocGhvbmUgIT09IHVuZGVmaW5lZCkge3VwZGF0ZURhdGEucGhvbmUgPSBwaG9uZTt9XG4gICAgaWYgKGVtYWlsICE9PSB1bmRlZmluZWQpIHt1cGRhdGVEYXRhLmVtYWlsID0gZW1haWw7fVxuICAgIGlmIChhZGRyZXNzZXMgIT09IHVuZGVmaW5lZCkge3VwZGF0ZURhdGEuYWRkcmVzc2VzID0gYWRkcmVzc2VzO31cbiAgICBcbiAgICAvLyBIYW5kbGUgbmVzdGVkIHByZWZlcmVuY2VzIHVwZGF0ZXNcbiAgICBpZiAocHJlZmVyZW5jZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdXBkYXRlRGF0YS5wcmVmZXJlbmNlcyA9IHsgXG4gICAgICAgIC4uLnJlcS51c2VyLnByZWZlcmVuY2VzPy50b09iamVjdD8uKCkgfHwgcmVxLnVzZXIucHJlZmVyZW5jZXMgfHwge30sXG4gICAgICAgIC4uLnByZWZlcmVuY2VzXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBIYW5kbGUgbmVzdGVkIGVtYWlsUHJlZmVyZW5jZXNcbiAgICAgIGlmIChwcmVmZXJlbmNlcy5lbWFpbFByZWZlcmVuY2VzKSB7XG4gICAgICAgIHVwZGF0ZURhdGEucHJlZmVyZW5jZXMuZW1haWxQcmVmZXJlbmNlcyA9IHtcbiAgICAgICAgICAuLi5yZXEudXNlci5wcmVmZXJlbmNlcz8uZW1haWxQcmVmZXJlbmNlcyB8fCB7fSxcbiAgICAgICAgICAuLi5wcmVmZXJlbmNlcy5lbWFpbFByZWZlcmVuY2VzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgZW1haWwgaXMgYmVpbmcgY2hhbmdlZCBhbmQgaWYgaXQncyBhbHJlYWR5IGluIHVzZVxuICAgIGlmIChlbWFpbCAmJiBlbWFpbCAhPT0gcmVxLnVzZXIuZW1haWwpIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGF3YWl0IFVzZXIuZmluZE9uZSh7IGVtYWlsLCBfaWQ6IHsgJG5lOiByZXEudXNlci5faWQgfSB9KTtcbiAgICAgIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA5KS5qc29uKHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgY29kZTogJ0VNQUlMX0VYSVNUUycsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRW1haWwgYWRkcmVzcyBpcyBhbHJlYWR5IGluIHVzZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB1c2VyIGRpcmVjdGx5XG4gICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkQW5kVXBkYXRlKFxuICAgICAgcmVxLnVzZXIuX2lkLFxuICAgICAgeyAkc2V0OiB1cGRhdGVEYXRhIH0sXG4gICAgICB7IG5ldzogdHJ1ZSwgcnVuVmFsaWRhdG9yczogdHJ1ZSB9XG4gICAgKTtcblxuICAgIGlmICghdXBkYXRlZFVzZXIpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdVU0VSX05PVF9GT1VORCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB0b3RhbER1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICAgIC8vIFNlbmQgc3VjY2VzcyByZXNwb25zZSB3aXRoIHBlcmZvcm1hbmNlIG1ldHJpY3NcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ1Byb2ZpbGUgdXBkYXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgZGF0YToge1xuICAgICAgICB1c2VyOiB1cGRhdGVkVXNlci50b1B1YmxpY0pTT04oKVxuICAgICAgfSxcbiAgICAgIHBlcmZvcm1hbmNlOiB7XG4gICAgICAgIGR1cmF0aW9uOiB0b3RhbER1cmF0aW9uLFxuICAgICAgICB0YXJnZXQ6ICcyMDBtcycsXG4gICAgICAgIHN0YXR1czogdG90YWxEdXJhdGlvbiA8PSAyMDAgPyAnb3B0aW1hbCcgOiAnbmVlZHNfb3B0aW1pemF0aW9uJ1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRW1haWwgbm90aWZpY2F0aW9uIGZvciBzZW5zaXRpdmUgY2hhbmdlcyB3b3VsZCBnbyBoZXJlIGlmIGVtYWlsIHNlcnZpY2UgaXMgY29uZmlndXJlZFxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignUHJvZmlsZSB1cGRhdGUgZXJyb3I6JywgZXJyb3IpO1xuICAgIFxuICAgIC8vIEhhbmRsZSBzcGVjaWZpYyBNb25nb0RCIGVycm9yc1xuICAgIGlmIChlcnJvci5jb2RlID09PSAxMTAwMCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA5KS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ0RVUExJQ0FURV9FTUFJTCcsXG4gICAgICAgICAgbWVzc2FnZTogJ0VtYWlsIGFkZHJlc3MgaXMgYWxyZWFkeSBpbiB1c2UnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ1BST0ZJTEVfVVBEQVRFX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGRhdGUgcHJvZmlsZSdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIENoYW5nZSBwYXNzd29yZFxucm91dGVyLnBvc3QoJy9jaGFuZ2UtcGFzc3dvcmQnLCByZXF1aXJlQXV0aCwgW1xuICBib2R5KCdjdXJyZW50UGFzc3dvcmQnKS5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKCdDdXJyZW50IHBhc3N3b3JkIGlzIHJlcXVpcmVkJyksXG4gIGJvZHkoJ25ld1Bhc3N3b3JkJykuaXNMZW5ndGgoeyBtaW46IDYgfSkud2l0aE1lc3NhZ2UoJ05ldyBwYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBsb25nJylcbl0sIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRpb25SZXN1bHQocmVxKTtcbiAgICBpZiAoIWVycm9ycy5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdWQUxJREFUSU9OX0VSUk9SJyxcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBpbnB1dCBkYXRhJyxcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvcnMuYXJyYXkoKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGN1cnJlbnRQYXNzd29yZCwgbmV3UGFzc3dvcmQgfSA9IHJlcS5ib2R5O1xuXG4gICAgLy8gR2V0IHVzZXIgd2l0aCBwYXNzd29yZCBmaWVsZFxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkKHJlcS51c2VyLl9pZCkuc2VsZWN0KCcrcGFzc3dvcmQnKTtcblxuICAgIC8vIFZlcmlmeSBjdXJyZW50IHBhc3N3b3JkXG4gICAgY29uc3QgaXNNYXRjaCA9IGF3YWl0IHVzZXIuY29tcGFyZVBhc3N3b3JkKGN1cnJlbnRQYXNzd29yZCk7XG4gICAgaWYgKCFpc01hdGNoKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9QQVNTV09SRCcsXG4gICAgICAgICAgbWVzc2FnZTogJ0N1cnJlbnQgcGFzc3dvcmQgaXMgaW5jb3JyZWN0J1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgcGFzc3dvcmRcbiAgICB1c2VyLnBhc3N3b3JkID0gbmV3UGFzc3dvcmQ7XG4gICAgYXdhaXQgdXNlci5zYXZlKCk7XG5cbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIGNoYW5nZWQgc3VjY2Vzc2Z1bGx5J1xuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Bhc3N3b3JkIGNoYW5nZSBlcnJvcjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjoge1xuICAgICAgICBjb2RlOiAnUEFTU1dPUkRfQ0hBTkdFX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBjaGFuZ2UgcGFzc3dvcmQnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBMb2dvdXQgKG9wdGlvbmFsIC0gbWFpbmx5IGZvciBzZXJ2ZXItc2lkZSBzZXNzaW9uIGNsZWFudXApXG5yb3V0ZXIucG9zdCgnL2xvZ291dCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5faWQ7XG4gICAgXG4gICAgLy8gTG9nb3V0IGV2ZW50IHdvdWxkIGJlIGVtaXR0ZWQgaGVyZSBpZiBldmVudCBzZXJ2aWNlIHdhcyBjb25maWd1cmVkXG5cbiAgICAvLyBDbGVhciBhbnkgc2VydmVyLXNpZGUgc2Vzc2lvbnMgYW5kIGNsZWFudXAgY2FydCBzdGF0ZVxuICAgIGlmIChyZXEuc2Vzc2lvbikge1xuICAgICAgLy8gQ2xlYXIgYW55IGNhcnQgc2Vzc2lvbiBJRHMgdG8gcHJldmVudCBnaG9zdCBjYXJ0c1xuICAgICAgZGVsZXRlIHJlcS5zZXNzaW9uLmNhcnRJZDtcbiAgICAgIGRlbGV0ZSByZXEuc2Vzc2lvbi5ndWVzdElkO1xuICAgICAgXG4gICAgICAvLyBDbGVhciB0aGUgc2Vzc2lvblxuICAgICAgcmVxLnNlc3Npb24uZGVzdHJveSgoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdTZXNzaW9uIGRlc3RydWN0aW9uIGVycm9yOicsIGVycik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiAnTG9nZ2VkIG91dCBzdWNjZXNzZnVsbHknLFxuICAgICAgY2FydENsZWFyZWQ6IHRydWUgLy8gU2lnbmFsIHRvIGZyb250ZW5kIHRvIGNsZWFyIGNhcnQgc3RhdGVcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdMb2dvdXQgZXJyb3I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ0xPR09VVF9FUlJPUicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gbG9nb3V0J1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcblxuLy8gQWRkcmVzcyBtYW5hZ2VtZW50IGVuZHBvaW50cyB3aXRob3V0IGF1dGhlbnRpY2F0aW9uIGxvc3NcblxuLy8gQWRkIG5ldyBhZGRyZXNzXG5yb3V0ZXIucG9zdCgnL2FkZHJlc3NlcycsIHJlcXVpcmVBdXRoLCBbXG4gIGJvZHkoJ3R5cGUnKS5pc0luKFsnc2hpcHBpbmcnLCAnYmlsbGluZyddKS53aXRoTWVzc2FnZSgnQWRkcmVzcyB0eXBlIG11c3QgYmUgc2hpcHBpbmcgb3IgYmlsbGluZycpLFxuICBib2R5KCdmaXJzdE5hbWUnKS50cmltKCkuaXNMZW5ndGgoeyBtaW46IDEsIG1heDogNTAgfSkud2l0aE1lc3NhZ2UoJ0ZpcnN0IG5hbWUgaXMgcmVxdWlyZWQnKSxcbiAgYm9keSgnbGFzdE5hbWUnKS50cmltKCkuaXNMZW5ndGgoeyBtaW46IDEsIG1heDogNTAgfSkud2l0aE1lc3NhZ2UoJ0xhc3QgbmFtZSBpcyByZXF1aXJlZCcpLFxuICBib2R5KCdzdHJlZXQnKS50cmltKCkuaXNMZW5ndGgoeyBtaW46IDEsIG1heDogMTAwIH0pLndpdGhNZXNzYWdlKCdTdHJlZXQgYWRkcmVzcyBpcyByZXF1aXJlZCcpLFxuICBib2R5KCdjaXR5JykudHJpbSgpLmlzTGVuZ3RoKHsgbWluOiAxLCBtYXg6IDUwIH0pLndpdGhNZXNzYWdlKCdDaXR5IGlzIHJlcXVpcmVkJyksXG4gIGJvZHkoJ3N0YXRlJykudHJpbSgpLmlzTGVuZ3RoKHsgbWluOiAxLCBtYXg6IDUwIH0pLndpdGhNZXNzYWdlKCdTdGF0ZSBpcyByZXF1aXJlZCcpLFxuICBib2R5KCd6aXBDb2RlJykudHJpbSgpLmlzTGVuZ3RoKHsgbWluOiAzLCBtYXg6IDIwIH0pLndpdGhNZXNzYWdlKCdaSVAgY29kZSBpcyByZXF1aXJlZCcpLFxuICBib2R5KCdjb3VudHJ5Jykub3B0aW9uYWwoKS50cmltKCkuaXNMZW5ndGgoeyBtaW46IDIsIG1heDogMyB9KS53aXRoTWVzc2FnZSgnQ291bnRyeSBjb2RlIG11c3QgYmUgMi0zIGNoYXJhY3RlcnMnKSxcbiAgYm9keSgncGhvbmUnKS5vcHRpb25hbCgpLmlzU3RyaW5nKCkuaXNMZW5ndGgoeyBtaW46IDcsIG1heDogMzAgfSkud2l0aE1lc3NhZ2UoJ1Bob25lIG11c3QgYmUgNy0zMCBjaGFyYWN0ZXJzJyksXG4gIGJvZHkoJ2lzRGVmYXVsdCcpLm9wdGlvbmFsKCkuaXNCb29sZWFuKCkud2l0aE1lc3NhZ2UoJ2lzRGVmYXVsdCBtdXN0IGJlIGJvb2xlYW4nKVxuXSwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xuICAgIGlmICghZXJyb3JzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGFkZHJlc3MgZGF0YScsXG4gICAgICAgICAgZGV0YWlsczogZXJyb3JzLmFycmF5KClcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkcmVzc0RhdGEgPSB7XG4gICAgICB0eXBlOiByZXEuYm9keS50eXBlLFxuICAgICAgZmlyc3ROYW1lOiByZXEuYm9keS5maXJzdE5hbWUsXG4gICAgICBsYXN0TmFtZTogcmVxLmJvZHkubGFzdE5hbWUsXG4gICAgICBzdHJlZXQ6IHJlcS5ib2R5LnN0cmVldCxcbiAgICAgIGNpdHk6IHJlcS5ib2R5LmNpdHksXG4gICAgICBzdGF0ZTogcmVxLmJvZHkuc3RhdGUsXG4gICAgICB6aXBDb2RlOiByZXEuYm9keS56aXBDb2RlLFxuICAgICAgY291bnRyeTogcmVxLmJvZHkuY291bnRyeSB8fCAnVVMnLFxuICAgICAgcGhvbmU6IHJlcS5ib2R5LnBob25lLFxuICAgICAgaXNEZWZhdWx0OiByZXEuYm9keS5pc0RlZmF1bHQgfHwgZmFsc2VcbiAgICB9O1xuXG4gICAgLy8gQWRkIGFkZHJlc3MgdG8gdXNlclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkKHJlcS51c2VyLl9pZCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnVVNFUl9OT1RfRk9VTkQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBhZGRyZXNzZXMgYXJyYXkgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgIGlmICghdXNlci5hZGRyZXNzZXMpIHtcbiAgICAgIHVzZXIuYWRkcmVzc2VzID0gW107XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBpcyB0aGUgZGVmYXVsdCBhZGRyZXNzLCB1bnNldCBvdGhlciBkZWZhdWx0c1xuICAgIGlmIChhZGRyZXNzRGF0YS5pc0RlZmF1bHQpIHtcbiAgICAgIHVzZXIuYWRkcmVzc2VzLmZvckVhY2goYWRkciA9PiB7XG4gICAgICAgIGFkZHIuaXNEZWZhdWx0ID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB1c2VyLmFkZHJlc3Nlcy5wdXNoKGFkZHJlc3NEYXRhKTtcbiAgICBhd2FpdCB1c2VyLnNhdmUoKTtcblxuICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiAnQWRkcmVzcyBhZGRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgdXNlcjogdXNlci50b1B1YmxpY0pTT04oKVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignQWRkIGFkZHJlc3MgZXJyb3I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ0FERFJFU1NfQUREX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBhZGQgYWRkcmVzcydcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIFVwZGF0ZSBleGlzdGluZyBhZGRyZXNzXG5yb3V0ZXIucHV0KCcvYWRkcmVzc2VzLzphZGRyZXNzSWQnLCByZXF1aXJlQXV0aCwgW1xuICBib2R5KCd0eXBlJykub3B0aW9uYWwoKS5pc0luKFsnc2hpcHBpbmcnLCAnYmlsbGluZyddKS53aXRoTWVzc2FnZSgnQWRkcmVzcyB0eXBlIG11c3QgYmUgc2hpcHBpbmcgb3IgYmlsbGluZycpLFxuICBib2R5KCdmaXJzdE5hbWUnKS5vcHRpb25hbCgpLnRyaW0oKS5pc0xlbmd0aCh7IG1pbjogMSwgbWF4OiA1MCB9KS53aXRoTWVzc2FnZSgnRmlyc3QgbmFtZSBtdXN0IGJlIDEtNTAgY2hhcmFjdGVycycpLFxuICBib2R5KCdsYXN0TmFtZScpLm9wdGlvbmFsKCkudHJpbSgpLmlzTGVuZ3RoKHsgbWluOiAxLCBtYXg6IDUwIH0pLndpdGhNZXNzYWdlKCdMYXN0IG5hbWUgbXVzdCBiZSAxLTUwIGNoYXJhY3RlcnMnKSxcbiAgYm9keSgnc3RyZWV0Jykub3B0aW9uYWwoKS50cmltKCkuaXNMZW5ndGgoeyBtaW46IDEsIG1heDogMTAwIH0pLndpdGhNZXNzYWdlKCdTdHJlZXQgbXVzdCBiZSAxLTEwMCBjaGFyYWN0ZXJzJyksXG4gIGJvZHkoJ2NpdHknKS5vcHRpb25hbCgpLnRyaW0oKS5pc0xlbmd0aCh7IG1pbjogMSwgbWF4OiA1MCB9KS53aXRoTWVzc2FnZSgnQ2l0eSBtdXN0IGJlIDEtNTAgY2hhcmFjdGVycycpLFxuICBib2R5KCdzdGF0ZScpLm9wdGlvbmFsKCkudHJpbSgpLmlzTGVuZ3RoKHsgbWluOiAxLCBtYXg6IDUwIH0pLndpdGhNZXNzYWdlKCdTdGF0ZSBtdXN0IGJlIDEtNTAgY2hhcmFjdGVycycpLFxuICBib2R5KCd6aXBDb2RlJykub3B0aW9uYWwoKS50cmltKCkuaXNMZW5ndGgoeyBtaW46IDMsIG1heDogMjAgfSkud2l0aE1lc3NhZ2UoJ1pJUCBjb2RlIG11c3QgYmUgMy0yMCBjaGFyYWN0ZXJzJyksXG4gIGJvZHkoJ2NvdW50cnknKS5vcHRpb25hbCgpLnRyaW0oKS5pc0xlbmd0aCh7IG1pbjogMiwgbWF4OiAzIH0pLndpdGhNZXNzYWdlKCdDb3VudHJ5IGNvZGUgbXVzdCBiZSAyLTMgY2hhcmFjdGVycycpLFxuICBib2R5KCdwaG9uZScpLm9wdGlvbmFsKCkuaXNTdHJpbmcoKS5pc0xlbmd0aCh7IG1pbjogNywgbWF4OiAzMCB9KS53aXRoTWVzc2FnZSgnUGhvbmUgbXVzdCBiZSA3LTMwIGNoYXJhY3RlcnMnKSxcbiAgYm9keSgnaXNEZWZhdWx0Jykub3B0aW9uYWwoKS5pc0Jvb2xlYW4oKS53aXRoTWVzc2FnZSgnaXNEZWZhdWx0IG11c3QgYmUgYm9vbGVhbicpXG5dLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0aW9uUmVzdWx0KHJlcSk7XG4gICAgaWYgKCFlcnJvcnMuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnVkFMSURBVElPTl9FUlJPUicsXG4gICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgYWRkcmVzcyBkYXRhJyxcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvcnMuYXJyYXkoKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGFkZHJlc3NJZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCB1cGRhdGVEYXRhID0ge307XG4gICAgXG4gICAgLy8gT25seSBpbmNsdWRlIGZpZWxkcyB0aGF0IGFyZSBwcm92aWRlZFxuICAgIFsndHlwZScsICdmaXJzdE5hbWUnLCAnbGFzdE5hbWUnLCAnc3RyZWV0JywgJ2NpdHknLCAnc3RhdGUnLCAnemlwQ29kZScsICdjb3VudHJ5JywgJ3Bob25lJywgJ2lzRGVmYXVsdCddXG4gICAgICAuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgIGlmIChyZXEuYm9keVtmaWVsZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwZGF0ZURhdGFbZmllbGRdID0gcmVxLmJvZHlbZmllbGRdO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBhZGRyZXNzXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQocmVxLnVzZXIuX2lkKTtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdVU0VSX05PVF9GT1VORCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBhZGRyZXNzSW5kZXggPSB1c2VyLmFkZHJlc3Nlcy5maW5kSW5kZXgoYWRkciA9PiBhZGRyLl9pZC50b1N0cmluZygpID09PSBhZGRyZXNzSWQpO1xuICAgIGlmIChhZGRyZXNzSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnQUREUkVTU19OT1RfRk9VTkQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdBZGRyZXNzIG5vdCBmb3VuZCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSWYgc2V0dGluZyBhcyBkZWZhdWx0LCB1bnNldCBvdGhlciBkZWZhdWx0c1xuICAgIGlmICh1cGRhdGVEYXRhLmlzRGVmYXVsdCkge1xuICAgICAgdXNlci5hZGRyZXNzZXMuZm9yRWFjaCgoYWRkciwgaWR4KSA9PiB7XG4gICAgICAgIGlmIChpZHggIT09IGFkZHJlc3NJbmRleCkge1xuICAgICAgICAgIGFkZHIuaXNEZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgYWRkcmVzc1xuICAgIE9iamVjdC5hc3NpZ24odXNlci5hZGRyZXNzZXNbYWRkcmVzc0luZGV4XSwgdXBkYXRlRGF0YSk7XG4gICAgYXdhaXQgdXNlci5zYXZlKCk7XG5cbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ0FkZHJlc3MgdXBkYXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgdXNlcjogdXNlci50b1B1YmxpY0pTT04oKVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignVXBkYXRlIGFkZHJlc3MgZXJyb3I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ0FERFJFU1NfVVBEQVRFX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGRhdGUgYWRkcmVzcydcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIERlbGV0ZSBhZGRyZXNzXG5yb3V0ZXIuZGVsZXRlKCcvcHJvZmlsZS9hZGRyZXNzZXMvOmFkZHJlc3NJZCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGFkZHJlc3NJZCB9ID0gcmVxLnBhcmFtcztcblxuICAgIC8vIERlbGV0ZSBhZGRyZXNzXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQocmVxLnVzZXIuX2lkKTtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdVU0VSX05PVF9GT1VORCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBhZGRyZXNzSW5kZXggPSB1c2VyLmFkZHJlc3Nlcy5maW5kSW5kZXgoYWRkciA9PiBhZGRyLl9pZC50b1N0cmluZygpID09PSBhZGRyZXNzSWQpO1xuICAgIGlmIChhZGRyZXNzSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnQUREUkVTU19OT1RfRk9VTkQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdBZGRyZXNzIG5vdCBmb3VuZCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXNlci5hZGRyZXNzZXMuc3BsaWNlKGFkZHJlc3NJbmRleCwgMSk7XG4gICAgYXdhaXQgdXNlci5zYXZlKCk7XG5cbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ0FkZHJlc3MgZGVsZXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgdXNlcjogdXNlci50b1B1YmxpY0pTT04oKVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRGVsZXRlIGFkZHJlc3MgZXJyb3I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ0FERFJFU1NfREVMRVRFX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBkZWxldGUgYWRkcmVzcydcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIFNldCBkZWZhdWx0IGFkZHJlc3NcbnJvdXRlci5wYXRjaCgnL3Byb2ZpbGUvYWRkcmVzc2VzLzphZGRyZXNzSWQvZGVmYXVsdCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGFkZHJlc3NJZCB9ID0gcmVxLnBhcmFtcztcblxuICAgIC8vIFNldCBkZWZhdWx0IGFkZHJlc3NcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlJZChyZXEudXNlci5faWQpO1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ1VTRVJfTk9UX0ZPVU5EJyxcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciBub3QgZm91bmQnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZHJlc3NJbmRleCA9IHVzZXIuYWRkcmVzc2VzLmZpbmRJbmRleChhZGRyID0+IGFkZHIuX2lkLnRvU3RyaW5nKCkgPT09IGFkZHJlc3NJZCk7XG4gICAgaWYgKGFkZHJlc3NJbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdBRERSRVNTX05PVF9GT1VORCcsXG4gICAgICAgICAgbWVzc2FnZTogJ0FkZHJlc3Mgbm90IGZvdW5kJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBVbnNldCBhbGwgb3RoZXIgZGVmYXVsdHNcbiAgICB1c2VyLmFkZHJlc3Nlcy5mb3JFYWNoKChhZGRyLCBpZHgpID0+IHtcbiAgICAgIGFkZHIuaXNEZWZhdWx0ID0gaWR4ID09PSBhZGRyZXNzSW5kZXg7XG4gICAgfSk7XG4gICAgXG4gICAgYXdhaXQgdXNlci5zYXZlKCk7XG5cbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ0RlZmF1bHQgYWRkcmVzcyB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICB1c2VyOiB1c2VyLnRvUHVibGljSlNPTigpXG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdTZXQgZGVmYXVsdCBhZGRyZXNzIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIGNvZGU6ICdBRERSRVNTX0RFRkFVTFRfRVJST1InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHNldCBkZWZhdWx0IGFkZHJlc3MnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBSZWZyZXNoIHRva2VuIGVuZHBvaW50XG5yb3V0ZXIucG9zdCgnL3JlZnJlc2gtdG9rZW4nLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHRva2VuIH0gPSByZXEuYm9keTtcbiAgICBcbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnTUlTU0lOR19UT0tFTicsXG4gICAgICAgICAgbWVzc2FnZTogJ1Rva2VuIGlzIHJlcXVpcmVkJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWNvZGVkID0gand0LnZlcmlmeSh0b2tlbiwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCk7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQoZGVjb2RlZC51c2VySWQpO1xuICAgIFxuICAgIGlmICghdXNlciB8fCAhdXNlci5pc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ0lOVkFMSURfVE9LRU4nLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHRva2VuJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdUb2tlbiA9IGdlbmVyYXRlVG9rZW4odXNlci5faWQpO1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICB0b2tlbjogbmV3VG9rZW4sXG4gICAgICB1c2VyOiB1c2VyLnRvUHVibGljSlNPTigpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignVG9rZW4gcmVmcmVzaCBlcnJvcjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjoge1xuICAgICAgICBjb2RlOiAnVE9LRU5fUkVGUkVTSF9FUlJPUicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gcmVmcmVzaCB0b2tlbidcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm91dGVyOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xDLE1BQU1DLE1BQU0sR0FBR0YsT0FBTyxDQUFDRyxNQUFNLENBQUMsQ0FBQztBQUMvQixNQUFNQyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDbkMsTUFBTUksTUFBTSxHQUFHSixPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ2hDLE1BQU07RUFBRUssSUFBSTtFQUFFQztBQUFpQixDQUFDLEdBQUdOLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUMvRCxNQUFNTyxJQUFJLEdBQUdQ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