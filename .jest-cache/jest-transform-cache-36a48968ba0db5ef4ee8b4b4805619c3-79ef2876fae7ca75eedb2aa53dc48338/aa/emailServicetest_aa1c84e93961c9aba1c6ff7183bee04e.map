{"version":3,"names":["_getJestObj","unmock","mock","jest","require","nodemailer","sendOrderConfirmation","sendWelcomeEmail","sendPaymentReceipt","emailTemplates","describe","originalEnv","process","env","beforeEach","resetModules","afterAll","test","EMAIL_HOST","EMAIL_USER","result","orderNumber","customerName","items","total","shippingAddress","firstName","lastName","street","city","state","zipCode","country","expect","success","toBe","message","EMAIL_PASS","mockTransporter","sendMail","fn","mockRejectedValue","Error","createTransport","mockReturnValue","email","error","toBeDefined","orderData","productName","quantity","price","template","orderConfirmation","subject","text","toContain","html","paymentData","paymentMethod","transactionId","paidAt","Date","paymentReceipt","userData","welcomeEmail","statusData","status","trackingNumber","orderStatusUpdate","resetData","resetToken","resetUrl","passwordReset"],"sources":["emailService.test.js"],"sourcesContent":["// Clear the global mock for emailService to test the actual implementation\njest.unmock('../../utils/emailService');\n\n// Mock nodemailer for this test\njest.mock('nodemailer');\nconst nodemailer = require('nodemailer');\n\nconst {\n  sendOrderConfirmation,\n  sendWelcomeEmail,\n  sendPaymentReceipt,\n  emailTemplates\n} = require('../../utils/emailService');\n\ndescribe('Email Service Unit Tests', () => {\n  // Mock environment variables\n  const originalEnv = process.env;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...originalEnv };\n  });\n\n  afterAll(() => {\n    process.env = originalEnv;\n  });\n\n  describe('Email Service Configuration', () => {\n    test('should skip emails when not configured', async () => {\n      // Remove email configuration\n      delete process.env.EMAIL_HOST;\n      delete process.env.EMAIL_USER;\n\n      const result = await sendOrderConfirmation('test@example.com', {\n        orderNumber: 'TEST-123',\n        customerName: 'Test User',\n        items: [],\n        total: 100,\n        shippingAddress: {\n          firstName: 'Test',\n          lastName: 'User',\n          street: '123 Test St',\n          city: 'Test City',\n          state: 'TS',\n          zipCode: '12345',\n          country: 'US'\n        }\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.message).toBe('Email skipped - not configured');\n    });\n\n    test('should handle email sending errors gracefully', async () => {\n      // Set up email config\n      process.env.EMAIL_HOST = 'smtp.test.com';\n      process.env.EMAIL_USER = 'test@test.com';\n      process.env.EMAIL_PASS = 'testpass';\n\n      // Mock nodemailer to simulate SMTP failure\n      const mockTransporter = {\n        sendMail: jest.fn().mockRejectedValue(new Error('SMTP connection failed'))\n      };\n      nodemailer.createTransport = jest.fn().mockReturnValue(mockTransporter);\n\n      // Email will fail because the SMTP server doesn't exist\n      const result = await sendWelcomeEmail('test@example.com', {\n        firstName: 'Test',\n        email: 'test@example.com'\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBeDefined();\n    });\n  });\n\n  describe('Email Templates', () => {\n    test('should generate order confirmation template', () => {\n      const orderData = {\n        orderNumber: 'ORD-12345',\n        customerName: 'John Doe',\n        items: [\n          { productName: 'Crystal', quantity: 2, price: 29.99 },\n          { productName: 'Essential Oil', quantity: 1, price: 19.99 }\n        ],\n        total: 79.97,\n        shippingAddress: {\n          firstName: 'John',\n          lastName: 'Doe',\n          street: '123 Main St',\n          city: 'Paris',\n          state: 'IDF',\n          zipCode: '75001',\n          country: 'FR'\n        }\n      };\n\n      const template = emailTemplates.orderConfirmation(orderData);\n      \n      expect(template.subject).toBe('Order Confirmation - ORD-12345');\n      expect(template.text).toContain('John Doe');\n      expect(template.text).toContain('Crystal (Qty: 2) - $29.99');\n      expect(template.text).toContain('Essential Oil (Qty: 1) - $19.99');\n      expect(template.text).toContain('$79.97');\n      expect(template.html).toContain('<h2');\n      expect(template.html).toContain('Order Confirmation');\n    });\n\n    test('should generate payment receipt template', () => {\n      const paymentData = {\n        orderNumber: 'ORD-12345',\n        customerName: 'Jane Smith',\n        total: 99.99,\n        paymentMethod: 'Credit Card',\n        transactionId: 'TXN-98765',\n        paidAt: new Date('2024-01-15')\n      };\n\n      const template = emailTemplates.paymentReceipt(paymentData);\n      \n      expect(template.subject).toBe('Payment Receipt - ORD-12345');\n      expect(template.text).toContain('Jane Smith');\n      expect(template.text).toContain('$99.99');\n      expect(template.text).toContain('TXN-98765');\n      expect(template.html).toContain('Payment Receipt');\n    });\n\n    test('should generate welcome email template', () => {\n      const userData = {\n        firstName: 'Alice',\n        email: 'alice@example.com'\n      };\n\n      const template = emailTemplates.welcomeEmail(userData);\n      \n      expect(template.subject).toBe('Welcome to Our Holistic Store!');\n      expect(template.text).toContain('Dear Alice');\n      expect(template.text).toContain('holistic wellness community');\n      expect(template.html).toContain('Welcome to Our Holistic Store!');\n    });\n\n    test('should generate order status update template', () => {\n      const statusData = {\n        orderNumber: 'ORD-12345',\n        customerName: 'Bob Johnson',\n        status: 'shipped',\n        trackingNumber: 'TRACK-123456'\n      };\n\n      const template = emailTemplates.orderStatusUpdate(statusData);\n      \n      expect(template.subject).toBe('Order Update - ORD-12345');\n      expect(template.text).toContain('Bob Johnson');\n      expect(template.text).toContain('Status: Shipped');\n      expect(template.text).toContain('Your order has been shipped');\n      expect(template.text).toContain('TRACK-123456');\n    });\n\n    test('should generate password reset template', () => {\n      const resetData = {\n        firstName: 'Charlie',\n        resetToken: 'reset-token-123',\n        resetUrl: 'https://example.com/reset?token=reset-token-123'\n      };\n\n      const template = emailTemplates.passwordReset(resetData);\n      \n      expect(template.subject).toBe('Password Reset Request');\n      expect(template.text).toContain('Dear Charlie');\n      expect(template.text).toContain(resetData.resetUrl);\n      expect(template.text).toContain('expire in 1 hour');\n      expect(template.html).toContain('Reset Password');\n    });\n  });\n});"],"mappings":"AAAA;;AAGA;AAFAA,WAAA,GAAKC,MAAM,CAAC,0BAA0B,CAAC;AAGvCD,WAAA,GAAKE,IAAI,CAAC,YAAY,CAAC;AAAC,SAAAF,YAAA;EAAA;IAAAG;EAAA,IAAAC,OAAA;EAAAJ,WAAA,GAAAA,CAAA,KAAAG,IAAA;EAAA,OAAAA,IAAA;AAAA;AACxB,MAAME,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AAExC,MAAM;EACJE,qBAAqB;EACrBC,gBAAgB;EAChBC,kBAAkB;EAClBC;AACF,CAAC,GAAGL,OAAO,CAAC,0BAA0B,CAAC;AAEvCM,QAAQ,CAAC,0BAA0B,EAAE,MAAM;EACzC;EACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG;EAE/BC,UAAU,CAAC,MAAM;IACfX,IAAI,CAACY,YAAY,CAAC,CAAC;IACnBH,OAAO,CAACC,GAAG,GAAG;MAAE,GAAGF;IAAY,CAAC;EAClC,CAAC,CAAC;EAEFK,QAAQ,CAAC,MAAM;IACbJ,OAAO,CAACC,GAAG,GAAGF,WAAW;EAC3B,CAAC,CAAC;EAEFD,QAAQ,CAAC,6BAA6B,EAAE,MAAM;IAC5CO,IAAI,CAAC,wCAAwC,EAAE,YAAY;MACzD;MACA,OAAOL,OAAO,CAACC,GAAG,CAACK,UAAU;MAC7B,OAAON,OAAO,CAACC,GAAG,CAACM,UAAU;MAE7B,MAAMC,MAAM,GAAG,MAAMd,qBAAqB,CAAC,kBAAkB,EAAE;QAC7De,WAAW,EAAE,UAAU;QACvBC,YAAY,EAAE,WAAW;QACzBC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE,GAAG;QACVC,eAAe,EAAE;UACfC,SAAS,EAAE,MAAM;UACjBC,QAAQ,EAAE,MAAM;UAChBC,MAAM,EAAE,aAAa;UACrBC,IAAI,EAAE,WAAW;UACjBC,KAAK,EAAE,IAAI;UACXC,OAAO,EAAE,OAAO;UAChBC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;MAEFC,MAAM,CAACb,MAAM,CAACc,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACjCF,MAAM,CAACb,MAAM,CAACgB,OAAO,CAAC,CAACD,IAAI,CAAC,gCAAgC,CAAC;IAC/D,CAAC,CAAC;IAEFlB,IAAI,CAAC,+CAA+C,EAAE,YAAY;MAChE;MACAL,OAAO,CAACC,GAAG,CAACK,UAAU,GAAG,eAAe;MACxCN,OAAO,CAACC,GAAG,CAACM,UAAU,GAAG,eAAe;MACxCP,OAAO,CAACC,GAAG,CAACwB,UAAU,GAAG,UAAU;;MAEnC;MACA,MAAMC,eAAe,GAAG;QACtBC,QAAQ,EAAEpC,IAAI,CAACqC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC3E,CAAC;MACDrC,UAAU,CAACsC,eAAe,GAAGxC,IAAI,CAACqC,EAAE,CAAC,CAAC,CAACI,eAAe,CAACN,eAAe,CAAC;;MAEvE;MACA,MAAMlB,MAAM,GAAG,MAAMb,gBAAgB,CAAC,kBAAkB,EAAE;QACxDmB,SAAS,EAAE,MAAM;QACjBmB,KAAK,EAAE;MACT,CAAC,CAAC;MAEFZ,MAAM,CAACb,MAAM,CAACc,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;MAClCF,MAAM,CAACb,MAAM,CAAC0B,KAAK,CAAC,CAACC,WAAW,CAAC,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFrC,QAAQ,CAAC,iBAAiB,EAAE,MAAM;IAChCO,IAAI,CAAC,6CAA6C,EAAE,MAAM;MACxD,MAAM+B,SAAS,GAAG;QAChB3B,WAAW,EAAE,WAAW;QACxBC,YAAY,EAAE,UAAU;QACxBC,KAAK,EAAE,CACL;UAAE0B,WAAW,EAAE,SAAS;UAAEC,QAAQ,EAAE,CAAC;UAAEC,KAAK,EAAE;QAAM,CAAC,EACrD;UAAEF,WAAW,EAAE,eAAe;UAAEC,QAAQ,EAAE,CAAC;UAAEC,KAAK,EAAE;QAAM,CAAC,CAC5D;QACD3B,KAAK,EAAE,KAAK;QACZC,eAAe,EAAE;UACfC,SAAS,EAAE,MAAM;UACjBC,QAAQ,EAAE,KAAK;UACfC,MAAM,EAAE,aAAa;UACrBC,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE,KAAK;UACZC,OAAO,EAAE,OAAO;UAChBC,OAAO,EAAE;QACX;MACF,CAAC;MAED,MAAMoB,QAAQ,GAAG3C,cAAc,CAAC4C,iBAAiB,CAACL,SAAS,CAAC;MAE5Df,MAAM,CAACmB,QAAQ,CAACE,OAAO,CAAC,CAACnB,IAAI,CAAC,gCAAgC,CAAC;MAC/DF,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,UAAU,CAAC;MAC3CvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,2BAA2B,CAAC;MAC5DvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,iCAAiC,CAAC;MAClEvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,QAAQ,CAAC;MACzCvB,MAAM,CAACmB,QAAQ,CAACK,IAAI,CAAC,CAACD,SAAS,CAAC,KAAK,CAAC;MACtCvB,MAAM,CAACmB,QAAQ,CAACK,IAAI,CAAC,CAACD,SAAS,CAAC,oBAAoB,CAAC;IACvD,CAAC,CAAC;IAEFvC,IAAI,CAAC,0CAA0C,EAAE,MAAM;MACrD,MAAMyC,WAAW,GAAG;QAClBrC,WAAW,EAAE,WAAW;QACxBC,YAAY,EAAE,YAAY;QAC1BE,KAAK,EAAE,KAAK;QACZmC,aAAa,EAAE,aAAa;QAC5BC,aAAa,EAAE,WAAW;QAC1BC,MAAM,EAAE,IAAIC,IAAI,CAAC,YAAY;MAC/B,CAAC;MAED,MAAMV,QAAQ,GAAG3C,cAAc,CAACsD,cAAc,CAACL,WAAW,CAAC;MAE3DzB,MAAM,CAACmB,QAAQ,CAACE,OAAO,CAAC,CAACnB,IAAI,CAAC,6BAA6B,CAAC;MAC5DF,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,YAAY,CAAC;MAC7CvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,QAAQ,CAAC;MACzCvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,WAAW,CAAC;MAC5CvB,MAAM,CAACmB,QAAQ,CAACK,IAAI,CAAC,CAACD,SAAS,CAAC,iBAAiB,CAAC;IACpD,CAAC,CAAC;IAEFvC,IAAI,CAAC,wCAAwC,EAAE,MAAM;MACnD,MAAM+C,QAAQ,GAAG;QACftC,SAAS,EAAE,OAAO;QAClBmB,KAAK,EAAE;MACT,CAAC;MAED,MAAMO,QAAQ,GAAG3C,cAAc,CAACwD,YAAY,CAACD,QAAQ,CAAC;MAEtD/B,MAAM,CAACmB,QAAQ,CAACE,OAAO,CAAC,CAACnB,IAAI,CAAC,gCAAgC,CAAC;MAC/DF,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,YAAY,CAAC;MAC7CvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,6BAA6B,CAAC;MAC9DvB,MAAM,CAACmB,QAAQ,CAACK,IAAI,CAAC,CAACD,SAAS,CAAC,gCAAgC,CAAC;IACnE,CAAC,CAAC;IAEFvC,IAAI,CAAC,8CAA8C,EAAE,MAAM;MACzD,MAAMiD,UAAU,GAAG;QACjB7C,WAAW,EAAE,WAAW;QACxBC,YAAY,EAAE,aAAa;QAC3B6C,MAAM,EAAE,SAAS;QACjBC,cAAc,EAAE;MAClB,CAAC;MAED,MAAMhB,QAAQ,GAAG3C,cAAc,CAAC4D,iBAAiB,CAACH,UAAU,CAAC;MAE7DjC,MAAM,CAACmB,QAAQ,CAACE,OAAO,CAAC,CAACnB,IAAI,CAAC,0BAA0B,CAAC;MACzDF,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,aAAa,CAAC;MAC9CvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,iBAAiB,CAAC;MAClDvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,6BAA6B,CAAC;MAC9DvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,cAAc,CAAC;IACjD,CAAC,CAAC;IAEFvC,IAAI,CAAC,yCAAyC,EAAE,MAAM;MACpD,MAAMqD,SAAS,GAAG;QAChB5C,SAAS,EAAE,SAAS;QACpB6C,UAAU,EAAE,iBAAiB;QAC7BC,QAAQ,EAAE;MACZ,CAAC;MAED,MAAMpB,QAAQ,GAAG3C,cAAc,CAACgE,aAAa,CAACH,SAAS,CAAC;MAExDrC,MAAM,CAACmB,QAAQ,CAACE,OAAO,CAAC,CAACnB,IAAI,CAAC,wBAAwB,CAAC;MACvDF,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,cAAc,CAAC;MAC/CvB,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAACc,SAAS,CAACE,QAAQ,CAAC;MACnDvC,MAAM,CAACmB,QAAQ,CAACG,IAAI,CAAC,CAACC,SAAS,CAAC,kBAAkB,CAAC;MACnDvB,MAAM,CAACmB,QAAQ,CAACK,IAAI,CAAC,CAACD,SAAS,CAAC,gBAAgB,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}