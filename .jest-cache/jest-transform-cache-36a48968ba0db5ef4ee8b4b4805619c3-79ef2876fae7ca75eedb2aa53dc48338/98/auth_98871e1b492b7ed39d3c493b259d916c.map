{"version":3,"names":["express","require","router","Router","jwt","crypto","body","validationResult","User","requireAuth","authService","cartService","generateToken","userId","sign","process","env","JWT_SECRET","expiresIn","validateRegistration","isEmail","normalizeEmail","withMessage","isLength","min","trim","max","optional","isString","validateLogin","notEmpty","validateForgotPassword","validateResetPassword","post","req","res","errors","isEmpty","status","json","success","error","code","message","details","array","email","password","firstName","lastName","phone","preferences","existingUser","findOne","userData","user","create","token","_id","lastLogin","Date","save","wantsEmail","sendWelcomeEmail","welcomeData","emailResult","console","emailError","toPublicJSON","guestCartItems","isMatch","comparePassword","isActive","cartInfo","itemCount","mergedItems","Array","isArray","length","mergeResult","mergeCartsWithConflictResolution","sessionID","preservedCart","conflicts","duration","mergeError","emit","timestamp","ip","userAgent","get","cart","resetToken","resetTokenHash","randomBytes","toString","createHash","update","digest","passwordResetToken","passwordResetExpiry","now","sendPasswordResetEmail","resetUrl","FRONTEND_URL","log","Promise","resolve","setTimeout","Math","random","$gt","undefined","authToken","put","isBoolean","isObject","startTime","updateData","toObject","emailPreferences","auditContext","sessionId","updateResult","updateProfileOptimistically","includes","totalDuration","addresses","createdAt","updatedAt","performance","target","notifyUserOfSensitiveChange","currentPassword","newPassword","findById","select","session","cartId","guestId","destroy","err","cartCleared","isIn","addressData","type","street","city","state","zipCode","country","isDefault","result","manageAddressOptimistically","addressId","params","forEach","field","delete","patch","decoded","verify","newToken","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\nconst { body, validationResult } = require('express-validator');\nconst User = require('../models/User');\nconst { requireAuth } = require('../middleware/auth');\nconst authService = require('../services/authService');\nconst cartService = require('../services/cartService');\n\n// Generate JWT token\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '7d' });\n};\n\n// Validation middleware for registration\nconst validateRegistration = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long'),\n  body('firstName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('First name is required and must be less than 50 characters'),\n  body('lastName')\n    .trim()\n    .isLength({ min: 1, max: 50 })\n    .withMessage('Last name is required and must be less than 50 characters'),\n  body('phone')\n    .optional()\n    .isString()\n    .isLength({ min: 7, max: 30 })\n    .withMessage('Phone number must be between 7 and 30 characters')\n];\n\n// Validation middleware for login\nconst validateLogin = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\n// Validation for forgot password\nconst validateForgotPassword = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required')\n];\n\n// Validation for reset password\nconst validateResetPassword = [\n  body('token')\n    .notEmpty()\n    .withMessage('Reset token is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long')\n];\n\n// Register new user\nrouter.post('/register', validateRegistration, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, firstName, lastName, phone, preferences } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(409).json({\n        success: false,\n        error: {\n          code: 'USER_EXISTS',\n          message: 'User with this email already exists'\n        }\n      });\n    }\n\n    // Create new user\n    const userData = {\n      email,\n      password,\n      firstName,\n      lastName,\n      phone,\n      preferences: preferences || {}\n    };\n\n    const user = await User.create(userData);\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Send welcome email\n    try {\n      if (user.wantsEmail('welcomeEmails')) {\n        const { sendWelcomeEmail } = require('../utils/emailService');\n        \n        const welcomeData = {\n          firstName: user.firstName,\n          email: user.email\n        };\n\n        const emailResult = await sendWelcomeEmail(user.email, welcomeData);\n        if (!emailResult.success) {\n          console.error('Failed to send welcome email:', emailResult.error);\n        }\n      }\n    } catch (emailError) {\n      console.error('Error sending welcome email:', emailError);\n    }\n\n    res.status(201).json({\n      success: true,\n      message: 'User registered successfully',\n      token,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'REGISTRATION_ERROR',\n        message: 'Failed to register user'\n      }\n    });\n  }\n});\n\n// Login user with enhanced cart merging\nrouter.post('/login', validateLogin, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email, password, guestCartItems } = req.body;\n\n    // Find user\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return res.status(403).json({\n        success: false,\n        error: {\n          code: 'ACCOUNT_DISABLED',\n          message: 'Your account has been disabled'\n        }\n      });\n    }\n\n    // Generate token\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Enhanced cart preservation and merging\n    let cartInfo = { itemCount: 0, mergedItems: 0 };\n    \n    // Merge guest cart if provided\n    if (guestCartItems && Array.isArray(guestCartItems) && guestCartItems.length > 0) {\n      try {\n        const mergeResult = await cartService.mergeCartsWithConflictResolution(\n          user._id,\n          guestCartItems,\n          req.sessionID\n        );\n        \n        cartInfo = {\n          preservedCart: true,\n          mergedItems: mergeResult.mergedItems,\n          conflicts: mergeResult.conflicts,\n          duration: mergeResult.duration\n        };\n      } catch (mergeError) {\n        console.error('Cart merge error during login:', mergeError);\n        cartInfo.mergeError = 'Failed to merge guest cart';\n      }\n    }\n\n    // Emit user login event\n    authService.emit('userLogin', {\n      userId: user._id,\n      email: user.email,\n      timestamp: new Date(),\n      ip: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n\n    res.json({\n      success: true,\n      message: 'Login successful',\n      token,\n      user: user.toPublicJSON(),\n      cart: cartInfo\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGIN_ERROR',\n        message: 'Failed to login'\n      }\n    });\n  }\n});\n\n// Forgot password - Fixed timing attack vulnerability\nrouter.post('/forgot-password', validateForgotPassword, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { email } = req.body;\n    \n    // Always execute the same operations to prevent timing attacks\n    let user, resetToken, resetTokenHash;\n    \n    // Find user\n    user = await User.findOne({ email });\n    \n    // Always generate a token (even if user doesn't exist) to normalize timing\n    resetToken = crypto.randomBytes(32).toString('hex');\n    resetTokenHash = crypto\n      .createHash('sha256')\n      .update(resetToken)\n      .digest('hex');\n\n    // If user exists, save the reset token and send email\n    if (user) {\n      // Save reset token and expiry\n      user.passwordResetToken = resetTokenHash;\n      user.passwordResetExpiry = Date.now() + 3600000; // 1 hour\n      await user.save();\n\n      // Send reset email\n      try {\n        const { sendPasswordResetEmail } = require('../utils/emailService');\n        const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;\n        \n        const emailResult = await sendPasswordResetEmail(user.email, {\n          firstName: user.firstName,\n          resetToken,\n          resetUrl\n        });\n        \n        if (!emailResult.success) {\n          console.error('Failed to send reset email:', emailResult.error);\n        }\n        \n        // Log reset URL for development when email is not configured\n        if (emailResult.message === 'Email skipped - not configured') {\n          console.log('\\n========================================');\n          console.log('PASSWORD RESET URL (Email not configured)');\n          console.log('========================================');\n          console.log(`User: ${user.email}`);\n          console.log(`Reset URL: ${resetUrl}`);\n          console.log('========================================\\n');\n        }\n      } catch (emailError) {\n        console.error('Error sending reset email:', emailError);\n      }\n    } else {\n      // If user doesn't exist, still perform the same cryptographic operations\n      // and simulate sending an email to normalize response time\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 100 + 50));\n    }\n\n    // Always return the same response regardless of whether user exists\n    res.json({\n      success: true,\n      message: 'If an account exists with this email, a password reset link will be sent.'\n    });\n\n  } catch (error) {\n    console.error('Forgot password error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'FORGOT_PASSWORD_ERROR',\n        message: 'Failed to process password reset request'\n      }\n    });\n  }\n});\n\n// Reset password\nrouter.post('/reset-password', validateResetPassword, async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { token, password } = req.body;\n    \n    // Hash the token to match stored version\n    const resetTokenHash = crypto\n      .createHash('sha256')\n      .update(token)\n      .digest('hex');\n\n    // Find user with valid reset token\n    const user = await User.findOne({\n      passwordResetToken: resetTokenHash,\n      passwordResetExpiry: { $gt: Date.now() }\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Password reset token is invalid or has expired'\n        }\n      });\n    }\n\n    // Update password\n    user.password = password;\n    user.passwordResetToken = undefined;\n    user.passwordResetExpiry = undefined;\n    await user.save();\n\n    // Generate new auth token\n    const authToken = generateToken(user._id);\n\n    res.json({\n      success: true,\n      message: 'Password has been reset successfully',\n      token: authToken,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Reset password error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'RESET_PASSWORD_ERROR',\n        message: 'Failed to reset password'\n      }\n    });\n  }\n});\n\n// Get user profile\nrouter.get('/profile', requireAuth, async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      user: req.user.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_FETCH_ERROR',\n        message: 'Failed to fetch user profile'\n      }\n    });\n  }\n});\n\n// Update user profile with optimistic updates and performance optimization\nrouter.put('/profile', requireAuth, [\n  body('firstName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('First name must be 1-50 characters'),\n  body('lastName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('Last name must be 1-50 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('email').optional().isEmail().normalizeEmail().withMessage('Valid email is required'),\n  body('preferences.notifications').optional().isBoolean().withMessage('Notifications must be boolean'),\n  body('preferences.newsletter').optional().isBoolean().withMessage('Newsletter must be boolean'),\n  body('preferences.emailPreferences').optional().isObject().withMessage('Email preferences must be an object')\n], async (req, res) => {\n  const startTime = Date.now();\n  \n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { firstName, lastName, phone, email, preferences } = req.body;\n    \n    // Build update data object\n    const updateData = {};\n    if (firstName !== undefined) updateData.firstName = firstName;\n    if (lastName !== undefined) updateData.lastName = lastName;\n    if (phone !== undefined) updateData.phone = phone;\n    if (email !== undefined) updateData.email = email;\n    \n    // Handle nested preferences updates\n    if (preferences !== undefined) {\n      updateData.preferences = { \n        ...req.user.preferences?.toObject?.() || req.user.preferences || {},\n        ...preferences\n      };\n      \n      // Handle nested emailPreferences\n      if (preferences.emailPreferences) {\n        updateData.preferences.emailPreferences = {\n          ...req.user.preferences?.emailPreferences || {},\n          ...preferences.emailPreferences\n        };\n      }\n    }\n\n    // Use optimistic update service with performance monitoring\n    const auditContext = {\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    };\n\n    const updateResult = await authService.updateProfileOptimistically(\n      req.user._id,\n      updateData,\n      auditContext\n    );\n\n    if (!updateResult.success) {\n      // Handle specific error cases\n      if (updateResult.error.includes('Rate limit exceeded')) {\n        return res.status(429).json({\n          success: false,\n          error: {\n            code: 'RATE_LIMIT_EXCEEDED',\n            message: updateResult.error\n          }\n        });\n      }\n      \n      if (updateResult.error.includes('Email already in use')) {\n        return res.status(409).json({\n          success: false,\n          error: {\n            code: 'EMAIL_EXISTS',\n            message: 'Email address is already in use'\n          }\n        });\n      }\n\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'PROFILE_UPDATE_ERROR',\n          message: updateResult.error\n        }\n      });\n    }\n\n    const totalDuration = Date.now() - startTime;\n\n    // Send success response with performance metrics\n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      user: {\n        ...updateResult.user,\n        // Convert to public format if needed\n        _id: updateResult.user._id,\n        email: updateResult.user.email,\n        firstName: updateResult.user.firstName,\n        lastName: updateResult.user.lastName,\n        phone: updateResult.user.phone,\n        addresses: updateResult.user.addresses,\n        preferences: updateResult.user.preferences,\n        createdAt: updateResult.user.createdAt,\n        updatedAt: updateResult.user.updatedAt\n      },\n      performance: {\n        duration: totalDuration,\n        target: '200ms',\n        status: totalDuration <= 200 ? 'optimal' : 'needs_optimization'\n      }\n    });\n\n    // Send email notification for sensitive changes if configured\n    if (email && email !== req.user.email) {\n      authService.notifyUserOfSensitiveChange(req.user._id, 'email', auditContext);\n    }\n    if (phone && phone !== req.user.phone) {\n      authService.notifyUserOfSensitiveChange(req.user._id, 'phone', auditContext);\n    }\n\n  } catch (error) {\n    console.error('Profile update error:', error);\n    \n    // Handle specific MongoDB errors\n    if (error.code === 11000) {\n      return res.status(409).json({\n        success: false,\n        error: {\n          code: 'DUPLICATE_EMAIL',\n          message: 'Email address is already in use'\n        }\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PROFILE_UPDATE_ERROR',\n        message: 'Failed to update profile'\n      }\n    });\n  }\n});\n\n// Change password\nrouter.post('/change-password', requireAuth, [\n  body('currentPassword').notEmpty().withMessage('Current password is required'),\n  body('newPassword').isLength({ min: 6 }).withMessage('New password must be at least 6 characters long')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid input data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { currentPassword, newPassword } = req.body;\n\n    // Get user with password field\n    const user = await User.findById(req.user._id).select('+password');\n\n    // Verify current password\n    const isMatch = await user.comparePassword(currentPassword);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_PASSWORD',\n          message: 'Current password is incorrect'\n        }\n      });\n    }\n\n    // Update password\n    user.password = newPassword;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password changed successfully'\n    });\n  } catch (error) {\n    console.error('Password change error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'PASSWORD_CHANGE_ERROR',\n        message: 'Failed to change password'\n      }\n    });\n  }\n});\n\n// Logout (optional - mainly for server-side session cleanup)\nrouter.post('/logout', requireAuth, async (req, res) => {\n  try {\n    const userId = req.user._id;\n    \n    // Emit logout event\n    authService.emit('userLogout', {\n      userId: userId,\n      timestamp: new Date()\n    });\n\n    // Clear any server-side sessions and cleanup cart state\n    if (req.session) {\n      // Clear any cart session IDs to prevent ghost carts\n      delete req.session.cartId;\n      delete req.session.guestId;\n      \n      // Clear the session\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Session destruction error:', err);\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully',\n      cartCleared: true // Signal to frontend to clear cart state\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'LOGOUT_ERROR',\n        message: 'Failed to logout'\n      }\n    });\n  }\n});\n\n// Address management endpoints without authentication loss\n\n// Add new address\nrouter.post('/profile/addresses', requireAuth, [\n  body('type').isIn(['shipping', 'billing']).withMessage('Address type must be shipping or billing'),\n  body('firstName').trim().isLength({ min: 1, max: 50 }).withMessage('First name is required'),\n  body('lastName').trim().isLength({ min: 1, max: 50 }).withMessage('Last name is required'),\n  body('street').trim().isLength({ min: 1, max: 100 }).withMessage('Street address is required'),\n  body('city').trim().isLength({ min: 1, max: 50 }).withMessage('City is required'),\n  body('state').trim().isLength({ min: 1, max: 50 }).withMessage('State is required'),\n  body('zipCode').trim().isLength({ min: 3, max: 20 }).withMessage('ZIP code is required'),\n  body('country').optional().trim().isLength({ min: 2, max: 3 }).withMessage('Country code must be 2-3 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('isDefault').optional().isBoolean().withMessage('isDefault must be boolean')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid address data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const addressData = {\n      type: req.body.type,\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      street: req.body.street,\n      city: req.body.city,\n      state: req.body.state,\n      zipCode: req.body.zipCode,\n      country: req.body.country || 'US',\n      phone: req.body.phone,\n      isDefault: req.body.isDefault || false\n    };\n\n    const result = await authService.manageAddressOptimistically(\n      req.user._id,\n      'add',\n      addressData\n    );\n\n    if (!result.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_ADD_ERROR',\n          message: result.error\n        }\n      });\n    }\n\n    res.status(201).json({\n      success: true,\n      message: 'Address added successfully',\n      user: result.user.toPublicJSON(),\n      performance: {\n        duration: result.duration,\n        status: result.performance\n      }\n    });\n\n  } catch (error) {\n    console.error('Add address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_ADD_ERROR',\n        message: 'Failed to add address'\n      }\n    });\n  }\n});\n\n// Update existing address\nrouter.put('/profile/addresses/:addressId', requireAuth, [\n  body('type').optional().isIn(['shipping', 'billing']).withMessage('Address type must be shipping or billing'),\n  body('firstName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('First name must be 1-50 characters'),\n  body('lastName').optional().trim().isLength({ min: 1, max: 50 }).withMessage('Last name must be 1-50 characters'),\n  body('street').optional().trim().isLength({ min: 1, max: 100 }).withMessage('Street must be 1-100 characters'),\n  body('city').optional().trim().isLength({ min: 1, max: 50 }).withMessage('City must be 1-50 characters'),\n  body('state').optional().trim().isLength({ min: 1, max: 50 }).withMessage('State must be 1-50 characters'),\n  body('zipCode').optional().trim().isLength({ min: 3, max: 20 }).withMessage('ZIP code must be 3-20 characters'),\n  body('country').optional().trim().isLength({ min: 2, max: 3 }).withMessage('Country code must be 2-3 characters'),\n  body('phone').optional().isString().isLength({ min: 7, max: 30 }).withMessage('Phone must be 7-30 characters'),\n  body('isDefault').optional().isBoolean().withMessage('isDefault must be boolean')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid address data',\n          details: errors.array()\n        }\n      });\n    }\n\n    const { addressId } = req.params;\n    const updateData = {};\n    \n    // Only include fields that are provided\n    ['type', 'firstName', 'lastName', 'street', 'city', 'state', 'zipCode', 'country', 'phone', 'isDefault']\n      .forEach(field => {\n        if (req.body[field] !== undefined) {\n          updateData[field] = req.body[field];\n        }\n      });\n\n    const result = await authService.manageAddressOptimistically(\n      req.user._id,\n      'update',\n      updateData,\n      addressId\n    );\n\n    if (!result.success) {\n      if (result.error.includes('not found')) {\n        return res.status(404).json({\n          success: false,\n          error: {\n            code: 'ADDRESS_NOT_FOUND',\n            message: 'Address not found'\n          }\n        });\n      }\n\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_UPDATE_ERROR',\n          message: result.error\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Address updated successfully',\n      user: result.user.toPublicJSON(),\n      performance: {\n        duration: result.duration,\n        status: result.performance\n      }\n    });\n\n  } catch (error) {\n    console.error('Update address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_UPDATE_ERROR',\n        message: 'Failed to update address'\n      }\n    });\n  }\n});\n\n// Delete address\nrouter.delete('/profile/addresses/:addressId', requireAuth, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n\n    const result = await authService.manageAddressOptimistically(\n      req.user._id,\n      'delete',\n      {},\n      addressId\n    );\n\n    if (!result.success) {\n      if (result.error.includes('not found')) {\n        return res.status(404).json({\n          success: false,\n          error: {\n            code: 'ADDRESS_NOT_FOUND',\n            message: 'Address not found'\n          }\n        });\n      }\n\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_DELETE_ERROR',\n          message: result.error\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Address deleted successfully',\n      user: result.user.toPublicJSON(),\n      performance: {\n        duration: result.duration,\n        status: result.performance\n      }\n    });\n\n  } catch (error) {\n    console.error('Delete address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_DELETE_ERROR',\n        message: 'Failed to delete address'\n      }\n    });\n  }\n});\n\n// Set default address\nrouter.patch('/profile/addresses/:addressId/default', requireAuth, async (req, res) => {\n  try {\n    const { addressId } = req.params;\n\n    const result = await authService.manageAddressOptimistically(\n      req.user._id,\n      'setDefault',\n      {},\n      addressId\n    );\n\n    if (!result.success) {\n      if (result.error.includes('not found')) {\n        return res.status(404).json({\n          success: false,\n          error: {\n            code: 'ADDRESS_NOT_FOUND',\n            message: 'Address not found'\n          }\n        });\n      }\n\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'ADDRESS_DEFAULT_ERROR',\n          message: result.error\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Default address updated successfully',\n      user: result.user.toPublicJSON(),\n      performance: {\n        duration: result.duration,\n        status: result.performance\n      }\n    });\n\n  } catch (error) {\n    console.error('Set default address error:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'ADDRESS_DEFAULT_ERROR',\n        message: 'Failed to set default address'\n      }\n    });\n  }\n});\n\n// Refresh token endpoint\nrouter.post('/refresh-token', async (req, res) => {\n  try {\n    const { token } = req.body;\n    \n    if (!token) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'MISSING_TOKEN',\n          message: 'Token is required'\n        }\n      });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n    \n    if (!user || !user.isActive) {\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'INVALID_TOKEN',\n          message: 'Invalid token'\n        }\n      });\n    }\n\n    const newToken = generateToken(user._id);\n    \n    res.json({\n      success: true,\n      token: newToken,\n      user: user.toPublicJSON()\n    });\n  } catch (error) {\n    console.error('Token refresh error:', error);\n    res.status(401).json({\n      success: false,\n      error: {\n        code: 'TOKEN_REFRESH_ERROR',\n        message: 'Failed to refresh token'\n      }\n    });\n  }\n});\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}