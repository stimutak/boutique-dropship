972aa482e723c9c71676737de42c58e4
const express = require('express');
const router = express.Router();
const Product = require('../models/Product');
const {
  authenticateToken,
  requireAuth
} = require('../middleware/auth');

// Middleware to initialize cart in session
const initializeCart = (req, res, next) => {
  if (!req.session.cart) {
    req.session.cart = [];
  }
  next();
};

// Get cart contents
router.get('/', authenticateToken, initializeCart, async (req, res) => {
  try {
    let cart = [];
    if (req.user) {
      // For authenticated users, get cart from user session or database
      cart = req.session.cart || [];
    } else {
      // For guests, get cart from session
      cart = req.session.cart || [];
    }

    // Populate product details for cart items
    const populatedCart = await Promise.all(cart.map(async item => {
      try {
        const product = await Product.findById(item.productId).select('-wholesaler');
        if (!product || !product.isActive) {
          return null; // Remove inactive products
        }
        return {
          _id: item._id || item.productId,
          product: product.toPublicJSON(),
          quantity: item.quantity,
          price: product.price,
          subtotal: product.price * item.quantity
        };
      } catch (error) {
        console.error('Error populating cart item:', error);
        return null;
      }
    }));

    // Filter out null items (inactive products)
    const validCart = populatedCart.filter(item => item !== null);

    // Update session cart to remove invalid items
    req.session.cart = validCart.map(item => ({
      productId: item.product._id,
      quantity: item.quantity
    }));

    // Calculate totals
    const subtotal = validCart.reduce((sum, item) => sum + item.subtotal, 0);
    const itemCount = validCart.reduce((sum, item) => sum + item.quantity, 0);
    res.json({
      success: true,
      data: {
        cart: {
          items: validCart,
          itemCount: itemCount,
          subtotal: Math.round(subtotal * 100) / 100,
          total: Math.round(subtotal * 100) / 100,
          isEmpty: validCart.length === 0
        }
      }
    });
  } catch (error) {
    console.error('Error getting cart:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'CART_ERROR',
        message: 'Failed to retrieve cart contents'
      }
    });
  }
});

// Add item to cart
router.post('/add', authenticateToken, initializeCart, async (req, res) => {
  try {
    const {
      productId,
      quantity = 1
    } = req.body;
    if (!productId) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'MISSING_PRODUCT_ID',
          message: 'Product ID is required'
        }
      });
    }
    if (quantity < 1 || quantity > 99) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_QUANTITY',
          message: 'Quantity must be between 1 and 99'
        }
      });
    }

    // Verify product exists and is active
    const product = await Product.findById(productId);
    if (!product || !product.isActive) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'PRODUCT_NOT_FOUND',
          message: 'Product not found or unavailable'
        }
      });
    }

    // Check if item already exists in cart
    const existingItemIndex = req.session.cart.findIndex(item => item.productId.toString() === productId);
    if (existingItemIndex > -1) {
      // Update quantity of existing item
      const newQuantity = req.session.cart[existingItemIndex].quantity + parseInt(quantity);
      if (newQuantity > 99) {
        return res.status(400).json({
          success: false,
          error: {
            code: 'MAX_QUANTITY_EXCEEDED',
            message: 'Maximum quantity per item is 99'
          }
        });
      }
      req.session.cart[existingItemIndex].quantity = newQuantity;
    } else {
      // Add new item to cart
      req.session.cart.push({
        productId: productId,
        quantity: parseInt(quantity)
      });
    }

    // Save session and get updated cart
    try {
      await new Promise((resolve, reject) => {
        req.session.save(err => {
          if (err) reject(err);else resolve();
        });
      });

      // Get updated cart with populated products
      const populatedCart = await Promise.all(req.session.cart.map(async item => {
        try {
          const product = await Product.findById(item.productId).select('-wholesaler');
          if (!product || !product.isActive) {
            return null;
          }
          return {
            _id: item.productId,
            product: product.toPublicJSON(),
            quantity: item.quantity,
            price: product.price,
            subtotal: product.price * item.quantity
          };
        } catch (error) {
          console.error('Error populating cart item:', error);
          return null;
        }
      }));
      const validCart = populatedCart.filter(item => item !== null);
      const totalPrice = validCart.reduce((sum, item) => sum + item.subtotal, 0);
      const totalItems = validCart.reduce((sum, item) => sum + item.quantity, 0);
      res.json({
        success: true,
        message: 'Item added to cart',
        data: {
          cart: {
            items: validCart,
            itemCount: totalItems,
            subtotal: Math.round(totalPrice * 100) / 100,
            total: Math.round(totalPrice * 100) / 100
          }
        }
      });
    } catch (sessionError) {
      console.error('Session save error:', sessionError);
      return res.status(500).json({
        success: false,
        error: {
          code: 'SESSION_ERROR',
          message: 'Failed to save cart'
        }
      });
    }
  } catch (error) {
    console.error('Error adding to cart:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'CART_ADD_ERROR',
        message: 'Failed to add item to cart'
      }
    });
  }
});

// Update cart item quantity
router.put('/update', authenticateToken, initializeCart, async (req, res) => {
  try {
    const {
      productId,
      quantity
    } = req.body;
    if (!productId) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'MISSING_PRODUCT_ID',
          message: 'Product ID is required'
        }
      });
    }
    if (quantity < 0 || quantity > 99) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_QUANTITY',
          message: 'Quantity must be between 0 and 99'
        }
      });
    }
    const itemIndex = req.session.cart.findIndex(item => item.productId.toString() === productId);
    if (itemIndex === -1) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'ITEM_NOT_FOUND',
          message: 'Item not found in cart'
        }
      });
    }
    if (quantity === 0) {
      // Remove item if quantity is 0
      req.session.cart.splice(itemIndex, 1);
    } else {
      // Update quantity
      req.session.cart[itemIndex].quantity = parseInt(quantity);
    }
    req.session.save(err => {
      if (err) {
        console.error('Session save error:', err);
        return res.status(500).json({
          success: false,
          error: {
            code: 'SESSION_ERROR',
            message: 'Failed to update cart'
          }
        });
      }
      res.json({
        success: true,
        message: quantity === 0 ? 'Item removed from cart' : 'Cart updated',
        cartItemCount: req.session.cart.reduce((sum, item) => sum + item.quantity, 0)
      });
    });
  } catch (error) {
    console.error('Error updating cart:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'CART_UPDATE_ERROR',
        message: 'Failed to update cart'
      }
    });
  }
});

// Remove item from cart
router.delete('/remove', authenticateToken, initializeCart, async (req, res) => {
  try {
    const {
      productId
    } = req.body;
    if (!productId) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'MISSING_PRODUCT_ID',
          message: 'Product ID is required'
        }
      });
    }
    const itemIndex = req.session.cart.findIndex(item => item.productId.toString() === productId);
    if (itemIndex === -1) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'ITEM_NOT_FOUND',
          message: 'Item not found in cart'
        }
      });
    }
    req.session.cart.splice(itemIndex, 1);
    req.session.save(err => {
      if (err) {
        console.error('Session save error:', err);
        return res.status(500).json({
          success: false,
          error: {
            code: 'SESSION_ERROR',
            message: 'Failed to remove item from cart'
          }
        });
      }
      res.json({
        success: true,
        message: 'Item removed from cart',
        cartItemCount: req.session.cart.reduce((sum, item) => sum + item.quantity, 0)
      });
    });
  } catch (error) {
    console.error('Error removing from cart:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'CART_REMOVE_ERROR',
        message: 'Failed to remove item from cart'
      }
    });
  }
});

// Clear entire cart
router.delete('/clear', authenticateToken, initializeCart, async (req, res) => {
  try {
    req.session.cart = [];
    req.session.save(err => {
      if (err) {
        console.error('Session save error:', err);
        return res.status(500).json({
          success: false,
          error: {
            code: 'SESSION_ERROR',
            message: 'Failed to clear cart'
          }
        });
      }
      res.json({
        success: true,
        message: 'Cart cleared',
        cartItemCount: 0
      });
    });
  } catch (error) {
    console.error('Error clearing cart:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'CART_CLEAR_ERROR',
        message: 'Failed to clear cart'
      }
    });
  }
});

// Merge guest cart with user cart (called after login)
router.post('/merge', authenticateToken, initializeCart, async (req, res) => {
  try {
    const {
      guestCart
    } = req.body;
    if (!guestCart || !Array.isArray(guestCart) || guestCart.length === 0) {
      return res.json({
        success: true,
        message: 'No guest cart to merge',
        data: {
          cart: {
            items: [],
            itemCount: 0,
            subtotal: 0,
            total: 0,
            isEmpty: true
          }
        }
      });
    }

    // Merge guest cart items with session cart
    for (const guestItem of guestCart) {
      const existingItemIndex = req.session.cart.findIndex(item => item.productId === guestItem.productId);
      if (existingItemIndex >= 0) {
        // Update quantity if item already exists
        req.session.cart[existingItemIndex].quantity += guestItem.quantity;
      } else {
        // Add new item
        req.session.cart.push({
          productId: guestItem.productId,
          quantity: guestItem.quantity
        });
      }
    }

    // Save session
    await new Promise((resolve, reject) => {
      req.session.save(err => {
        if (err) reject(err);else resolve();
      });
    });

    // Return updated cart
    const populatedCart = await Promise.all(req.session.cart.map(async item => {
      try {
        const product = await Product.findById(item.productId).select('-wholesaler');
        if (!product || !product.isActive) {
          return null;
        }
        return {
          _id: item.productId,
          product: product.toPublicJSON(),
          quantity: item.quantity,
          subtotal: product.price * item.quantity
        };
      } catch (error) {
        console.error('Error populating cart item:', error);
        return null;
      }
    }));
    const validCart = populatedCart.filter(item => item !== null);
    const totalPrice = validCart.reduce((sum, item) => sum + item.subtotal, 0);
    const totalItems = validCart.reduce((sum, item) => sum + item.quantity, 0);
    res.json({
      success: true,
      message: 'Cart merged successfully',
      data: {
        cart: {
          items: validCart,
          itemCount: totalItems,
          subtotal: Math.round(totalPrice * 100) / 100,
          total: Math.round(totalPrice * 100) / 100,
          isEmpty: validCart.length === 0
        }
      }
    });
  } catch (error) {
    console.error('Error merging cart:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'CART_MERGE_ERROR',
        message: 'Failed to merge cart'
      }
    });
  }
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInJvdXRlciIsIlJvdXRlciIsIlByb2R1Y3QiLCJhdXRoZW50aWNhdGVUb2tlbiIsInJlcXVpcmVBdXRoIiwiaW5pdGlhbGl6ZUNhcnQiLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2Vzc2lvbiIsImNhcnQiLCJnZXQiLCJ1c2VyIiwicG9wdWxhdGVkQ2FydCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJpdGVtIiwicHJvZHVjdCIsImZpbmRCeUlkIiwicHJvZHVjdElkIiwic2VsZWN0IiwiaXNBY3RpdmUiLCJfaWQiLCJ0b1B1YmxpY0pTT04iLCJxdWFudGl0eSIsInByaWNlIiwic3VidG90YWwiLCJlcnJvciIsImNvbnNvbGUiLCJ2YWxpZENhcnQiLCJmaWx0ZXIiLCJyZWR1Y2UiLCJzdW0iLCJpdGVtQ291bnQiLCJqc29uIiwic3VjY2VzcyIsImRhdGEiLCJpdGVtcyIsIk1hdGgiLCJyb3VuZCIsInRvdGFsIiwiaXNFbXB0eSIsImxlbmd0aCIsInN0YXR1cyIsImNvZGUiLCJtZXNzYWdlIiwicG9zdCIsImJvZHkiLCJleGlzdGluZ0l0ZW1JbmRleCIsImZpbmRJbmRleCIsInRvU3RyaW5nIiwibmV3UXVhbnRpdHkiLCJwYXJzZUludCIsInB1c2giLCJyZXNvbHZlIiwicmVqZWN0Iiwic2F2ZSIsImVyciIsInRvdGFsUHJpY2UiLCJ0b3RhbEl0ZW1zIiwic2Vzc2lvbkVycm9yIiwicHV0IiwiaXRlbUluZGV4Iiwic3BsaWNlIiwiY2FydEl0ZW1Db3VudCIsImRlbGV0ZSIsImd1ZXN0Q2FydCIsIkFycmF5IiwiaXNBcnJheSIsImd1ZXN0SXRlbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJjYXJ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuY29uc3QgUHJvZHVjdCA9IHJlcXVpcmUoJy4uL21vZGVscy9Qcm9kdWN0Jyk7XG5jb25zdCB7IGF1dGhlbnRpY2F0ZVRva2VuLCByZXF1aXJlQXV0aCB9ID0gcmVxdWlyZSgnLi4vbWlkZGxld2FyZS9hdXRoJyk7XG5cbi8vIE1pZGRsZXdhcmUgdG8gaW5pdGlhbGl6ZSBjYXJ0IGluIHNlc3Npb25cbmNvbnN0IGluaXRpYWxpemVDYXJ0ID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIGlmICghcmVxLnNlc3Npb24uY2FydCkge1xuICAgIHJlcS5zZXNzaW9uLmNhcnQgPSBbXTtcbiAgfVxuICBuZXh0KCk7XG59O1xuXG4vLyBHZXQgY2FydCBjb250ZW50c1xucm91dGVyLmdldCgnLycsIGF1dGhlbnRpY2F0ZVRva2VuLCBpbml0aWFsaXplQ2FydCwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgbGV0IGNhcnQgPSBbXTtcbiAgICBcbiAgICBpZiAocmVxLnVzZXIpIHtcbiAgICAgIC8vIEZvciBhdXRoZW50aWNhdGVkIHVzZXJzLCBnZXQgY2FydCBmcm9tIHVzZXIgc2Vzc2lvbiBvciBkYXRhYmFzZVxuICAgICAgY2FydCA9IHJlcS5zZXNzaW9uLmNhcnQgfHwgW107XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZvciBndWVzdHMsIGdldCBjYXJ0IGZyb20gc2Vzc2lvblxuICAgICAgY2FydCA9IHJlcS5zZXNzaW9uLmNhcnQgfHwgW107XG4gICAgfVxuICAgIFxuICAgIC8vIFBvcHVsYXRlIHByb2R1Y3QgZGV0YWlscyBmb3IgY2FydCBpdGVtc1xuICAgIGNvbnN0IHBvcHVsYXRlZENhcnQgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGNhcnQubWFwKGFzeW5jIChpdGVtKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFByb2R1Y3QuZmluZEJ5SWQoaXRlbS5wcm9kdWN0SWQpLnNlbGVjdCgnLXdob2xlc2FsZXInKTtcbiAgICAgICAgICBpZiAoIXByb2R1Y3QgfHwgIXByb2R1Y3QuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBSZW1vdmUgaW5hY3RpdmUgcHJvZHVjdHNcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9pZDogaXRlbS5faWQgfHwgaXRlbS5wcm9kdWN0SWQsXG4gICAgICAgICAgICBwcm9kdWN0OiBwcm9kdWN0LnRvUHVibGljSlNPTigpLFxuICAgICAgICAgICAgcXVhbnRpdHk6IGl0ZW0ucXVhbnRpdHksXG4gICAgICAgICAgICBwcmljZTogcHJvZHVjdC5wcmljZSxcbiAgICAgICAgICAgIHN1YnRvdGFsOiBwcm9kdWN0LnByaWNlICogaXRlbS5xdWFudGl0eVxuICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcG9wdWxhdGluZyBjYXJ0IGl0ZW06JywgZXJyb3IpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gICAgXG4gICAgLy8gRmlsdGVyIG91dCBudWxsIGl0ZW1zIChpbmFjdGl2ZSBwcm9kdWN0cylcbiAgICBjb25zdCB2YWxpZENhcnQgPSBwb3B1bGF0ZWRDYXJ0LmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IG51bGwpO1xuICAgIFxuICAgIC8vIFVwZGF0ZSBzZXNzaW9uIGNhcnQgdG8gcmVtb3ZlIGludmFsaWQgaXRlbXNcbiAgICByZXEuc2Vzc2lvbi5jYXJ0ID0gdmFsaWRDYXJ0Lm1hcChpdGVtID0+ICh7XG4gICAgICBwcm9kdWN0SWQ6IGl0ZW0ucHJvZHVjdC5faWQsXG4gICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eVxuICAgIH0pKTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgdG90YWxzXG4gICAgY29uc3Qgc3VidG90YWwgPSB2YWxpZENhcnQucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0uc3VidG90YWwsIDApO1xuICAgIGNvbnN0IGl0ZW1Db3VudCA9IHZhbGlkQ2FydC5yZWR1Y2UoKHN1bSwgaXRlbSkgPT4gc3VtICsgaXRlbS5xdWFudGl0eSwgMCk7XG4gICAgXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIGl0ZW1zOiB2YWxpZENhcnQsXG4gICAgICAgICAgaXRlbUNvdW50OiBpdGVtQ291bnQsXG4gICAgICAgICAgc3VidG90YWw6IE1hdGgucm91bmQoc3VidG90YWwgKiAxMDApIC8gMTAwLFxuICAgICAgICAgIHRvdGFsOiBNYXRoLnJvdW5kKHN1YnRvdGFsICogMTAwKSAvIDEwMCxcbiAgICAgICAgICBpc0VtcHR5OiB2YWxpZENhcnQubGVuZ3RoID09PSAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGNhcnQ6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ0NBUlRfRVJST1InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHJldHJpZXZlIGNhcnQgY29udGVudHMnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBBZGQgaXRlbSB0byBjYXJ0XG5yb3V0ZXIucG9zdCgnL2FkZCcsIGF1dGhlbnRpY2F0ZVRva2VuLCBpbml0aWFsaXplQ2FydCwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBwcm9kdWN0SWQsIHF1YW50aXR5ID0gMSB9ID0gcmVxLmJvZHk7XG4gICAgXG4gICAgaWYgKCFwcm9kdWN0SWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdNSVNTSU5HX1BST0RVQ1RfSUQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdQcm9kdWN0IElEIGlzIHJlcXVpcmVkJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHF1YW50aXR5IDwgMSB8fCBxdWFudGl0eSA+IDk5KSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9RVUFOVElUWScsXG4gICAgICAgICAgbWVzc2FnZTogJ1F1YW50aXR5IG11c3QgYmUgYmV0d2VlbiAxIGFuZCA5OSdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFZlcmlmeSBwcm9kdWN0IGV4aXN0cyBhbmQgaXMgYWN0aXZlXG4gICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFByb2R1Y3QuZmluZEJ5SWQocHJvZHVjdElkKTtcbiAgICBpZiAoIXByb2R1Y3QgfHwgIXByb2R1Y3QuaXNBY3RpdmUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdQUk9EVUNUX05PVF9GT1VORCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1Byb2R1Y3Qgbm90IGZvdW5kIG9yIHVuYXZhaWxhYmxlJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgaXRlbSBhbHJlYWR5IGV4aXN0cyBpbiBjYXJ0XG4gICAgY29uc3QgZXhpc3RpbmdJdGVtSW5kZXggPSByZXEuc2Vzc2lvbi5jYXJ0LmZpbmRJbmRleChcbiAgICAgIGl0ZW0gPT4gaXRlbS5wcm9kdWN0SWQudG9TdHJpbmcoKSA9PT0gcHJvZHVjdElkXG4gICAgKTtcbiAgICBcbiAgICBpZiAoZXhpc3RpbmdJdGVtSW5kZXggPiAtMSkge1xuICAgICAgLy8gVXBkYXRlIHF1YW50aXR5IG9mIGV4aXN0aW5nIGl0ZW1cbiAgICAgIGNvbnN0IG5ld1F1YW50aXR5ID0gcmVxLnNlc3Npb24uY2FydFtleGlzdGluZ0l0ZW1JbmRleF0ucXVhbnRpdHkgKyBwYXJzZUludChxdWFudGl0eSk7XG4gICAgICBpZiAobmV3UXVhbnRpdHkgPiA5OSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICBjb2RlOiAnTUFYX1FVQU5USVRZX0VYQ0VFREVEJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdNYXhpbXVtIHF1YW50aXR5IHBlciBpdGVtIGlzIDk5J1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXEuc2Vzc2lvbi5jYXJ0W2V4aXN0aW5nSXRlbUluZGV4XS5xdWFudGl0eSA9IG5ld1F1YW50aXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBZGQgbmV3IGl0ZW0gdG8gY2FydFxuICAgICAgcmVxLnNlc3Npb24uY2FydC5wdXNoKHtcbiAgICAgICAgcHJvZHVjdElkOiBwcm9kdWN0SWQsXG4gICAgICAgIHF1YW50aXR5OiBwYXJzZUludChxdWFudGl0eSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBTYXZlIHNlc3Npb24gYW5kIGdldCB1cGRhdGVkIGNhcnRcbiAgICB0cnkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXEuc2Vzc2lvbi5zYXZlKChlcnIpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSByZWplY3QoZXJyKTtcbiAgICAgICAgICBlbHNlIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gR2V0IHVwZGF0ZWQgY2FydCB3aXRoIHBvcHVsYXRlZCBwcm9kdWN0c1xuICAgICAgY29uc3QgcG9wdWxhdGVkQ2FydCA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICByZXEuc2Vzc2lvbi5jYXJ0Lm1hcChhc3luYyAoaXRlbSkgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0ID0gYXdhaXQgUHJvZHVjdC5maW5kQnlJZChpdGVtLnByb2R1Y3RJZCkuc2VsZWN0KCctd2hvbGVzYWxlcicpO1xuICAgICAgICAgICAgaWYgKCFwcm9kdWN0IHx8ICFwcm9kdWN0LmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBfaWQ6IGl0ZW0ucHJvZHVjdElkLFxuICAgICAgICAgICAgICBwcm9kdWN0OiBwcm9kdWN0LnRvUHVibGljSlNPTigpLFxuICAgICAgICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgICAgICAgcHJpY2U6IHByb2R1Y3QucHJpY2UsXG4gICAgICAgICAgICAgIHN1YnRvdGFsOiBwcm9kdWN0LnByaWNlICogaXRlbS5xdWFudGl0eVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcG9wdWxhdGluZyBjYXJ0IGl0ZW06JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgY29uc3QgdmFsaWRDYXJ0ID0gcG9wdWxhdGVkQ2FydC5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBudWxsKTtcbiAgICAgIGNvbnN0IHRvdGFsUHJpY2UgPSB2YWxpZENhcnQucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0uc3VidG90YWwsIDApO1xuICAgICAgY29uc3QgdG90YWxJdGVtcyA9IHZhbGlkQ2FydC5yZWR1Y2UoKHN1bSwgaXRlbSkgPT4gc3VtICsgaXRlbS5xdWFudGl0eSwgMCk7XG4gICAgICBcbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ0l0ZW0gYWRkZWQgdG8gY2FydCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgICBpdGVtczogdmFsaWRDYXJ0LFxuICAgICAgICAgICAgaXRlbUNvdW50OiB0b3RhbEl0ZW1zLFxuICAgICAgICAgICAgc3VidG90YWw6IE1hdGgucm91bmQodG90YWxQcmljZSAqIDEwMCkgLyAxMDAsXG4gICAgICAgICAgICB0b3RhbDogTWF0aC5yb3VuZCh0b3RhbFByaWNlICogMTAwKSAvIDEwMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoc2Vzc2lvbkVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdTZXNzaW9uIHNhdmUgZXJyb3I6Jywgc2Vzc2lvbkVycm9yKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdTRVNTSU9OX0VSUk9SJyxcbiAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHNhdmUgY2FydCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyB0byBjYXJ0OicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIGNvZGU6ICdDQVJUX0FERF9FUlJPUicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gYWRkIGl0ZW0gdG8gY2FydCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIFVwZGF0ZSBjYXJ0IGl0ZW0gcXVhbnRpdHlcbnJvdXRlci5wdXQoJy91cGRhdGUnLCBhdXRoZW50aWNhdGVUb2tlbiwgaW5pdGlhbGl6ZUNhcnQsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgcHJvZHVjdElkLCBxdWFudGl0eSB9ID0gcmVxLmJvZHk7XG4gICAgXG4gICAgaWYgKCFwcm9kdWN0SWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGNvZGU6ICdNSVNTSU5HX1BST0RVQ1RfSUQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdQcm9kdWN0IElEIGlzIHJlcXVpcmVkJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHF1YW50aXR5IDwgMCB8fCBxdWFudGl0eSA+IDk5KSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9RVUFOVElUWScsXG4gICAgICAgICAgbWVzc2FnZTogJ1F1YW50aXR5IG11c3QgYmUgYmV0d2VlbiAwIGFuZCA5OSdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGl0ZW1JbmRleCA9IHJlcS5zZXNzaW9uLmNhcnQuZmluZEluZGV4KFxuICAgICAgaXRlbSA9PiBpdGVtLnByb2R1Y3RJZC50b1N0cmluZygpID09PSBwcm9kdWN0SWRcbiAgICApO1xuICAgIFxuICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnSVRFTV9OT1RfRk9VTkQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJdGVtIG5vdCBmb3VuZCBpbiBjYXJ0J1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHF1YW50aXR5ID09PSAwKSB7XG4gICAgICAvLyBSZW1vdmUgaXRlbSBpZiBxdWFudGl0eSBpcyAwXG4gICAgICByZXEuc2Vzc2lvbi5jYXJ0LnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVcGRhdGUgcXVhbnRpdHlcbiAgICAgIHJlcS5zZXNzaW9uLmNhcnRbaXRlbUluZGV4XS5xdWFudGl0eSA9IHBhcnNlSW50KHF1YW50aXR5KTtcbiAgICB9XG4gICAgXG4gICAgcmVxLnNlc3Npb24uc2F2ZSgoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Nlc3Npb24gc2F2ZSBlcnJvcjonLCBlcnIpO1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICBjb2RlOiAnU0VTU0lPTl9FUlJPUicsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHVwZGF0ZSBjYXJ0J1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogcXVhbnRpdHkgPT09IDAgPyAnSXRlbSByZW1vdmVkIGZyb20gY2FydCcgOiAnQ2FydCB1cGRhdGVkJyxcbiAgICAgICAgY2FydEl0ZW1Db3VudDogcmVxLnNlc3Npb24uY2FydC5yZWR1Y2UoKHN1bSwgaXRlbSkgPT4gc3VtICsgaXRlbS5xdWFudGl0eSwgMClcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIGNhcnQ6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ0NBUlRfVVBEQVRFX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGRhdGUgY2FydCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIFJlbW92ZSBpdGVtIGZyb20gY2FydFxucm91dGVyLmRlbGV0ZSgnL3JlbW92ZScsIGF1dGhlbnRpY2F0ZVRva2VuLCBpbml0aWFsaXplQ2FydCwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBwcm9kdWN0SWQgfSA9IHJlcS5ib2R5O1xuICAgIFxuICAgIGlmICghcHJvZHVjdElkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnTUlTU0lOR19QUk9EVUNUX0lEJyxcbiAgICAgICAgICBtZXNzYWdlOiAnUHJvZHVjdCBJRCBpcyByZXF1aXJlZCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGl0ZW1JbmRleCA9IHJlcS5zZXNzaW9uLmNhcnQuZmluZEluZGV4KFxuICAgICAgaXRlbSA9PiBpdGVtLnByb2R1Y3RJZC50b1N0cmluZygpID09PSBwcm9kdWN0SWRcbiAgICApO1xuICAgIFxuICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnSVRFTV9OT1RfRk9VTkQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJdGVtIG5vdCBmb3VuZCBpbiBjYXJ0J1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcmVxLnNlc3Npb24uY2FydC5zcGxpY2UoaXRlbUluZGV4LCAxKTtcbiAgICBcbiAgICByZXEuc2Vzc2lvbi5zYXZlKChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignU2Vzc2lvbiBzYXZlIGVycm9yOicsIGVycik7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIGNvZGU6ICdTRVNTSU9OX0VSUk9SJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gcmVtb3ZlIGl0ZW0gZnJvbSBjYXJ0J1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ0l0ZW0gcmVtb3ZlZCBmcm9tIGNhcnQnLFxuICAgICAgICBjYXJ0SXRlbUNvdW50OiByZXEuc2Vzc2lvbi5jYXJ0LnJlZHVjZSgoc3VtLCBpdGVtKSA9PiBzdW0gKyBpdGVtLnF1YW50aXR5LCAwKVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVtb3ZpbmcgZnJvbSBjYXJ0OicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIGNvZGU6ICdDQVJUX1JFTU9WRV9FUlJPUicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gcmVtb3ZlIGl0ZW0gZnJvbSBjYXJ0J1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcblxuLy8gQ2xlYXIgZW50aXJlIGNhcnRcbnJvdXRlci5kZWxldGUoJy9jbGVhcicsIGF1dGhlbnRpY2F0ZVRva2VuLCBpbml0aWFsaXplQ2FydCwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgcmVxLnNlc3Npb24uY2FydCA9IFtdO1xuICAgIFxuICAgIHJlcS5zZXNzaW9uLnNhdmUoKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdTZXNzaW9uIHNhdmUgZXJyb3I6JywgZXJyKTtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgY29kZTogJ1NFU1NJT05fRVJST1InLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBjbGVhciBjYXJ0J1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ0NhcnQgY2xlYXJlZCcsXG4gICAgICAgIGNhcnRJdGVtQ291bnQ6IDBcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsZWFyaW5nIGNhcnQ6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ0NBUlRfQ0xFQVJfRVJST1InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGNsZWFyIGNhcnQnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBNZXJnZSBndWVzdCBjYXJ0IHdpdGggdXNlciBjYXJ0IChjYWxsZWQgYWZ0ZXIgbG9naW4pXG5yb3V0ZXIucG9zdCgnL21lcmdlJywgYXV0aGVudGljYXRlVG9rZW4sIGluaXRpYWxpemVDYXJ0LCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGd1ZXN0Q2FydCB9ID0gcmVxLmJvZHk7XG4gICAgXG4gICAgaWYgKCFndWVzdENhcnQgfHwgIUFycmF5LmlzQXJyYXkoZ3Vlc3RDYXJ0KSB8fCBndWVzdENhcnQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gcmVzLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnTm8gZ3Vlc3QgY2FydCB0byBtZXJnZScsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgICBpdGVtczogW10sXG4gICAgICAgICAgICBpdGVtQ291bnQ6IDAsXG4gICAgICAgICAgICBzdWJ0b3RhbDogMCxcbiAgICAgICAgICAgIHRvdGFsOiAwLFxuICAgICAgICAgICAgaXNFbXB0eTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gTWVyZ2UgZ3Vlc3QgY2FydCBpdGVtcyB3aXRoIHNlc3Npb24gY2FydFxuICAgIGZvciAoY29uc3QgZ3Vlc3RJdGVtIG9mIGd1ZXN0Q2FydCkge1xuICAgICAgY29uc3QgZXhpc3RpbmdJdGVtSW5kZXggPSByZXEuc2Vzc2lvbi5jYXJ0LmZpbmRJbmRleChcbiAgICAgICAgaXRlbSA9PiBpdGVtLnByb2R1Y3RJZCA9PT0gZ3Vlc3RJdGVtLnByb2R1Y3RJZFxuICAgICAgKTtcblxuICAgICAgaWYgKGV4aXN0aW5nSXRlbUluZGV4ID49IDApIHtcbiAgICAgICAgLy8gVXBkYXRlIHF1YW50aXR5IGlmIGl0ZW0gYWxyZWFkeSBleGlzdHNcbiAgICAgICAgcmVxLnNlc3Npb24uY2FydFtleGlzdGluZ0l0ZW1JbmRleF0ucXVhbnRpdHkgKz0gZ3Vlc3RJdGVtLnF1YW50aXR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWRkIG5ldyBpdGVtXG4gICAgICAgIHJlcS5zZXNzaW9uLmNhcnQucHVzaCh7XG4gICAgICAgICAgcHJvZHVjdElkOiBndWVzdEl0ZW0ucHJvZHVjdElkLFxuICAgICAgICAgIHF1YW50aXR5OiBndWVzdEl0ZW0ucXVhbnRpdHlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2F2ZSBzZXNzaW9uXG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcmVxLnNlc3Npb24uc2F2ZSgoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpO1xuICAgICAgICBlbHNlIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gUmV0dXJuIHVwZGF0ZWQgY2FydFxuICAgIGNvbnN0IHBvcHVsYXRlZENhcnQgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIHJlcS5zZXNzaW9uLmNhcnQubWFwKGFzeW5jIChpdGVtKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcHJvZHVjdCA9IGF3YWl0IFByb2R1Y3QuZmluZEJ5SWQoaXRlbS5wcm9kdWN0SWQpLnNlbGVjdCgnLXdob2xlc2FsZXInKTtcbiAgICAgICAgICBpZiAoIXByb2R1Y3QgfHwgIXByb2R1Y3QuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX2lkOiBpdGVtLnByb2R1Y3RJZCxcbiAgICAgICAgICAgIHByb2R1Y3Q6IHByb2R1Y3QudG9QdWJsaWNKU09OKCksXG4gICAgICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgICAgIHN1YnRvdGFsOiBwcm9kdWN0LnByaWNlICogaXRlbS5xdWFudGl0eVxuICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcG9wdWxhdGluZyBjYXJ0IGl0ZW06JywgZXJyb3IpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBjb25zdCB2YWxpZENhcnQgPSBwb3B1bGF0ZWRDYXJ0LmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IG51bGwpO1xuICAgIGNvbnN0IHRvdGFsUHJpY2UgPSB2YWxpZENhcnQucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0uc3VidG90YWwsIDApO1xuICAgIGNvbnN0IHRvdGFsSXRlbXMgPSB2YWxpZENhcnQucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0ucXVhbnRpdHksIDApO1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICdDYXJ0IG1lcmdlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgZGF0YToge1xuICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgaXRlbXM6IHZhbGlkQ2FydCxcbiAgICAgICAgICBpdGVtQ291bnQ6IHRvdGFsSXRlbXMsXG4gICAgICAgICAgc3VidG90YWw6IE1hdGgucm91bmQodG90YWxQcmljZSAqIDEwMCkgLyAxMDAsXG4gICAgICAgICAgdG90YWw6IE1hdGgucm91bmQodG90YWxQcmljZSAqIDEwMCkgLyAxMDAsXG4gICAgICAgICAgaXNFbXB0eTogdmFsaWRDYXJ0Lmxlbmd0aCA9PT0gMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBtZXJnaW5nIGNhcnQ6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgY29kZTogJ0NBUlRfTUVSR0VfRVJST1InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIG1lcmdlIGNhcnQnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxNQUFNQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0csTUFBTSxDQUFDLENBQUM7QUFDL0IsTUFBTUMsT0FBTyxHQUFHSCxPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDNUMsTUFBTTtFQUFFSSxpQkFBaUI7RUFBRUM7QUFBWSxDQUFDLEdBQUdMLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQzs7QUFFeEU7QUFDQSxNQUFNTSxjQUFjLEdBQUdBLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEtBQUs7RUFDekMsSUFBSSxDQUFDRixHQUFHLENBQUNHLE9BQU8sQ0FBQ0MsSUFBSSxFQUFFO0lBQ3JCSixHQUFHLENBQUNHLE9BQU8sQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7RUFDdkI7RUFDQUYsSUFBSSxDQUFDLENBQUM7QUFDUixDQUFDOztBQUVEO0FBQ0FSLE1BQU0sQ0FBQ1csR0FBRyxDQUFDLEdBQUcsRUFBRVIsaUJBQWlCLEVBQUVFLGNBQWMsRUFBRSxPQUFPQyxHQUFHLEVBQUVDLEdBQUcsS0FBSztFQUNyRSxJQUFJO0lBQ0YsSUFBSUcsSUFBSSxHQUFHLEVBQUU7SUFFYixJQUFJSixHQUFHLENBQUNNLElBQUksRUFBRTtNQUNaO01BQ0FGLElBQUksR0FBR0osR0FBRyxDQUFDRyxPQUFPLENBQUNDLElBQUksSUFBSSxFQUFFO0lBQy9CLENBQUMsTUFBTTtNQUNMO01BQ0FBLElBQUksR0FBR0osR0FBRyxDQUFDRyxPQUFPLENBQUNDLElBQUksSUFBSSxFQUFFO0lBQy9COztJQUVBO0lBQ0EsTUFB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