{"version":3,"names":["STATIC_RATES","USD","EUR","GBP","CNY","JPY","SAR","CAD","LOCALE_CURRENCY_MAP","CURRENCY_SYMBOLS","convertPrice","amount","fromCurrency","toCurrency","rates","usdAmount","convertedAmount","Math","round","formatPrice","currency","locale","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","error","symbol","toFixed","getCurrencyForLocale","getExchangeRates","calculateAllPrices","basePrice","prices","Object","keys","forEach","getCurrencySymbol","module","exports"],"sources":["currency.js"],"sourcesContent":["// Currency conversion utilities for multi-currency support\n\n// Static exchange rates (relative to USD)\n// In production, these would be fetched from an API\nconst STATIC_RATES = {\n  USD: 1,\n  EUR: 0.85,\n  GBP: 0.73,\n  CNY: 6.45,\n  JPY: 110.0,\n  SAR: 3.75,\n  CAD: 1.25\n};\n\n// Map locales to currencies\nconst LOCALE_CURRENCY_MAP = {\n  'en': 'USD',\n  'es': 'EUR',\n  'fr': 'EUR',\n  'de': 'EUR',\n  'zh': 'CNY',\n  'ja': 'JPY',\n  'ar': 'SAR'\n};\n\n// Currency symbols\nconst CURRENCY_SYMBOLS = {\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  CNY: '¥',\n  JPY: '¥',\n  SAR: 'ر.س',\n  CAD: 'C$'\n};\n\n/**\n * Convert price from one currency to another\n * @param {number} amount - The amount to convert\n * @param {string} fromCurrency - Source currency code\n * @param {string} toCurrency - Target currency code\n * @param {object} rates - Exchange rates object (optional, uses static rates if not provided)\n * @returns {number} Converted amount\n */\nfunction convertPrice(amount, fromCurrency, toCurrency, rates = STATIC_RATES) {\n  if (fromCurrency === toCurrency) {\n    return amount;\n  }\n\n  // Convert to USD first (base currency)\n  const usdAmount = amount / rates[fromCurrency];\n  \n  // Then convert to target currency\n  const convertedAmount = usdAmount * rates[toCurrency];\n  \n  // Round to 2 decimal places for most currencies, 0 for JPY\n  if (toCurrency === 'JPY') {\n    return Math.round(convertedAmount);\n  }\n  \n  return Math.round(convertedAmount * 100) / 100;\n}\n\n/**\n * Format price for display with proper currency symbol and locale formatting\n * @param {number} amount - The amount to format\n * @param {string} currency - Currency code\n * @param {string} locale - Locale code for formatting\n * @returns {string} Formatted price string\n */\nfunction formatPrice(amount, currency, locale = 'en') {\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: currency === 'JPY' ? 0 : 2,\n      maximumFractionDigits: currency === 'JPY' ? 0 : 2\n    }).format(amount);\n  } catch (error) {\n    // Fallback to simple formatting if Intl is not available\n    const symbol = CURRENCY_SYMBOLS[currency] || currency;\n    return `${symbol}${amount.toFixed(currency === 'JPY' ? 0 : 2)}`;\n  }\n}\n\n/**\n * Get currency for a given locale\n * @param {string} locale - Locale code\n * @returns {string} Currency code\n */\nfunction getCurrencyForLocale(locale) {\n  return LOCALE_CURRENCY_MAP[locale] || 'USD';\n}\n\n/**\n * Get current exchange rates\n * @returns {object} Exchange rates object\n */\nfunction getExchangeRates() {\n  // In production, this would fetch from an API\n  // For now, return static rates\n  return STATIC_RATES;\n}\n\n/**\n * Calculate prices for all currencies given a base price\n * @param {number} basePrice - Price in base currency (USD)\n * @param {object} rates - Exchange rates object (optional)\n * @returns {object} Prices in all supported currencies\n */\nfunction calculateAllPrices(basePrice, rates = STATIC_RATES) {\n  const prices = {};\n  \n  Object.keys(rates).forEach(currency => {\n    prices[currency] = convertPrice(basePrice, 'USD', currency, rates);\n  });\n  \n  return prices;\n}\n\n/**\n * Get currency symbol\n * @param {string} currency - Currency code\n * @returns {string} Currency symbol\n */\nfunction getCurrencySymbol(currency) {\n  return CURRENCY_SYMBOLS[currency] || currency;\n}\n\nmodule.exports = {\n  convertPrice,\n  formatPrice,\n  getCurrencyForLocale,\n  getExchangeRates,\n  calculateAllPrices,\n  getCurrencySymbol,\n  STATIC_RATES,\n  LOCALE_CURRENCY_MAP,\n  CURRENCY_SYMBOLS\n};"],"mappings":"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","ignoreList":[]}