{"version":3,"names":["request","require","jwt","mongoose","User","Product","Order","createTestApp","describe","app","testProducts","testUsers","userTokens","beforeAll","setupPerformanceTestData","beforeEach","deleteMany","productData","i","push","name","slug","description","shortDescription","price","category","properties","chakra","element","zodiac","wholesaler","Math","floor","email","productCode","toString","padStart","cost","tags","insertMany","userData","password","firstName","lastName","addresses","type","street","city","state","zipCode","country","isDefault","map","user","sign","userId","_id","process","env","JWT_SECRET","expiresIn","it","iterations","times","startTime","Date","now","response","get","expect","endTime","body","success","toBe","products","length","toBeGreaterThan","avgTime","reduce","a","b","maxTime","max","console","log","toBeLessThan","searchTerms","term","productSlugs","slice","p","data","product","concurrentRegistrations","post","send","results","Promise","all","forEach","result","index","status","concurrentCartOps","set","productId","quantity","random","concurrentOrders","items","useDefaultAddress","order","filterTests","priceMin","priceMax","filter","queryString","Object","entries","key","value","join","pageTests","page","limit","toBeLessThanOrEqual","orderPromises","j","create","customer","shippingAddress","billingAddress","subtotal","total","payment","method","orders","initialMemory","memoryUsage","global","gc","finalMemory","memoryIncrease","heapUsed","round","connectionsBefore","connection","readyState","operations","findOne","connectionsAfter","requests","then","res","catch","err","successfulRequests","r","rateLimitedRequests","invalidRequests","invalid","req"],"sources":["load-testing.test.js"],"sourcesContent":["const request = require('supertest');\nconst jwt = require('jsonwebtoken');\nconst mongoose = require('mongoose');\nconst User = require('../../models/User');\nconst Product = require('../../models/Product');\nconst Order = require('../../models/Order');\nconst { createTestApp } = require('../helpers/testApp');\n\ndescribe('Performance and Load Testing', () => {\n  let app;\n  let testProducts = [];\n  let testUsers = [];\n  let userTokens = [];\n\n  beforeAll(async () => {\n    app = createTestApp();\n    \n    // Create test data for performance testing\n    await setupPerformanceTestData();\n  }, 30000);\n\n  beforeEach(async () => {\n    // Clear orders but keep users and products for performance tests\n    await Order.deleteMany({});\n  });\n\n  async function setupPerformanceTestData() {\n    // Clear existing data\n    await User.deleteMany({});\n    await Product.deleteMany({});\n    await Order.deleteMany({});\n\n    // Create 100 test products\n    const productData = [];\n    for (let i = 0; i < 100; i++) {\n      productData.push({\n        name: `Performance Product ${i}`,\n        slug: `performance-product-${i}`,\n        description: `High-quality holistic product ${i} for performance testing`,\n        shortDescription: `Performance product ${i}`,\n        price: 10 + (i * 0.5),\n        category: ['crystals', 'herbs', 'oils', 'supplements'][i % 4],\n        properties: {\n          chakra: [['root'], ['sacral'], ['solar-plexus'], ['heart'], ['throat'], ['third-eye'], ['crown']][i % 7],\n          element: ['earth', 'water', 'fire', 'air'][i % 4],\n          zodiac: ['aries', 'taurus', 'gemini', 'cancer'][i % 4]\n        },\n        wholesaler: {\n          name: `Wholesaler ${Math.floor(i / 10)}`,\n          email: `wholesaler${Math.floor(i / 10)}@test.com`,\n          productCode: `PP${i.toString().padStart(3, '0')}`,\n          cost: 5 + (i * 0.25)\n        },\n        tags: [`tag${i % 5}`, `category${i % 3}`, `type${i % 7}`]\n      });\n    }\n    testProducts = await Product.insertMany(productData);\n\n    // Create 20 test users\n    const userData = [];\n    for (let i = 0; i < 20; i++) {\n      userData.push({\n        email: `perfuser${i}@test.com`,\n        password: 'password123',\n        firstName: `User${i}`,\n        lastName: 'Performance',\n        addresses: [{\n          type: 'shipping',\n          firstName: `User${i}`,\n          lastName: 'Performance',\n          street: `${100 + i} Performance St`,\n          city: 'Test City',\n          state: 'CA',\n          zipCode: '90210',\n          country: 'US',\n          isDefault: true\n        }]\n      });\n    }\n    testUsers = await User.insertMany(userData);\n\n    // Generate tokens for users\n    userTokens = testUsers.map(user => \n      jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' })\n    );\n  }\n\n  describe('API Response Time Tests', () => {\n    it('should handle product catalog requests within acceptable time', async () => {\n      const iterations = 10;\n      const times = [];\n\n      for (let i = 0; i < iterations; i++) {\n        const startTime = Date.now();\n        const response = await request(app)\n          .get('/api/products?limit=20')\n          .expect(200);\n        const endTime = Date.now();\n\n        times.push(endTime - startTime);\n        expect(response.body.success).toBe(true);\n        expect(response.body.products.length).toBeGreaterThan(0);\n      }\n\n      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;\n      const maxTime = Math.max(...times);\n\n      console.log(`Product catalog - Average: ${avgTime}ms, Max: ${maxTime}ms`);\n      \n      // Should average under 200ms and max under 500ms\n      expect(avgTime).toBeLessThan(200);\n      expect(maxTime).toBeLessThan(500);\n    });\n\n    it('should handle product search requests efficiently', async () => {\n      const searchTerms = ['crystal', 'herb', 'oil', 'supplement', 'performance'];\n      const times = [];\n\n      for (const term of searchTerms) {\n        const startTime = Date.now();\n        const response = await request(app)\n          .get(`/api/products/search?q=${term}`)\n          .expect(200);\n        const endTime = Date.now();\n\n        times.push(endTime - startTime);\n        expect(response.body.success).toBe(true);\n      }\n\n      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;\n      console.log(`Product search - Average: ${avgTime}ms`);\n      \n      // Search should average under 300ms\n      expect(avgTime).toBeLessThan(300);\n    });\n\n    it('should handle individual product page loads quickly', async () => {\n      const productSlugs = testProducts.slice(0, 10).map(p => p.slug);\n      const times = [];\n\n      for (const slug of productSlugs) {\n        const startTime = Date.now();\n        const response = await request(app)\n          .get(`/api/products/${slug}`)\n          .expect(200);\n        const endTime = Date.now();\n\n        times.push(endTime - startTime);\n        expect(response.body.success).toBe(true);\n        expect(response.body.data.product.slug).toBe(slug);\n      }\n\n      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;\n      console.log(`Individual product - Average: ${avgTime}ms`);\n      \n      // Individual product loads should average under 100ms\n      expect(avgTime).toBeLessThan(100);\n    });\n  });\n\n  describe('Concurrent User Load Tests', () => {\n    it('should handle concurrent user registrations', async () => {\n      const concurrentRegistrations = [];\n      \n      for (let i = 0; i < 10; i++) {\n        concurrentRegistrations.push(\n          request(app)\n            .post('/api/auth/register')\n            .send({\n              email: `concurrent${i}@test.com`,\n              password: 'password123',\n              firstName: `Concurrent${i}`,\n              lastName: 'User'\n            })\n        );\n      }\n\n      const startTime = Date.now();\n      const results = await Promise.all(concurrentRegistrations);\n      const endTime = Date.now();\n\n      results.forEach((result, index) => {\n        expect(result.status).toBe(201);\n        expect(result.body.success).toBe(true);\n        expect(result.body.data.user.email).toBe(`concurrent${index}@test.com`);\n      });\n\n      console.log(`Concurrent registrations (10): ${endTime - startTime}ms`);\n      // Should complete within 2 seconds\n      expect(endTime - startTime).toBeLessThan(2000);\n    });\n\n    it('should handle concurrent cart operations', async () => {\n      const concurrentCartOps = [];\n      \n      // Each user adds different products to cart\n      for (let i = 0; i < 10; i++) {\n        concurrentCartOps.push(\n          request(app)\n            .post('/api/cart/add')\n            .set('Authorization', `Bearer ${userTokens[i]}`)\n            .send({\n              productId: testProducts[i]._id,\n              quantity: Math.floor(Math.random() * 3) + 1\n            })\n        );\n      }\n\n      const startTime = Date.now();\n      const results = await Promise.all(concurrentCartOps);\n      const endTime = Date.now();\n\n      results.forEach(result => {\n        expect(result.status).toBe(200);\n        expect(result.body.success).toBe(true);\n      });\n\n      console.log(`Concurrent cart operations (10): ${endTime - startTime}ms`);\n      // Should complete within 1 second\n      expect(endTime - startTime).toBeLessThan(1000);\n    });\n\n    it('should handle concurrent order creation', async () => {\n      const concurrentOrders = [];\n      \n      for (let i = 0; i < 5; i++) {\n        concurrentOrders.push(\n          request(app)\n            .post('/api/orders')\n            .set('Authorization', `Bearer ${userTokens[i]}`)\n            .send({\n              items: [{\n                product: testProducts[i * 2]._id,\n                quantity: 1,\n                price: testProducts[i * 2].price\n              }],\n              useDefaultAddress: true\n            })\n        );\n      }\n\n      const startTime = Date.now();\n      const results = await Promise.all(concurrentOrders);\n      const endTime = Date.now();\n\n      results.forEach(result => {\n        expect(result.status).toBe(201);\n        expect(result.body.success).toBe(true);\n        expect(result.body.data.order.items.length).toBe(1);\n      });\n\n      console.log(`Concurrent order creation (5): ${endTime - startTime}ms`);\n      // Should complete within 1.5 seconds\n      expect(endTime - startTime).toBeLessThan(1500);\n    });\n  });\n\n  describe('Database Query Performance', () => {\n    it('should handle complex product filtering efficiently', async () => {\n      const filterTests = [\n        { category: 'crystals', chakra: 'heart' },\n        { category: 'herbs', element: 'fire' },\n        { priceMin: 20, priceMax: 40 },\n        { zodiac: 'taurus', element: 'earth' },\n        { tags: 'tag1,tag2' }\n      ];\n\n      const times = [];\n\n      for (const filter of filterTests) {\n        const queryString = Object.entries(filter)\n          .map(([key, value]) => `${key}=${value}`)\n          .join('&');\n\n        const startTime = Date.now();\n        const response = await request(app)\n          .get(`/api/products?${queryString}`)\n          .expect(200);\n        const endTime = Date.now();\n\n        times.push(endTime - startTime);\n        expect(response.body.success).toBe(true);\n      }\n\n      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;\n      console.log(`Complex filtering - Average: ${avgTime}ms`);\n      \n      // Complex queries should average under 250ms\n      expect(avgTime).toBeLessThan(250);\n    });\n\n    it('should handle pagination efficiently with large datasets', async () => {\n      const pageTests = [\n        { page: 1, limit: 10 },\n        { page: 5, limit: 10 },\n        { page: 10, limit: 10 },\n        { page: 1, limit: 50 },\n        { page: 2, limit: 50 }\n      ];\n\n      const times = [];\n\n      for (const { page, limit } of pageTests) {\n        const startTime = Date.now();\n        const response = await request(app)\n          .get(`/api/products?page=${page}&limit=${limit}`)\n          .expect(200);\n        const endTime = Date.now();\n\n        times.push(endTime - startTime);\n        expect(response.body.success).toBe(true);\n        expect(response.body.products.length).toBeLessThanOrEqual(limit);\n      }\n\n      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;\n      console.log(`Pagination queries - Average: ${avgTime}ms`);\n      \n      // Pagination should average under 150ms\n      expect(avgTime).toBeLessThan(150);\n    });\n\n    it('should handle user order history queries efficiently', async () => {\n      // Create order history for users\n      const orderPromises = [];\n      for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < 5; j++) {\n          orderPromises.push(\n            Order.create({\n              customer: testUsers[i]._id,\n              items: [{\n                product: testProducts[j]._id,\n                quantity: 1,\n                price: testProducts[j].price\n              }],\n              shippingAddress: testUsers[i].addresses[0],\n              billingAddress: testUsers[i].addresses[0],\n              subtotal: testProducts[j].price,\n              total: testProducts[j].price,\n              payment: {\n                method: 'card',\n                status: 'paid'\n              },\n              status: 'delivered'\n            })\n          );\n        }\n      }\n      await Promise.all(orderPromises);\n\n      const times = [];\n\n      // Test order history queries for multiple users\n      for (let i = 0; i < 5; i++) {\n        const startTime = Date.now();\n        const response = await request(app)\n          .get('/api/orders')\n          .set('Authorization', `Bearer ${userTokens[i]}`)\n          .expect(200);\n        const endTime = Date.now();\n\n        times.push(endTime - startTime);\n        expect(response.body.success).toBe(true);\n        expect(response.body.data.orders.length).toBe(5);\n      }\n\n      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;\n      console.log(`Order history queries - Average: ${avgTime}ms`);\n      \n      // Order history should average under 200ms\n      expect(avgTime).toBeLessThan(200);\n    });\n  });\n\n  describe('Memory and Resource Usage', () => {\n    it('should not have significant memory leaks during repeated operations', async () => {\n      const initialMemory = process.memoryUsage();\n      \n      // Perform 100 product queries\n      for (let i = 0; i < 100; i++) {\n        await request(app)\n          .get('/api/products?limit=10')\n          .expect(200);\n      }\n\n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n\n      const finalMemory = process.memoryUsage();\n      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\n      \n      console.log(`Memory increase after 100 queries: ${Math.round(memoryIncrease / 1024 / 1024)}MB`);\n      \n      // Memory increase should be reasonable (less than 50MB)\n      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024);\n    });\n\n    it('should handle database connection pooling efficiently', async () => {\n      const connectionsBefore = mongoose.connection.readyState;\n      \n      // Perform many concurrent database operations\n      const operations = [];\n      for (let i = 0; i < 50; i++) {\n        operations.push(\n          Product.findOne({ slug: testProducts[i % testProducts.length].slug })\n        );\n      }\n\n      const startTime = Date.now();\n      const results = await Promise.all(operations);\n      const endTime = Date.now();\n\n      const connectionsAfter = mongoose.connection.readyState;\n\n      expect(connectionsBefore).toBe(connectionsAfter);\n      expect(results.length).toBe(50);\n      expect(endTime - startTime).toBeLessThan(1000);\n      \n      console.log(`50 concurrent DB operations: ${endTime - startTime}ms`);\n    });\n  });\n\n  describe('Rate Limiting Performance', () => {\n    it('should handle rate limiting gracefully under load', async () => {\n      const requests = [];\n      \n      // Make 150 requests rapidly (should hit rate limit)\n      for (let i = 0; i < 150; i++) {\n        requests.push(\n          request(app)\n            .get('/api/products')\n            .then(res => ({ status: res.status, success: res.body.success }))\n            .catch(err => ({ status: err.status || 500, success: false }))\n        );\n      }\n\n      const results = await Promise.all(requests);\n      \n      const successfulRequests = results.filter(r => r.status === 200).length;\n      const rateLimitedRequests = results.filter(r => r.status === 429).length;\n      \n      console.log(`Successful: ${successfulRequests}, Rate limited: ${rateLimitedRequests}`);\n      \n      // Should have some successful requests and some rate limited\n      expect(successfulRequests).toBeGreaterThan(50);\n      expect(rateLimitedRequests).toBeGreaterThan(0);\n      expect(successfulRequests + rateLimitedRequests).toBe(150);\n    });\n  });\n\n  describe('Error Handling Performance', () => {\n    it('should handle invalid requests efficiently', async () => {\n      const invalidRequests = [\n        request(app).get('/api/products/non-existent-slug'),\n        request(app).post('/api/auth/login').send({ invalid: 'data' }),\n        request(app).get('/api/orders').set('Authorization', 'Bearer invalid-token'),\n        request(app).post('/api/cart/add').send({}),\n        request(app).get('/api/admin/products')\n      ];\n\n      const startTime = Date.now();\n      const results = await Promise.all(\n        invalidRequests.map(req => \n          req.then(res => res).catch(err => err.response || { status: 500 })\n        )\n      );\n      const endTime = Date.now();\n\n      // All should return appropriate error status codes\n      expect(results[0].status).toBe(404);\n      expect(results[1].status).toBe(400);\n      expect(results[2].status).toBe(401);\n      expect(results[3].status).toBe(400);\n      expect(results[4].status).toBe(401);\n\n      console.log(`Error handling (5 requests): ${endTime - startTime}ms`);\n      \n      // Error handling should be fast\n      expect(endTime - startTime).toBeLessThan(500);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}