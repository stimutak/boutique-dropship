{"version":3,"names":["User","require","jwt","EventEmitter","AuthService","constructor","auditLog","rateLimitStore","Map","checkRateLimit","userId","now","Date","windowMs","maxRequests","userRequests","get","validRequests","filter","timestamp","length","allowed","retryAfter","Math","ceil","push","set","updateProfileOptimistically","updateData","auditContext","startTime","rateCheck","Error","currentUser","findById","lean","email","existingUser","findOne","_id","$ne","updatedUser","findByIdAndUpdate","updatedAt","new","runValidators","endTime","duration","phone","logSensitiveChange","emit","changes","performance","console","warn","user","success","error","message","manageAddressOptimistically","operation","addressData","addressId","result","addAddress","updateAddress","removeAddress","setDefaultAddress","context","auditEntry","Object","keys","key","includes","ip","userAgent","sessionId","slice","log","validateTokenSafely","token","decoded","verify","process","env","JWT_SECRET","isActive","valid","reason","refreshTokenIfNeeded","decode","expiresAt","exp","oneHourFromNow","refreshed","newToken","sign","expiresIn","notifyUserOfSensitiveChange","changeType","preferences","emailPreferences","orderConfirmations","synchronizeUserData","eventType","getUserAuditLog","limit","entry","toString","reverse","cleanupRateLimitStore","requests","entries","delete","withConnectionOptimization","authService","setInterval","module","exports"],"sources":["authService.js"],"sourcesContent":["const User = require('../models/User');\nconst jwt = require('jsonwebtoken');\nconst EventEmitter = require('events');\n\nclass AuthService extends EventEmitter {\n  constructor() {\n    super();\n    this.auditLog = [];\n    this.rateLimitStore = new Map(); // Simple in-memory rate limiting\n  }\n\n  // Rate limiting for profile updates (max 10 per minute)\n  checkRateLimit(userId) {\n    const now = Date.now();\n    const windowMs = 60 * 1000; // 1 minute\n    const maxRequests = 10;\n\n    const userRequests = this.rateLimitStore.get(userId) || [];\n    \n    // Remove old requests outside the window\n    const validRequests = userRequests.filter(timestamp => now - timestamp < windowMs);\n    \n    if (validRequests.length >= maxRequests) {\n      return {\n        allowed: false,\n        retryAfter: Math.ceil((validRequests[0] + windowMs - now) / 1000)\n      };\n    }\n\n    // Add current request\n    validRequests.push(now);\n    this.rateLimitStore.set(userId, validRequests);\n\n    return { allowed: true };\n  }\n\n  // Optimistic profile update with performance monitoring\n  async updateProfileOptimistically(userId, updateData, auditContext = {}) {\n    const startTime = Date.now();\n    \n    try {\n      // Rate limiting check\n      const rateCheck = this.checkRateLimit(userId);\n      if (!rateCheck.allowed) {\n        throw new Error(`Rate limit exceeded. Try again in ${rateCheck.retryAfter} seconds.`);\n      }\n\n      // Get current user for rollback if needed\n      const currentUser = await User.findById(userId).lean();\n      if (!currentUser) {\n        throw new Error('User not found');\n      }\n\n      // Validate email uniqueness if email is being changed\n      if (updateData.email && updateData.email !== currentUser.email) {\n        const existingUser = await User.findOne({ \n          email: updateData.email,\n          _id: { $ne: userId }\n        }).lean();\n        \n        if (existingUser) {\n          throw new Error('Email already in use');\n        }\n      }\n\n      // Perform optimistic update\n      const updatedUser = await User.findByIdAndUpdate(\n        userId,\n        { \n          ...updateData,\n          updatedAt: new Date()\n        },\n        { \n          new: true, \n          runValidators: true,\n          lean: true\n        }\n      );\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      // Audit logging for sensitive changes\n      if (updateData.email || updateData.phone) {\n        this.logSensitiveChange(userId, updateData, auditContext);\n      }\n\n      // Emit profile update event\n      this.emit('profileUpdated', {\n        userId,\n        changes: updateData,\n        timestamp: new Date(),\n        performance: { duration }\n      });\n\n      // Performance monitoring (target: 200ms)\n      if (duration > 200) {\n        console.warn(`Profile update took ${duration}ms - exceeds 200ms target`);\n      }\n\n      return {\n        user: updatedUser,\n        duration,\n        performance: duration <= 200 ? 'good' : 'needs_optimization',\n        success: true\n      };\n\n    } catch (error) {\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      console.error('Profile update error:', error);\n      \n      return {\n        success: false,\n        error: error.message,\n        duration\n      };\n    }\n  }\n\n  // Enhanced address management without authentication loss\n  async manageAddressOptimistically(userId, operation, addressData = {}, addressId = null) {\n    const startTime = Date.now();\n    \n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      let result;\n      switch (operation) {\n        case 'add':\n          result = await user.addAddress(addressData);\n          break;\n        case 'update':\n          result = await user.updateAddress(addressId, addressData);\n          break;\n        case 'delete':\n          result = await user.removeAddress(addressId);\n          break;\n        case 'setDefault':\n          result = await user.setDefaultAddress(addressId);\n          break;\n        default:\n          throw new Error(`Unknown address operation: ${operation}`);\n      }\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      // Emit address update event\n      this.emit('addressUpdated', {\n        userId,\n        operation,\n        addressId,\n        timestamp: new Date(),\n        performance: { duration }\n      });\n\n      return {\n        user: result,\n        duration,\n        performance: duration <= 200 ? 'good' : 'needs_optimization',\n        success: true\n      };\n\n    } catch (error) {\n      console.error('Address management error:', error);\n      return {\n        success: false,\n        error: error.message,\n        duration: Date.now() - startTime\n      };\n    }\n  }\n\n  // Audit logging for sensitive operations\n  logSensitiveChange(userId, changes, context) {\n    const auditEntry = {\n      userId,\n      timestamp: new Date(),\n      changes: Object.keys(changes).filter(key => ['email', 'phone'].includes(key)),\n      ip: context.ip,\n      userAgent: context.userAgent,\n      sessionId: context.sessionId\n    };\n    \n    this.auditLog.push(auditEntry);\n    \n    // Keep only last 1000 entries in memory\n    if (this.auditLog.length > 1000) {\n      this.auditLog = this.auditLog.slice(-1000);\n    }\n    \n    console.log('Sensitive profile change:', auditEntry);\n  }\n\n  // Validate token without requiring re-authentication\n  async validateTokenSafely(token) {\n    try {\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);\n      const user = await User.findById(decoded.userId).lean();\n      \n      if (!user || !user.isActive) {\n        return { valid: false, reason: 'user_not_found' };\n      }\n      \n      return { valid: true, user, decoded };\n    } catch (error) {\n      return { valid: false, reason: 'invalid_token', error: error.message };\n    }\n  }\n\n  // Enhanced token refresh mechanism\n  async refreshTokenIfNeeded(token) {\n    try {\n      const decoded = jwt.decode(token);\n      if (!decoded) {\n        return { success: false, reason: 'invalid_token' };\n      }\n\n      // Check if token expires within next hour\n      const expiresAt = decoded.exp * 1000;\n      const oneHourFromNow = Date.now() + (60 * 60 * 1000);\n      \n      if (expiresAt > oneHourFromNow) {\n        return { success: true, refreshed: false, token };\n      }\n\n      // Generate new token\n      const newToken = jwt.sign(\n        { userId: decoded.userId },\n        process.env.JWT_SECRET,\n        { expiresIn: '7d' }\n      );\n\n      return {\n        success: true,\n        refreshed: true,\n        token: newToken,\n        expiresAt: new Date(Date.now() + (7 * 24 * 60 * 60 * 1000))\n      };\n\n    } catch (error) {\n      return { success: false, reason: 'refresh_failed', error: error.message };\n    }\n  }\n\n  // Email notification for sensitive changes\n  async notifyUserOfSensitiveChange(userId, changeType, context = {}) {\n    try {\n      const user = await User.findById(userId).lean();\n      if (!user || !user.preferences?.emailPreferences?.orderConfirmations) {\n        return; // User doesn't want notifications\n      }\n\n      // This would integrate with your email service\n      console.log(`Email notification sent to ${user.email}: ${changeType} changed`);\n      \n      // Emit notification event\n      this.emit('sensitiveChangeNotification', {\n        userId,\n        email: user.email,\n        changeType,\n        timestamp: new Date(),\n        context\n      });\n\n    } catch (error) {\n      console.error('Failed to send sensitive change notification:', error);\n    }\n  }\n\n  // Optimistic user data synchronization\n  async synchronizeUserData(userId, eventType = 'manual') {\n    try {\n      const user = await User.findById(userId).lean();\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      // Emit synchronization event for real-time updates\n      this.emit('userDataSync', {\n        userId,\n        user,\n        eventType,\n        timestamp: new Date()\n      });\n\n      return { success: true, user };\n    } catch (error) {\n      console.error('User data synchronization error:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Get audit log for user (for admin or debugging)\n  getUserAuditLog(userId, limit = 50) {\n    return this.auditLog\n      .filter(entry => entry.userId.toString() === userId.toString())\n      .slice(-limit)\n      .reverse();\n  }\n\n  // Clean up rate limit store periodically\n  cleanupRateLimitStore() {\n    const now = Date.now();\n    const windowMs = 60 * 1000; // 1 minute\n\n    for (const [userId, requests] of this.rateLimitStore.entries()) {\n      const validRequests = requests.filter(timestamp => now - timestamp < windowMs);\n      \n      if (validRequests.length === 0) {\n        this.rateLimitStore.delete(userId);\n      } else {\n        this.rateLimitStore.set(userId, validRequests);\n      }\n    }\n  }\n\n  // Connection pooling awareness\n  async withConnectionOptimization(operation) {\n    const startTime = Date.now();\n    \n    try {\n      const result = await operation();\n      const duration = Date.now() - startTime;\n      \n      if (duration > 100) {\n        console.warn(`Database operation took ${duration}ms - consider connection pooling optimization`);\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Database operation failed:', error);\n      throw error;\n    }\n  }\n}\n\n// Cleanup rate limit store every 5 minutes\nconst authService = new AuthService();\nsetInterval(() => {\n  authService.cleanupRateLimitStore();\n}, 5 * 60 * 1000);\n\nmodule.exports = authService;"],"mappings":"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","ignoreList":[]}