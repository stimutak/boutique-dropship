{"version":3,"names":["request","require","app","Order","Product","connectDB","clearDB","closeDB","describe","agent","testOrder","csrfToken","beforeAll","afterAll","beforeEach","csrfRes","get","body","product","create","name","slug","description","price","category","images","url","alt","orderNumber","Date","now","items","_id","quantity","subtotal","shipping","tax","total","customer","guestInfo","email","firstName","lastName","shippingAddress","street","city","state","zipCode","country","billingAddress","status","paymentStatus","test","res","post","set","send","expect","toBe","success","message","order","updatedOrder","findById","paymentMethod","save","error","code","orderId","returnUrl","toContain","id","toBeDefined"],"sources":["payment.test.js"],"sourcesContent":["const request = require('supertest');\nconst app = require('../../server');\nconst Order = require('../../models/Order');\nconst Product = require('../../models/Product');\nconst { connectDB, clearDB, closeDB } = require('../setup/testDb');\n\ndescribe('Payment Integration Tests', () => {\n  let agent;\n  let testOrder;\n  let csrfToken;\n\n  beforeAll(async () => {\n    await connectDB();\n  });\n\n  afterAll(async () => {\n    await closeDB();\n  });\n\n  beforeEach(async () => {\n    await clearDB();\n    agent = request.agent(app);\n    \n    // Get CSRF token\n    const csrfRes = await agent.get('/api/csrf-token');\n    csrfToken = csrfRes.body.csrfToken;\n\n    // Create test product\n    const product = await Product.create({\n      name: 'Test Product',\n      slug: 'test-product',\n      description: 'Test description',\n      price: 50.00,\n      category: 'other',\n      images: [{ url: 'test.jpg', alt: 'Test' }]\n    });\n\n    // Create test order\n    testOrder = await Order.create({\n      orderNumber: `TEST-${Date.now()}`,\n      items: [{\n        product: product._id,\n        quantity: 2,\n        price: 50.00\n      }],\n      subtotal: 100.00,\n      shipping: 10.00,\n      tax: 11.00,\n      total: 121.00,\n      customer: null,\n      guestInfo: {\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User'\n      },\n      shippingAddress: {\n        firstName: 'Test',\n        lastName: 'User',\n        street: '123 Test St',\n        city: 'Paris',\n        state: 'IDF',\n        zipCode: '75001',\n        country: 'FR'\n      },\n      billingAddress: {\n        firstName: 'Test',\n        lastName: 'User',\n        street: '123 Test St',\n        city: 'Paris',\n        state: 'IDF',\n        zipCode: '75001',\n        country: 'FR'\n      },\n      status: 'pending',\n      paymentStatus: 'pending'\n    });\n  });\n\n  describe('Demo Payment', () => {\n    test('should complete demo payment successfully', async () => {\n      const res = await agent\n        .post(`/api/payments/demo-complete/${testOrder._id}`)\n        .set('X-CSRF-Token', csrfToken)\n        .send({});\n      \n      expect(res.status).toBe(200);\n      expect(res.body.success).toBe(true);\n      expect(res.body.message).toBe('Demo payment completed successfully');\n      expect(res.body.order.status).toBe('processing');\n      \n      // Verify order was updated\n      const updatedOrder = await Order.findById(testOrder._id);\n      expect(updatedOrder.status).toBe('processing');\n      expect(updatedOrder.paymentStatus).toBe('paid');\n      expect(updatedOrder.paymentMethod).toBe('demo');\n    });\n\n    test('should not allow demo payment for already paid order', async () => {\n      // Mark order as paid\n      testOrder.paymentStatus = 'paid';\n      testOrder.status = 'processing';\n      await testOrder.save();\n\n      const res = await agent\n        .post(`/api/payments/demo-complete/${testOrder._id}`)\n        .set('X-CSRF-Token', csrfToken)\n        .send({});\n      \n      expect(res.status).toBe(400);\n      expect(res.body.error.code).toBe('ORDER_ALREADY_PAID');\n    });\n\n    test('should handle invalid order ID', async () => {\n      const res = await agent\n        .post('/api/payments/demo-complete/invalid-id')\n        .set('X-CSRF-Token', csrfToken)\n        .send({});\n      \n      expect(res.status).toBe(400);\n      expect(res.body.error.code).toBe('VALIDATION_ERROR');\n    });\n  });\n\n  describe('Payment Creation', () => {\n    test('should handle Mollie unavailability gracefully', async () => {\n      const res = await agent\n        .post('/api/payments/create')\n        .set('X-CSRF-Token', csrfToken)\n        .send({\n          orderId: testOrder._id,\n          paymentMethod: 'ideal',\n          returnUrl: 'http://localhost:3000/payment-success'\n        });\n      \n      expect(res.status).toBe(503);\n      expect(res.body.error.code).toBe('MOLLIE_API_ERROR');\n      expect(res.body.error.message).toContain('demo payment');\n    });\n  });\n\n  describe('Webhook Processing', () => {\n    test('should validate webhook requests', async () => {\n      const res = await request(app)\n        .post('/api/payments/webhook')\n        .send({ id: 'tr_test123' });\n      \n      // Should fail without proper Mollie setup\n      expect(res.status).toBe(500);\n    });\n  });\n\n  describe('Payment Status', () => {\n    test('should get payment status for order', async () => {\n      // Complete demo payment first\n      await agent\n        .post(`/api/payments/demo-complete/${testOrder._id}`)\n        .set('X-CSRF-Token', csrfToken)\n        .send({});\n\n      const res = await agent\n        .get(`/api/payments/status/${testOrder._id}`)\n        .set('X-CSRF-Token', csrfToken);\n      \n      expect(res.status).toBe(200);\n      expect(res.body.success).toBe(true);\n      expect(res.body.paymentStatus).toBe('paid');\n      expect(res.body.order).toBeDefined();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}